
FB5_XBEE_GUI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800200  00002b34  00002bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002c  00800228  00800228  00002bf0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000004ec  00000000  00000000  00002c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c2f  00000000  00000000  000030fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f6  00000000  00000000  00003d2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013ab  00000000  00000000  00003f21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b0  00000000  00000000  000052cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000055b  00000000  00000000  0000557c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__vector_5>
      18:	0c 94 f8 0b 	jmp	0x17f0	; 0x17f0 <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e3       	ldi	r30, 0x34	; 52
      fc:	fb e2       	ldi	r31, 0x2B	; 43
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 32       	cpi	r26, 0x28	; 40
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	12 e0       	ldi	r17, 0x02	; 2
     110:	a8 e2       	ldi	r26, 0x28	; 40
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 35       	cpi	r26, 0x54	; 84
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <main>
     122:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
int i;


/*****Function to Reset LCD*****/
void lcd_set_4bit()
{
     12a:	0f 93       	push	r16
     12c:	1f 93       	push	r17
     12e:	df 93       	push	r29
     130:	cf 93       	push	r28
     132:	cd b7       	in	r28, 0x3d	; 61
     134:	de b7       	in	r29, 0x3e	; 62
     136:	c0 57       	subi	r28, 0x70	; 112
     138:	d0 40       	sbci	r29, 0x00	; 0
     13a:	0f b6       	in	r0, 0x3f	; 63
     13c:	f8 94       	cli
     13e:	de bf       	out	0x3e, r29	; 62
     140:	0f be       	out	0x3f, r0	; 63
     142:	cd bf       	out	0x3d, r28	; 61
     144:	fe 01       	movw	r30, r28
     146:	e3 59       	subi	r30, 0x93	; 147
     148:	ff 4f       	sbci	r31, 0xFF	; 255
     14a:	80 e0       	ldi	r24, 0x00	; 0
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	a0 e8       	ldi	r26, 0x80	; 128
     150:	bf e3       	ldi	r27, 0x3F	; 63
     152:	80 83       	st	Z, r24
     154:	91 83       	std	Z+1, r25	; 0x01
     156:	a2 83       	std	Z+2, r26	; 0x02
     158:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     15a:	8e 01       	movw	r16, r28
     15c:	07 59       	subi	r16, 0x97	; 151
     15e:	1f 4f       	sbci	r17, 0xFF	; 255
     160:	fe 01       	movw	r30, r28
     162:	e3 59       	subi	r30, 0x93	; 147
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	60 81       	ld	r22, Z
     168:	71 81       	ldd	r23, Z+1	; 0x01
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	26 e6       	ldi	r18, 0x66	; 102
     170:	36 e6       	ldi	r19, 0x66	; 102
     172:	46 e6       	ldi	r20, 0x66	; 102
     174:	55 e4       	ldi	r21, 0x45	; 69
     176:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     17a:	dc 01       	movw	r26, r24
     17c:	cb 01       	movw	r24, r22
     17e:	f8 01       	movw	r30, r16
     180:	80 83       	st	Z, r24
     182:	91 83       	std	Z+1, r25	; 0x01
     184:	a2 83       	std	Z+2, r26	; 0x02
     186:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     188:	fe 01       	movw	r30, r28
     18a:	e7 59       	subi	r30, 0x97	; 151
     18c:	ff 4f       	sbci	r31, 0xFF	; 255
     18e:	60 81       	ld	r22, Z
     190:	71 81       	ldd	r23, Z+1	; 0x01
     192:	82 81       	ldd	r24, Z+2	; 0x02
     194:	93 81       	ldd	r25, Z+3	; 0x03
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	40 e8       	ldi	r20, 0x80	; 128
     19c:	5f e3       	ldi	r21, 0x3F	; 63
     19e:	0e 94 23 13 	call	0x2646	; 0x2646 <__ltsf2>
     1a2:	88 23       	and	r24, r24
     1a4:	44 f4       	brge	.+16     	; 0x1b6 <lcd_set_4bit+0x8c>
		__ticks = 1;
     1a6:	fe 01       	movw	r30, r28
     1a8:	e9 59       	subi	r30, 0x99	; 153
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	91 83       	std	Z+1, r25	; 0x01
     1b2:	80 83       	st	Z, r24
     1b4:	64 c0       	rjmp	.+200    	; 0x27e <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     1b6:	fe 01       	movw	r30, r28
     1b8:	e7 59       	subi	r30, 0x97	; 151
     1ba:	ff 4f       	sbci	r31, 0xFF	; 255
     1bc:	60 81       	ld	r22, Z
     1be:	71 81       	ldd	r23, Z+1	; 0x01
     1c0:	82 81       	ldd	r24, Z+2	; 0x02
     1c2:	93 81       	ldd	r25, Z+3	; 0x03
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	3f ef       	ldi	r19, 0xFF	; 255
     1c8:	4f e7       	ldi	r20, 0x7F	; 127
     1ca:	57 e4       	ldi	r21, 0x47	; 71
     1cc:	0e 94 c3 12 	call	0x2586	; 0x2586 <__gtsf2>
     1d0:	18 16       	cp	r1, r24
     1d2:	0c f0       	brlt	.+2      	; 0x1d6 <lcd_set_4bit+0xac>
     1d4:	43 c0       	rjmp	.+134    	; 0x25c <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d6:	fe 01       	movw	r30, r28
     1d8:	e3 59       	subi	r30, 0x93	; 147
     1da:	ff 4f       	sbci	r31, 0xFF	; 255
     1dc:	60 81       	ld	r22, Z
     1de:	71 81       	ldd	r23, Z+1	; 0x01
     1e0:	82 81       	ldd	r24, Z+2	; 0x02
     1e2:	93 81       	ldd	r25, Z+3	; 0x03
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	40 e2       	ldi	r20, 0x20	; 32
     1ea:	51 e4       	ldi	r21, 0x41	; 65
     1ec:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	8e 01       	movw	r16, r28
     1f6:	09 59       	subi	r16, 0x99	; 153
     1f8:	1f 4f       	sbci	r17, 0xFF	; 255
     1fa:	bc 01       	movw	r22, r24
     1fc:	cd 01       	movw	r24, r26
     1fe:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     202:	dc 01       	movw	r26, r24
     204:	cb 01       	movw	r24, r22
     206:	f8 01       	movw	r30, r16
     208:	91 83       	std	Z+1, r25	; 0x01
     20a:	80 83       	st	Z, r24
     20c:	1f c0       	rjmp	.+62     	; 0x24c <lcd_set_4bit+0x122>
     20e:	fe 01       	movw	r30, r28
     210:	eb 59       	subi	r30, 0x9B	; 155
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	80 e7       	ldi	r24, 0x70	; 112
     216:	91 e0       	ldi	r25, 0x01	; 1
     218:	91 83       	std	Z+1, r25	; 0x01
     21a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     21c:	fe 01       	movw	r30, r28
     21e:	eb 59       	subi	r30, 0x9B	; 155
     220:	ff 4f       	sbci	r31, 0xFF	; 255
     222:	80 81       	ld	r24, Z
     224:	91 81       	ldd	r25, Z+1	; 0x01
     226:	01 97       	sbiw	r24, 0x01	; 1
     228:	f1 f7       	brne	.-4      	; 0x226 <lcd_set_4bit+0xfc>
     22a:	fe 01       	movw	r30, r28
     22c:	eb 59       	subi	r30, 0x9B	; 155
     22e:	ff 4f       	sbci	r31, 0xFF	; 255
     230:	91 83       	std	Z+1, r25	; 0x01
     232:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     234:	de 01       	movw	r26, r28
     236:	a9 59       	subi	r26, 0x99	; 153
     238:	bf 4f       	sbci	r27, 0xFF	; 255
     23a:	fe 01       	movw	r30, r28
     23c:	e9 59       	subi	r30, 0x99	; 153
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	11 96       	adiw	r26, 0x01	; 1
     248:	9c 93       	st	X, r25
     24a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     24c:	fe 01       	movw	r30, r28
     24e:	e9 59       	subi	r30, 0x99	; 153
     250:	ff 4f       	sbci	r31, 0xFF	; 255
     252:	80 81       	ld	r24, Z
     254:	91 81       	ldd	r25, Z+1	; 0x01
     256:	00 97       	sbiw	r24, 0x00	; 0
     258:	d1 f6       	brne	.-76     	; 0x20e <lcd_set_4bit+0xe4>
     25a:	27 c0       	rjmp	.+78     	; 0x2aa <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     25c:	8e 01       	movw	r16, r28
     25e:	09 59       	subi	r16, 0x99	; 153
     260:	1f 4f       	sbci	r17, 0xFF	; 255
     262:	fe 01       	movw	r30, r28
     264:	e7 59       	subi	r30, 0x97	; 151
     266:	ff 4f       	sbci	r31, 0xFF	; 255
     268:	60 81       	ld	r22, Z
     26a:	71 81       	ldd	r23, Z+1	; 0x01
     26c:	82 81       	ldd	r24, Z+2	; 0x02
     26e:	93 81       	ldd	r25, Z+3	; 0x03
     270:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     274:	dc 01       	movw	r26, r24
     276:	cb 01       	movw	r24, r22
     278:	f8 01       	movw	r30, r16
     27a:	91 83       	std	Z+1, r25	; 0x01
     27c:	80 83       	st	Z, r24
     27e:	de 01       	movw	r26, r28
     280:	ad 59       	subi	r26, 0x9D	; 157
     282:	bf 4f       	sbci	r27, 0xFF	; 255
     284:	fe 01       	movw	r30, r28
     286:	e9 59       	subi	r30, 0x99	; 153
     288:	ff 4f       	sbci	r31, 0xFF	; 255
     28a:	80 81       	ld	r24, Z
     28c:	91 81       	ldd	r25, Z+1	; 0x01
     28e:	8d 93       	st	X+, r24
     290:	9c 93       	st	X, r25
     292:	fe 01       	movw	r30, r28
     294:	ed 59       	subi	r30, 0x9D	; 157
     296:	ff 4f       	sbci	r31, 0xFF	; 255
     298:	80 81       	ld	r24, Z
     29a:	91 81       	ldd	r25, Z+1	; 0x01
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x172>
     2a0:	fe 01       	movw	r30, r28
     2a2:	ed 59       	subi	r30, 0x9D	; 157
     2a4:	ff 4f       	sbci	r31, 0xFF	; 255
     2a6:	91 83       	std	Z+1, r25	; 0x01
     2a8:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2aa:	a8 e2       	ldi	r26, 0x28	; 40
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e8 e2       	ldi	r30, 0x28	; 40
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	8e 7f       	andi	r24, 0xFE	; 254
     2b6:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2b8:	a8 e2       	ldi	r26, 0x28	; 40
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 e2       	ldi	r30, 0x28	; 40
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 81       	ld	r24, Z
     2c2:	8d 7f       	andi	r24, 0xFD	; 253
     2c4:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     2c6:	e8 e2       	ldi	r30, 0x28	; 40
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 e3       	ldi	r24, 0x30	; 48
     2cc:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     2ce:	a8 e2       	ldi	r26, 0x28	; 40
     2d0:	b0 e0       	ldi	r27, 0x00	; 0
     2d2:	e8 e2       	ldi	r30, 0x28	; 40
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	8c 93       	st	X, r24
     2dc:	fe 01       	movw	r30, r28
     2de:	e1 5a       	subi	r30, 0xA1	; 161
     2e0:	ff 4f       	sbci	r31, 0xFF	; 255
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	a0 ea       	ldi	r26, 0xA0	; 160
     2e8:	b0 e4       	ldi	r27, 0x40	; 64
     2ea:	80 83       	st	Z, r24
     2ec:	91 83       	std	Z+1, r25	; 0x01
     2ee:	a2 83       	std	Z+2, r26	; 0x02
     2f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     2f2:	8e 01       	movw	r16, r28
     2f4:	05 5a       	subi	r16, 0xA5	; 165
     2f6:	1f 4f       	sbci	r17, 0xFF	; 255
     2f8:	fe 01       	movw	r30, r28
     2fa:	e1 5a       	subi	r30, 0xA1	; 161
     2fc:	ff 4f       	sbci	r31, 0xFF	; 255
     2fe:	60 81       	ld	r22, Z
     300:	71 81       	ldd	r23, Z+1	; 0x01
     302:	82 81       	ldd	r24, Z+2	; 0x02
     304:	93 81       	ldd	r25, Z+3	; 0x03
     306:	26 e6       	ldi	r18, 0x66	; 102
     308:	36 e6       	ldi	r19, 0x66	; 102
     30a:	46 e6       	ldi	r20, 0x66	; 102
     30c:	55 e4       	ldi	r21, 0x45	; 69
     30e:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     312:	dc 01       	movw	r26, r24
     314:	cb 01       	movw	r24, r22
     316:	f8 01       	movw	r30, r16
     318:	80 83       	st	Z, r24
     31a:	91 83       	std	Z+1, r25	; 0x01
     31c:	a2 83       	std	Z+2, r26	; 0x02
     31e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     320:	fe 01       	movw	r30, r28
     322:	e5 5a       	subi	r30, 0xA5	; 165
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	60 81       	ld	r22, Z
     328:	71 81       	ldd	r23, Z+1	; 0x01
     32a:	82 81       	ldd	r24, Z+2	; 0x02
     32c:	93 81       	ldd	r25, Z+3	; 0x03
     32e:	20 e0       	ldi	r18, 0x00	; 0
     330:	30 e0       	ldi	r19, 0x00	; 0
     332:	40 e8       	ldi	r20, 0x80	; 128
     334:	5f e3       	ldi	r21, 0x3F	; 63
     336:	0e 94 23 13 	call	0x2646	; 0x2646 <__ltsf2>
     33a:	88 23       	and	r24, r24
     33c:	44 f4       	brge	.+16     	; 0x34e <lcd_set_4bit+0x224>
		__ticks = 1;
     33e:	fe 01       	movw	r30, r28
     340:	e7 5a       	subi	r30, 0xA7	; 167
     342:	ff 4f       	sbci	r31, 0xFF	; 255
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	91 83       	std	Z+1, r25	; 0x01
     34a:	80 83       	st	Z, r24
     34c:	64 c0       	rjmp	.+200    	; 0x416 <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     34e:	fe 01       	movw	r30, r28
     350:	e5 5a       	subi	r30, 0xA5	; 165
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	60 81       	ld	r22, Z
     356:	71 81       	ldd	r23, Z+1	; 0x01
     358:	82 81       	ldd	r24, Z+2	; 0x02
     35a:	93 81       	ldd	r25, Z+3	; 0x03
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	3f ef       	ldi	r19, 0xFF	; 255
     360:	4f e7       	ldi	r20, 0x7F	; 127
     362:	57 e4       	ldi	r21, 0x47	; 71
     364:	0e 94 c3 12 	call	0x2586	; 0x2586 <__gtsf2>
     368:	18 16       	cp	r1, r24
     36a:	0c f0       	brlt	.+2      	; 0x36e <lcd_set_4bit+0x244>
     36c:	43 c0       	rjmp	.+134    	; 0x3f4 <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     36e:	fe 01       	movw	r30, r28
     370:	e1 5a       	subi	r30, 0xA1	; 161
     372:	ff 4f       	sbci	r31, 0xFF	; 255
     374:	60 81       	ld	r22, Z
     376:	71 81       	ldd	r23, Z+1	; 0x01
     378:	82 81       	ldd	r24, Z+2	; 0x02
     37a:	93 81       	ldd	r25, Z+3	; 0x03
     37c:	20 e0       	ldi	r18, 0x00	; 0
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	40 e2       	ldi	r20, 0x20	; 32
     382:	51 e4       	ldi	r21, 0x41	; 65
     384:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     388:	dc 01       	movw	r26, r24
     38a:	cb 01       	movw	r24, r22
     38c:	8e 01       	movw	r16, r28
     38e:	07 5a       	subi	r16, 0xA7	; 167
     390:	1f 4f       	sbci	r17, 0xFF	; 255
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	f8 01       	movw	r30, r16
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	80 83       	st	Z, r24
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <lcd_set_4bit+0x2ba>
     3a6:	fe 01       	movw	r30, r28
     3a8:	e9 5a       	subi	r30, 0xA9	; 169
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	80 e7       	ldi	r24, 0x70	; 112
     3ae:	91 e0       	ldi	r25, 0x01	; 1
     3b0:	91 83       	std	Z+1, r25	; 0x01
     3b2:	80 83       	st	Z, r24
     3b4:	fe 01       	movw	r30, r28
     3b6:	e9 5a       	subi	r30, 0xA9	; 169
     3b8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ba:	80 81       	ld	r24, Z
     3bc:	91 81       	ldd	r25, Z+1	; 0x01
     3be:	01 97       	sbiw	r24, 0x01	; 1
     3c0:	f1 f7       	brne	.-4      	; 0x3be <lcd_set_4bit+0x294>
     3c2:	fe 01       	movw	r30, r28
     3c4:	e9 5a       	subi	r30, 0xA9	; 169
     3c6:	ff 4f       	sbci	r31, 0xFF	; 255
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3cc:	de 01       	movw	r26, r28
     3ce:	a7 5a       	subi	r26, 0xA7	; 167
     3d0:	bf 4f       	sbci	r27, 0xFF	; 255
     3d2:	fe 01       	movw	r30, r28
     3d4:	e7 5a       	subi	r30, 0xA7	; 167
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	80 81       	ld	r24, Z
     3da:	91 81       	ldd	r25, Z+1	; 0x01
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	11 96       	adiw	r26, 0x01	; 1
     3e0:	9c 93       	st	X, r25
     3e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e4:	fe 01       	movw	r30, r28
     3e6:	e7 5a       	subi	r30, 0xA7	; 167
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ea:	80 81       	ld	r24, Z
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	00 97       	sbiw	r24, 0x00	; 0
     3f0:	d1 f6       	brne	.-76     	; 0x3a6 <lcd_set_4bit+0x27c>
     3f2:	27 c0       	rjmp	.+78     	; 0x442 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3f4:	8e 01       	movw	r16, r28
     3f6:	07 5a       	subi	r16, 0xA7	; 167
     3f8:	1f 4f       	sbci	r17, 0xFF	; 255
     3fa:	fe 01       	movw	r30, r28
     3fc:	e5 5a       	subi	r30, 0xA5	; 165
     3fe:	ff 4f       	sbci	r31, 0xFF	; 255
     400:	60 81       	ld	r22, Z
     402:	71 81       	ldd	r23, Z+1	; 0x01
     404:	82 81       	ldd	r24, Z+2	; 0x02
     406:	93 81       	ldd	r25, Z+3	; 0x03
     408:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	f8 01       	movw	r30, r16
     412:	91 83       	std	Z+1, r25	; 0x01
     414:	80 83       	st	Z, r24
     416:	de 01       	movw	r26, r28
     418:	ab 5a       	subi	r26, 0xAB	; 171
     41a:	bf 4f       	sbci	r27, 0xFF	; 255
     41c:	fe 01       	movw	r30, r28
     41e:	e7 5a       	subi	r30, 0xA7	; 167
     420:	ff 4f       	sbci	r31, 0xFF	; 255
     422:	80 81       	ld	r24, Z
     424:	91 81       	ldd	r25, Z+1	; 0x01
     426:	8d 93       	st	X+, r24
     428:	9c 93       	st	X, r25
     42a:	fe 01       	movw	r30, r28
     42c:	eb 5a       	subi	r30, 0xAB	; 171
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	80 81       	ld	r24, Z
     432:	91 81       	ldd	r25, Z+1	; 0x01
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <lcd_set_4bit+0x30a>
     438:	fe 01       	movw	r30, r28
     43a:	eb 5a       	subi	r30, 0xAB	; 171
     43c:	ff 4f       	sbci	r31, 0xFF	; 255
     43e:	91 83       	std	Z+1, r25	; 0x01
     440:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     442:	a8 e2       	ldi	r26, 0x28	; 40
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e8 e2       	ldi	r30, 0x28	; 40
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	8b 7f       	andi	r24, 0xFB	; 251
     44e:	8c 93       	st	X, r24
     450:	fe 01       	movw	r30, r28
     452:	ef 5a       	subi	r30, 0xAF	; 175
     454:	ff 4f       	sbci	r31, 0xFF	; 255
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	a0 e8       	ldi	r26, 0x80	; 128
     45c:	bf e3       	ldi	r27, 0x3F	; 63
     45e:	80 83       	st	Z, r24
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	a2 83       	std	Z+2, r26	; 0x02
     464:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     466:	8e 01       	movw	r16, r28
     468:	03 5b       	subi	r16, 0xB3	; 179
     46a:	1f 4f       	sbci	r17, 0xFF	; 255
     46c:	fe 01       	movw	r30, r28
     46e:	ef 5a       	subi	r30, 0xAF	; 175
     470:	ff 4f       	sbci	r31, 0xFF	; 255
     472:	60 81       	ld	r22, Z
     474:	71 81       	ldd	r23, Z+1	; 0x01
     476:	82 81       	ldd	r24, Z+2	; 0x02
     478:	93 81       	ldd	r25, Z+3	; 0x03
     47a:	26 e6       	ldi	r18, 0x66	; 102
     47c:	36 e6       	ldi	r19, 0x66	; 102
     47e:	46 e6       	ldi	r20, 0x66	; 102
     480:	55 e4       	ldi	r21, 0x45	; 69
     482:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     486:	dc 01       	movw	r26, r24
     488:	cb 01       	movw	r24, r22
     48a:	f8 01       	movw	r30, r16
     48c:	80 83       	st	Z, r24
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	a2 83       	std	Z+2, r26	; 0x02
     492:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     494:	fe 01       	movw	r30, r28
     496:	e3 5b       	subi	r30, 0xB3	; 179
     498:	ff 4f       	sbci	r31, 0xFF	; 255
     49a:	60 81       	ld	r22, Z
     49c:	71 81       	ldd	r23, Z+1	; 0x01
     49e:	82 81       	ldd	r24, Z+2	; 0x02
     4a0:	93 81       	ldd	r25, Z+3	; 0x03
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	40 e8       	ldi	r20, 0x80	; 128
     4a8:	5f e3       	ldi	r21, 0x3F	; 63
     4aa:	0e 94 23 13 	call	0x2646	; 0x2646 <__ltsf2>
     4ae:	88 23       	and	r24, r24
     4b0:	44 f4       	brge	.+16     	; 0x4c2 <lcd_set_4bit+0x398>
		__ticks = 1;
     4b2:	fe 01       	movw	r30, r28
     4b4:	e5 5b       	subi	r30, 0xB5	; 181
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	91 83       	std	Z+1, r25	; 0x01
     4be:	80 83       	st	Z, r24
     4c0:	64 c0       	rjmp	.+200    	; 0x58a <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     4c2:	fe 01       	movw	r30, r28
     4c4:	e3 5b       	subi	r30, 0xB3	; 179
     4c6:	ff 4f       	sbci	r31, 0xFF	; 255
     4c8:	60 81       	ld	r22, Z
     4ca:	71 81       	ldd	r23, Z+1	; 0x01
     4cc:	82 81       	ldd	r24, Z+2	; 0x02
     4ce:	93 81       	ldd	r25, Z+3	; 0x03
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	3f ef       	ldi	r19, 0xFF	; 255
     4d4:	4f e7       	ldi	r20, 0x7F	; 127
     4d6:	57 e4       	ldi	r21, 0x47	; 71
     4d8:	0e 94 c3 12 	call	0x2586	; 0x2586 <__gtsf2>
     4dc:	18 16       	cp	r1, r24
     4de:	0c f0       	brlt	.+2      	; 0x4e2 <lcd_set_4bit+0x3b8>
     4e0:	43 c0       	rjmp	.+134    	; 0x568 <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4e2:	fe 01       	movw	r30, r28
     4e4:	ef 5a       	subi	r30, 0xAF	; 175
     4e6:	ff 4f       	sbci	r31, 0xFF	; 255
     4e8:	60 81       	ld	r22, Z
     4ea:	71 81       	ldd	r23, Z+1	; 0x01
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	40 e2       	ldi	r20, 0x20	; 32
     4f6:	51 e4       	ldi	r21, 0x41	; 65
     4f8:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     4fc:	dc 01       	movw	r26, r24
     4fe:	cb 01       	movw	r24, r22
     500:	8e 01       	movw	r16, r28
     502:	05 5b       	subi	r16, 0xB5	; 181
     504:	1f 4f       	sbci	r17, 0xFF	; 255
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     50e:	dc 01       	movw	r26, r24
     510:	cb 01       	movw	r24, r22
     512:	f8 01       	movw	r30, r16
     514:	91 83       	std	Z+1, r25	; 0x01
     516:	80 83       	st	Z, r24
     518:	1f c0       	rjmp	.+62     	; 0x558 <lcd_set_4bit+0x42e>
     51a:	fe 01       	movw	r30, r28
     51c:	e7 5b       	subi	r30, 0xB7	; 183
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	80 e7       	ldi	r24, 0x70	; 112
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	91 83       	std	Z+1, r25	; 0x01
     526:	80 83       	st	Z, r24
     528:	fe 01       	movw	r30, r28
     52a:	e7 5b       	subi	r30, 0xB7	; 183
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <lcd_set_4bit+0x408>
     536:	fe 01       	movw	r30, r28
     538:	e7 5b       	subi	r30, 0xB7	; 183
     53a:	ff 4f       	sbci	r31, 0xFF	; 255
     53c:	91 83       	std	Z+1, r25	; 0x01
     53e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     540:	de 01       	movw	r26, r28
     542:	a5 5b       	subi	r26, 0xB5	; 181
     544:	bf 4f       	sbci	r27, 0xFF	; 255
     546:	fe 01       	movw	r30, r28
     548:	e5 5b       	subi	r30, 0xB5	; 181
     54a:	ff 4f       	sbci	r31, 0xFF	; 255
     54c:	80 81       	ld	r24, Z
     54e:	91 81       	ldd	r25, Z+1	; 0x01
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	11 96       	adiw	r26, 0x01	; 1
     554:	9c 93       	st	X, r25
     556:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     558:	fe 01       	movw	r30, r28
     55a:	e5 5b       	subi	r30, 0xB5	; 181
     55c:	ff 4f       	sbci	r31, 0xFF	; 255
     55e:	80 81       	ld	r24, Z
     560:	91 81       	ldd	r25, Z+1	; 0x01
     562:	00 97       	sbiw	r24, 0x00	; 0
     564:	d1 f6       	brne	.-76     	; 0x51a <lcd_set_4bit+0x3f0>
     566:	27 c0       	rjmp	.+78     	; 0x5b6 <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     568:	8e 01       	movw	r16, r28
     56a:	05 5b       	subi	r16, 0xB5	; 181
     56c:	1f 4f       	sbci	r17, 0xFF	; 255
     56e:	fe 01       	movw	r30, r28
     570:	e3 5b       	subi	r30, 0xB3	; 179
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	60 81       	ld	r22, Z
     576:	71 81       	ldd	r23, Z+1	; 0x01
     578:	82 81       	ldd	r24, Z+2	; 0x02
     57a:	93 81       	ldd	r25, Z+3	; 0x03
     57c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     580:	dc 01       	movw	r26, r24
     582:	cb 01       	movw	r24, r22
     584:	f8 01       	movw	r30, r16
     586:	91 83       	std	Z+1, r25	; 0x01
     588:	80 83       	st	Z, r24
     58a:	de 01       	movw	r26, r28
     58c:	a9 5b       	subi	r26, 0xB9	; 185
     58e:	bf 4f       	sbci	r27, 0xFF	; 255
     590:	fe 01       	movw	r30, r28
     592:	e5 5b       	subi	r30, 0xB5	; 181
     594:	ff 4f       	sbci	r31, 0xFF	; 255
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	8d 93       	st	X+, r24
     59c:	9c 93       	st	X, r25
     59e:	fe 01       	movw	r30, r28
     5a0:	e9 5b       	subi	r30, 0xB9	; 185
     5a2:	ff 4f       	sbci	r31, 0xFF	; 255
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	f1 f7       	brne	.-4      	; 0x5a8 <lcd_set_4bit+0x47e>
     5ac:	fe 01       	movw	r30, r28
     5ae:	e9 5b       	subi	r30, 0xB9	; 185
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	91 83       	std	Z+1, r25	; 0x01
     5b4:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     5b6:	a8 e2       	ldi	r26, 0x28	; 40
     5b8:	b0 e0       	ldi	r27, 0x00	; 0
     5ba:	e8 e2       	ldi	r30, 0x28	; 40
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	8e 7f       	andi	r24, 0xFE	; 254
     5c2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     5c4:	a8 e2       	ldi	r26, 0x28	; 40
     5c6:	b0 e0       	ldi	r27, 0x00	; 0
     5c8:	e8 e2       	ldi	r30, 0x28	; 40
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8d 7f       	andi	r24, 0xFD	; 253
     5d0:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     5d2:	e8 e2       	ldi	r30, 0x28	; 40
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	80 e3       	ldi	r24, 0x30	; 48
     5d8:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     5da:	a8 e2       	ldi	r26, 0x28	; 40
     5dc:	b0 e0       	ldi	r27, 0x00	; 0
     5de:	e8 e2       	ldi	r30, 0x28	; 40
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	80 81       	ld	r24, Z
     5e4:	84 60       	ori	r24, 0x04	; 4
     5e6:	8c 93       	st	X, r24
     5e8:	fe 01       	movw	r30, r28
     5ea:	ed 5b       	subi	r30, 0xBD	; 189
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	a0 ea       	ldi	r26, 0xA0	; 160
     5f4:	b0 e4       	ldi	r27, 0x40	; 64
     5f6:	80 83       	st	Z, r24
     5f8:	91 83       	std	Z+1, r25	; 0x01
     5fa:	a2 83       	std	Z+2, r26	; 0x02
     5fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5fe:	8e 01       	movw	r16, r28
     600:	01 5c       	subi	r16, 0xC1	; 193
     602:	1f 4f       	sbci	r17, 0xFF	; 255
     604:	fe 01       	movw	r30, r28
     606:	ed 5b       	subi	r30, 0xBD	; 189
     608:	ff 4f       	sbci	r31, 0xFF	; 255
     60a:	60 81       	ld	r22, Z
     60c:	71 81       	ldd	r23, Z+1	; 0x01
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	93 81       	ldd	r25, Z+3	; 0x03
     612:	26 e6       	ldi	r18, 0x66	; 102
     614:	36 e6       	ldi	r19, 0x66	; 102
     616:	46 e6       	ldi	r20, 0x66	; 102
     618:	55 e4       	ldi	r21, 0x45	; 69
     61a:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     61e:	dc 01       	movw	r26, r24
     620:	cb 01       	movw	r24, r22
     622:	f8 01       	movw	r30, r16
     624:	80 83       	st	Z, r24
     626:	91 83       	std	Z+1, r25	; 0x01
     628:	a2 83       	std	Z+2, r26	; 0x02
     62a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     62c:	fe 01       	movw	r30, r28
     62e:	ff 96       	adiw	r30, 0x3f	; 63
     630:	60 81       	ld	r22, Z
     632:	71 81       	ldd	r23, Z+1	; 0x01
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	93 81       	ldd	r25, Z+3	; 0x03
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	40 e8       	ldi	r20, 0x80	; 128
     63e:	5f e3       	ldi	r21, 0x3F	; 63
     640:	0e 94 23 13 	call	0x2646	; 0x2646 <__ltsf2>
     644:	88 23       	and	r24, r24
     646:	2c f4       	brge	.+10     	; 0x652 <lcd_set_4bit+0x528>
		__ticks = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	9e af       	std	Y+62, r25	; 0x3e
     64e:	8d af       	std	Y+61, r24	; 0x3d
     650:	46 c0       	rjmp	.+140    	; 0x6de <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     652:	fe 01       	movw	r30, r28
     654:	ff 96       	adiw	r30, 0x3f	; 63
     656:	60 81       	ld	r22, Z
     658:	71 81       	ldd	r23, Z+1	; 0x01
     65a:	82 81       	ldd	r24, Z+2	; 0x02
     65c:	93 81       	ldd	r25, Z+3	; 0x03
     65e:	20 e0       	ldi	r18, 0x00	; 0
     660:	3f ef       	ldi	r19, 0xFF	; 255
     662:	4f e7       	ldi	r20, 0x7F	; 127
     664:	57 e4       	ldi	r21, 0x47	; 71
     666:	0e 94 c3 12 	call	0x2586	; 0x2586 <__gtsf2>
     66a:	18 16       	cp	r1, r24
     66c:	64 f5       	brge	.+88     	; 0x6c6 <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     66e:	fe 01       	movw	r30, r28
     670:	ed 5b       	subi	r30, 0xBD	; 189
     672:	ff 4f       	sbci	r31, 0xFF	; 255
     674:	60 81       	ld	r22, Z
     676:	71 81       	ldd	r23, Z+1	; 0x01
     678:	82 81       	ldd	r24, Z+2	; 0x02
     67a:	93 81       	ldd	r25, Z+3	; 0x03
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	40 e2       	ldi	r20, 0x20	; 32
     682:	51 e4       	ldi	r21, 0x41	; 65
     684:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	bc 01       	movw	r22, r24
     68e:	cd 01       	movw	r24, r26
     690:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     694:	dc 01       	movw	r26, r24
     696:	cb 01       	movw	r24, r22
     698:	9e af       	std	Y+62, r25	; 0x3e
     69a:	8d af       	std	Y+61, r24	; 0x3d
     69c:	0f c0       	rjmp	.+30     	; 0x6bc <lcd_set_4bit+0x592>
     69e:	80 e7       	ldi	r24, 0x70	; 112
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	9c af       	std	Y+60, r25	; 0x3c
     6a4:	8b af       	std	Y+59, r24	; 0x3b
     6a6:	8b ad       	ldd	r24, Y+59	; 0x3b
     6a8:	9c ad       	ldd	r25, Y+60	; 0x3c
     6aa:	01 97       	sbiw	r24, 0x01	; 1
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <lcd_set_4bit+0x580>
     6ae:	9c af       	std	Y+60, r25	; 0x3c
     6b0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6b2:	8d ad       	ldd	r24, Y+61	; 0x3d
     6b4:	9e ad       	ldd	r25, Y+62	; 0x3e
     6b6:	01 97       	sbiw	r24, 0x01	; 1
     6b8:	9e af       	std	Y+62, r25	; 0x3e
     6ba:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6bc:	8d ad       	ldd	r24, Y+61	; 0x3d
     6be:	9e ad       	ldd	r25, Y+62	; 0x3e
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	69 f7       	brne	.-38     	; 0x69e <lcd_set_4bit+0x574>
     6c4:	16 c0       	rjmp	.+44     	; 0x6f2 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6c6:	fe 01       	movw	r30, r28
     6c8:	ff 96       	adiw	r30, 0x3f	; 63
     6ca:	60 81       	ld	r22, Z
     6cc:	71 81       	ldd	r23, Z+1	; 0x01
     6ce:	82 81       	ldd	r24, Z+2	; 0x02
     6d0:	93 81       	ldd	r25, Z+3	; 0x03
     6d2:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     6d6:	dc 01       	movw	r26, r24
     6d8:	cb 01       	movw	r24, r22
     6da:	9e af       	std	Y+62, r25	; 0x3e
     6dc:	8d af       	std	Y+61, r24	; 0x3d
     6de:	8d ad       	ldd	r24, Y+61	; 0x3d
     6e0:	9e ad       	ldd	r25, Y+62	; 0x3e
     6e2:	9a af       	std	Y+58, r25	; 0x3a
     6e4:	89 af       	std	Y+57, r24	; 0x39
     6e6:	89 ad       	ldd	r24, Y+57	; 0x39
     6e8:	9a ad       	ldd	r25, Y+58	; 0x3a
     6ea:	01 97       	sbiw	r24, 0x01	; 1
     6ec:	f1 f7       	brne	.-4      	; 0x6ea <lcd_set_4bit+0x5c0>
     6ee:	9a af       	std	Y+58, r25	; 0x3a
     6f0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     6f2:	a8 e2       	ldi	r26, 0x28	; 40
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e8 e2       	ldi	r30, 0x28	; 40
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	80 81       	ld	r24, Z
     6fc:	8b 7f       	andi	r24, 0xFB	; 251
     6fe:	8c 93       	st	X, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e8       	ldi	r26, 0x80	; 128
     706:	bf e3       	ldi	r27, 0x3F	; 63
     708:	8d ab       	std	Y+53, r24	; 0x35
     70a:	9e ab       	std	Y+54, r25	; 0x36
     70c:	af ab       	std	Y+55, r26	; 0x37
     70e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     710:	6d a9       	ldd	r22, Y+53	; 0x35
     712:	7e a9       	ldd	r23, Y+54	; 0x36
     714:	8f a9       	ldd	r24, Y+55	; 0x37
     716:	98 ad       	ldd	r25, Y+56	; 0x38
     718:	26 e6       	ldi	r18, 0x66	; 102
     71a:	36 e6       	ldi	r19, 0x66	; 102
     71c:	46 e6       	ldi	r20, 0x66	; 102
     71e:	55 e4       	ldi	r21, 0x45	; 69
     720:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     724:	dc 01       	movw	r26, r24
     726:	cb 01       	movw	r24, r22
     728:	89 ab       	std	Y+49, r24	; 0x31
     72a:	9a ab       	std	Y+50, r25	; 0x32
     72c:	ab ab       	std	Y+51, r26	; 0x33
     72e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     730:	69 a9       	ldd	r22, Y+49	; 0x31
     732:	7a a9       	ldd	r23, Y+50	; 0x32
     734:	8b a9       	ldd	r24, Y+51	; 0x33
     736:	9c a9       	ldd	r25, Y+52	; 0x34
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e8       	ldi	r20, 0x80	; 128
     73e:	5f e3       	ldi	r21, 0x3F	; 63
     740:	0e 94 23 13 	call	0x2646	; 0x2646 <__ltsf2>
     744:	88 23       	and	r24, r24
     746:	2c f4       	brge	.+10     	; 0x752 <lcd_set_4bit+0x628>
		__ticks = 1;
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	98 ab       	std	Y+48, r25	; 0x30
     74e:	8f a7       	std	Y+47, r24	; 0x2f
     750:	3f c0       	rjmp	.+126    	; 0x7d0 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     752:	69 a9       	ldd	r22, Y+49	; 0x31
     754:	7a a9       	ldd	r23, Y+50	; 0x32
     756:	8b a9       	ldd	r24, Y+51	; 0x33
     758:	9c a9       	ldd	r25, Y+52	; 0x34
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	3f ef       	ldi	r19, 0xFF	; 255
     75e:	4f e7       	ldi	r20, 0x7F	; 127
     760:	57 e4       	ldi	r21, 0x47	; 71
     762:	0e 94 c3 12 	call	0x2586	; 0x2586 <__gtsf2>
     766:	18 16       	cp	r1, r24
     768:	4c f5       	brge	.+82     	; 0x7bc <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     76a:	6d a9       	ldd	r22, Y+53	; 0x35
     76c:	7e a9       	ldd	r23, Y+54	; 0x36
     76e:	8f a9       	ldd	r24, Y+55	; 0x37
     770:	98 ad       	ldd	r25, Y+56	; 0x38
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e2       	ldi	r20, 0x20	; 32
     778:	51 e4       	ldi	r21, 0x41	; 65
     77a:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     77e:	dc 01       	movw	r26, r24
     780:	cb 01       	movw	r24, r22
     782:	bc 01       	movw	r22, r24
     784:	cd 01       	movw	r24, r26
     786:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	98 ab       	std	Y+48, r25	; 0x30
     790:	8f a7       	std	Y+47, r24	; 0x2f
     792:	0f c0       	rjmp	.+30     	; 0x7b2 <lcd_set_4bit+0x688>
     794:	80 e7       	ldi	r24, 0x70	; 112
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	9e a7       	std	Y+46, r25	; 0x2e
     79a:	8d a7       	std	Y+45, r24	; 0x2d
     79c:	8d a5       	ldd	r24, Y+45	; 0x2d
     79e:	9e a5       	ldd	r25, Y+46	; 0x2e
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	f1 f7       	brne	.-4      	; 0x7a0 <lcd_set_4bit+0x676>
     7a4:	9e a7       	std	Y+46, r25	; 0x2e
     7a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7a8:	8f a5       	ldd	r24, Y+47	; 0x2f
     7aa:	98 a9       	ldd	r25, Y+48	; 0x30
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	98 ab       	std	Y+48, r25	; 0x30
     7b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7b2:	8f a5       	ldd	r24, Y+47	; 0x2f
     7b4:	98 a9       	ldd	r25, Y+48	; 0x30
     7b6:	00 97       	sbiw	r24, 0x00	; 0
     7b8:	69 f7       	brne	.-38     	; 0x794 <lcd_set_4bit+0x66a>
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7bc:	69 a9       	ldd	r22, Y+49	; 0x31
     7be:	7a a9       	ldd	r23, Y+50	; 0x32
     7c0:	8b a9       	ldd	r24, Y+51	; 0x33
     7c2:	9c a9       	ldd	r25, Y+52	; 0x34
     7c4:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	98 ab       	std	Y+48, r25	; 0x30
     7ce:	8f a7       	std	Y+47, r24	; 0x2f
     7d0:	8f a5       	ldd	r24, Y+47	; 0x2f
     7d2:	98 a9       	ldd	r25, Y+48	; 0x30
     7d4:	9c a7       	std	Y+44, r25	; 0x2c
     7d6:	8b a7       	std	Y+43, r24	; 0x2b
     7d8:	8b a5       	ldd	r24, Y+43	; 0x2b
     7da:	9c a5       	ldd	r25, Y+44	; 0x2c
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	f1 f7       	brne	.-4      	; 0x7dc <lcd_set_4bit+0x6b2>
     7e0:	9c a7       	std	Y+44, r25	; 0x2c
     7e2:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     7e4:	a8 e2       	ldi	r26, 0x28	; 40
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e8 e2       	ldi	r30, 0x28	; 40
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	8e 7f       	andi	r24, 0xFE	; 254
     7f0:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     7f2:	a8 e2       	ldi	r26, 0x28	; 40
     7f4:	b0 e0       	ldi	r27, 0x00	; 0
     7f6:	e8 e2       	ldi	r30, 0x28	; 40
     7f8:	f0 e0       	ldi	r31, 0x00	; 0
     7fa:	80 81       	ld	r24, Z
     7fc:	8d 7f       	andi	r24, 0xFD	; 253
     7fe:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     800:	e8 e2       	ldi	r30, 0x28	; 40
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	80 e3       	ldi	r24, 0x30	; 48
     806:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     808:	a8 e2       	ldi	r26, 0x28	; 40
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	e8 e2       	ldi	r30, 0x28	; 40
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	80 81       	ld	r24, Z
     812:	84 60       	ori	r24, 0x04	; 4
     814:	8c 93       	st	X, r24
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 ea       	ldi	r26, 0xA0	; 160
     81c:	b0 e4       	ldi	r27, 0x40	; 64
     81e:	8f a3       	std	Y+39, r24	; 0x27
     820:	98 a7       	std	Y+40, r25	; 0x28
     822:	a9 a7       	std	Y+41, r26	; 0x29
     824:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     826:	6f a1       	ldd	r22, Y+39	; 0x27
     828:	78 a5       	ldd	r23, Y+40	; 0x28
     82a:	89 a5       	ldd	r24, Y+41	; 0x29
     82c:	9a a5       	ldd	r25, Y+42	; 0x2a
     82e:	26 e6       	ldi	r18, 0x66	; 102
     830:	36 e6       	ldi	r19, 0x66	; 102
     832:	46 e6       	ldi	r20, 0x66	; 102
     834:	55 e4       	ldi	r21, 0x45	; 69
     836:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     83a:	dc 01       	movw	r26, r24
     83c:	cb 01       	movw	r24, r22
     83e:	8b a3       	std	Y+35, r24	; 0x23
     840:	9c a3       	std	Y+36, r25	; 0x24
     842:	ad a3       	std	Y+37, r26	; 0x25
     844:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     846:	6b a1       	ldd	r22, Y+35	; 0x23
     848:	7c a1       	ldd	r23, Y+36	; 0x24
     84a:	8d a1       	ldd	r24, Y+37	; 0x25
     84c:	9e a1       	ldd	r25, Y+38	; 0x26
     84e:	20 e0       	ldi	r18, 0x00	; 0
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e8       	ldi	r20, 0x80	; 128
     854:	5f e3       	ldi	r21, 0x3F	; 63
     856:	0e 94 23 13 	call	0x2646	; 0x2646 <__ltsf2>
     85a:	88 23       	and	r24, r24
     85c:	2c f4       	brge	.+10     	; 0x868 <lcd_set_4bit+0x73e>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	9a a3       	std	Y+34, r25	; 0x22
     864:	89 a3       	std	Y+33, r24	; 0x21
     866:	3f c0       	rjmp	.+126    	; 0x8e6 <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     868:	6b a1       	ldd	r22, Y+35	; 0x23
     86a:	7c a1       	ldd	r23, Y+36	; 0x24
     86c:	8d a1       	ldd	r24, Y+37	; 0x25
     86e:	9e a1       	ldd	r25, Y+38	; 0x26
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	3f ef       	ldi	r19, 0xFF	; 255
     874:	4f e7       	ldi	r20, 0x7F	; 127
     876:	57 e4       	ldi	r21, 0x47	; 71
     878:	0e 94 c3 12 	call	0x2586	; 0x2586 <__gtsf2>
     87c:	18 16       	cp	r1, r24
     87e:	4c f5       	brge	.+82     	; 0x8d2 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     880:	6f a1       	ldd	r22, Y+39	; 0x27
     882:	78 a5       	ldd	r23, Y+40	; 0x28
     884:	89 a5       	ldd	r24, Y+41	; 0x29
     886:	9a a5       	ldd	r25, Y+42	; 0x2a
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	40 e2       	ldi	r20, 0x20	; 32
     88e:	51 e4       	ldi	r21, 0x41	; 65
     890:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     894:	dc 01       	movw	r26, r24
     896:	cb 01       	movw	r24, r22
     898:	bc 01       	movw	r22, r24
     89a:	cd 01       	movw	r24, r26
     89c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	9a a3       	std	Y+34, r25	; 0x22
     8a6:	89 a3       	std	Y+33, r24	; 0x21
     8a8:	0f c0       	rjmp	.+30     	; 0x8c8 <lcd_set_4bit+0x79e>
     8aa:	80 e7       	ldi	r24, 0x70	; 112
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	98 a3       	std	Y+32, r25	; 0x20
     8b0:	8f 8f       	std	Y+31, r24	; 0x1f
     8b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8b4:	98 a1       	ldd	r25, Y+32	; 0x20
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	f1 f7       	brne	.-4      	; 0x8b6 <lcd_set_4bit+0x78c>
     8ba:	98 a3       	std	Y+32, r25	; 0x20
     8bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8be:	89 a1       	ldd	r24, Y+33	; 0x21
     8c0:	9a a1       	ldd	r25, Y+34	; 0x22
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	9a a3       	std	Y+34, r25	; 0x22
     8c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8c8:	89 a1       	ldd	r24, Y+33	; 0x21
     8ca:	9a a1       	ldd	r25, Y+34	; 0x22
     8cc:	00 97       	sbiw	r24, 0x00	; 0
     8ce:	69 f7       	brne	.-38     	; 0x8aa <lcd_set_4bit+0x780>
     8d0:	14 c0       	rjmp	.+40     	; 0x8fa <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8d2:	6b a1       	ldd	r22, Y+35	; 0x23
     8d4:	7c a1       	ldd	r23, Y+36	; 0x24
     8d6:	8d a1       	ldd	r24, Y+37	; 0x25
     8d8:	9e a1       	ldd	r25, Y+38	; 0x26
     8da:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     8de:	dc 01       	movw	r26, r24
     8e0:	cb 01       	movw	r24, r22
     8e2:	9a a3       	std	Y+34, r25	; 0x22
     8e4:	89 a3       	std	Y+33, r24	; 0x21
     8e6:	89 a1       	ldd	r24, Y+33	; 0x21
     8e8:	9a a1       	ldd	r25, Y+34	; 0x22
     8ea:	9e 8f       	std	Y+30, r25	; 0x1e
     8ec:	8d 8f       	std	Y+29, r24	; 0x1d
     8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     8f2:	01 97       	sbiw	r24, 0x01	; 1
     8f4:	f1 f7       	brne	.-4      	; 0x8f2 <lcd_set_4bit+0x7c8>
     8f6:	9e 8f       	std	Y+30, r25	; 0x1e
     8f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     8fa:	a8 e2       	ldi	r26, 0x28	; 40
     8fc:	b0 e0       	ldi	r27, 0x00	; 0
     8fe:	e8 e2       	ldi	r30, 0x28	; 40
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	80 81       	ld	r24, Z
     904:	8b 7f       	andi	r24, 0xFB	; 251
     906:	8c 93       	st	X, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf e3       	ldi	r27, 0x3F	; 63
     910:	89 8f       	std	Y+25, r24	; 0x19
     912:	9a 8f       	std	Y+26, r25	; 0x1a
     914:	ab 8f       	std	Y+27, r26	; 0x1b
     916:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     918:	69 8d       	ldd	r22, Y+25	; 0x19
     91a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     91c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     91e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     920:	26 e6       	ldi	r18, 0x66	; 102
     922:	36 e6       	ldi	r19, 0x66	; 102
     924:	46 e6       	ldi	r20, 0x66	; 102
     926:	55 e4       	ldi	r21, 0x45	; 69
     928:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     92c:	dc 01       	movw	r26, r24
     92e:	cb 01       	movw	r24, r22
     930:	8d 8b       	std	Y+21, r24	; 0x15
     932:	9e 8b       	std	Y+22, r25	; 0x16
     934:	af 8b       	std	Y+23, r26	; 0x17
     936:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     938:	6d 89       	ldd	r22, Y+21	; 0x15
     93a:	7e 89       	ldd	r23, Y+22	; 0x16
     93c:	8f 89       	ldd	r24, Y+23	; 0x17
     93e:	98 8d       	ldd	r25, Y+24	; 0x18
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	0e 94 23 13 	call	0x2646	; 0x2646 <__ltsf2>
     94c:	88 23       	and	r24, r24
     94e:	2c f4       	brge	.+10     	; 0x95a <lcd_set_4bit+0x830>
		__ticks = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	9c 8b       	std	Y+20, r25	; 0x14
     956:	8b 8b       	std	Y+19, r24	; 0x13
     958:	3f c0       	rjmp	.+126    	; 0x9d8 <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     95a:	6d 89       	ldd	r22, Y+21	; 0x15
     95c:	7e 89       	ldd	r23, Y+22	; 0x16
     95e:	8f 89       	ldd	r24, Y+23	; 0x17
     960:	98 8d       	ldd	r25, Y+24	; 0x18
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	3f ef       	ldi	r19, 0xFF	; 255
     966:	4f e7       	ldi	r20, 0x7F	; 127
     968:	57 e4       	ldi	r21, 0x47	; 71
     96a:	0e 94 c3 12 	call	0x2586	; 0x2586 <__gtsf2>
     96e:	18 16       	cp	r1, r24
     970:	4c f5       	brge	.+82     	; 0x9c4 <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     972:	69 8d       	ldd	r22, Y+25	; 0x19
     974:	7a 8d       	ldd	r23, Y+26	; 0x1a
     976:	8b 8d       	ldd	r24, Y+27	; 0x1b
     978:	9c 8d       	ldd	r25, Y+28	; 0x1c
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e2       	ldi	r20, 0x20	; 32
     980:	51 e4       	ldi	r21, 0x41	; 65
     982:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     986:	dc 01       	movw	r26, r24
     988:	cb 01       	movw	r24, r22
     98a:	bc 01       	movw	r22, r24
     98c:	cd 01       	movw	r24, r26
     98e:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	9c 8b       	std	Y+20, r25	; 0x14
     998:	8b 8b       	std	Y+19, r24	; 0x13
     99a:	0f c0       	rjmp	.+30     	; 0x9ba <lcd_set_4bit+0x890>
     99c:	80 e7       	ldi	r24, 0x70	; 112
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9a 8b       	std	Y+18, r25	; 0x12
     9a2:	89 8b       	std	Y+17, r24	; 0x11
     9a4:	89 89       	ldd	r24, Y+17	; 0x11
     9a6:	9a 89       	ldd	r25, Y+18	; 0x12
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <lcd_set_4bit+0x87e>
     9ac:	9a 8b       	std	Y+18, r25	; 0x12
     9ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9b0:	8b 89       	ldd	r24, Y+19	; 0x13
     9b2:	9c 89       	ldd	r25, Y+20	; 0x14
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	9c 8b       	std	Y+20, r25	; 0x14
     9b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9ba:	8b 89       	ldd	r24, Y+19	; 0x13
     9bc:	9c 89       	ldd	r25, Y+20	; 0x14
     9be:	00 97       	sbiw	r24, 0x00	; 0
     9c0:	69 f7       	brne	.-38     	; 0x99c <lcd_set_4bit+0x872>
     9c2:	14 c0       	rjmp	.+40     	; 0x9ec <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9c4:	6d 89       	ldd	r22, Y+21	; 0x15
     9c6:	7e 89       	ldd	r23, Y+22	; 0x16
     9c8:	8f 89       	ldd	r24, Y+23	; 0x17
     9ca:	98 8d       	ldd	r25, Y+24	; 0x18
     9cc:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     9d0:	dc 01       	movw	r26, r24
     9d2:	cb 01       	movw	r24, r22
     9d4:	9c 8b       	std	Y+20, r25	; 0x14
     9d6:	8b 8b       	std	Y+19, r24	; 0x13
     9d8:	8b 89       	ldd	r24, Y+19	; 0x13
     9da:	9c 89       	ldd	r25, Y+20	; 0x14
     9dc:	98 8b       	std	Y+16, r25	; 0x10
     9de:	8f 87       	std	Y+15, r24	; 0x0f
     9e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     9e2:	98 89       	ldd	r25, Y+16	; 0x10
     9e4:	01 97       	sbiw	r24, 0x01	; 1
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <lcd_set_4bit+0x8ba>
     9e8:	98 8b       	std	Y+16, r25	; 0x10
     9ea:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     9ec:	a8 e2       	ldi	r26, 0x28	; 40
     9ee:	b0 e0       	ldi	r27, 0x00	; 0
     9f0:	e8 e2       	ldi	r30, 0x28	; 40
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	80 81       	ld	r24, Z
     9f6:	8e 7f       	andi	r24, 0xFE	; 254
     9f8:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     9fa:	a8 e2       	ldi	r26, 0x28	; 40
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e8 e2       	ldi	r30, 0x28	; 40
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	8d 7f       	andi	r24, 0xFD	; 253
     a06:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     a08:	e8 e2       	ldi	r30, 0x28	; 40
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 e2       	ldi	r24, 0x20	; 32
     a0e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     a10:	a8 e2       	ldi	r26, 0x28	; 40
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e8 e2       	ldi	r30, 0x28	; 40
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	84 60       	ori	r24, 0x04	; 4
     a1c:	8c 93       	st	X, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a0 ea       	ldi	r26, 0xA0	; 160
     a24:	b0 e4       	ldi	r27, 0x40	; 64
     a26:	8b 87       	std	Y+11, r24	; 0x0b
     a28:	9c 87       	std	Y+12, r25	; 0x0c
     a2a:	ad 87       	std	Y+13, r26	; 0x0d
     a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
     a30:	7c 85       	ldd	r23, Y+12	; 0x0c
     a32:	8d 85       	ldd	r24, Y+13	; 0x0d
     a34:	9e 85       	ldd	r25, Y+14	; 0x0e
     a36:	26 e6       	ldi	r18, 0x66	; 102
     a38:	36 e6       	ldi	r19, 0x66	; 102
     a3a:	46 e6       	ldi	r20, 0x66	; 102
     a3c:	55 e4       	ldi	r21, 0x45	; 69
     a3e:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	8f 83       	std	Y+7, r24	; 0x07
     a48:	98 87       	std	Y+8, r25	; 0x08
     a4a:	a9 87       	std	Y+9, r26	; 0x09
     a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     a4e:	6f 81       	ldd	r22, Y+7	; 0x07
     a50:	78 85       	ldd	r23, Y+8	; 0x08
     a52:	89 85       	ldd	r24, Y+9	; 0x09
     a54:	9a 85       	ldd	r25, Y+10	; 0x0a
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	5f e3       	ldi	r21, 0x3F	; 63
     a5e:	0e 94 23 13 	call	0x2646	; 0x2646 <__ltsf2>
     a62:	88 23       	and	r24, r24
     a64:	2c f4       	brge	.+10     	; 0xa70 <lcd_set_4bit+0x946>
		__ticks = 1;
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	9e 83       	std	Y+6, r25	; 0x06
     a6c:	8d 83       	std	Y+5, r24	; 0x05
     a6e:	3f c0       	rjmp	.+126    	; 0xaee <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     a70:	6f 81       	ldd	r22, Y+7	; 0x07
     a72:	78 85       	ldd	r23, Y+8	; 0x08
     a74:	89 85       	ldd	r24, Y+9	; 0x09
     a76:	9a 85       	ldd	r25, Y+10	; 0x0a
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	3f ef       	ldi	r19, 0xFF	; 255
     a7c:	4f e7       	ldi	r20, 0x7F	; 127
     a7e:	57 e4       	ldi	r21, 0x47	; 71
     a80:	0e 94 c3 12 	call	0x2586	; 0x2586 <__gtsf2>
     a84:	18 16       	cp	r1, r24
     a86:	4c f5       	brge	.+82     	; 0xada <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a88:	6b 85       	ldd	r22, Y+11	; 0x0b
     a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     a90:	20 e0       	ldi	r18, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	40 e2       	ldi	r20, 0x20	; 32
     a96:	51 e4       	ldi	r21, 0x41	; 65
     a98:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     a9c:	dc 01       	movw	r26, r24
     a9e:	cb 01       	movw	r24, r22
     aa0:	bc 01       	movw	r22, r24
     aa2:	cd 01       	movw	r24, r26
     aa4:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     aa8:	dc 01       	movw	r26, r24
     aaa:	cb 01       	movw	r24, r22
     aac:	9e 83       	std	Y+6, r25	; 0x06
     aae:	8d 83       	std	Y+5, r24	; 0x05
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <lcd_set_4bit+0x9a6>
     ab2:	80 e7       	ldi	r24, 0x70	; 112
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <lcd_set_4bit+0x994>
     ac2:	9c 83       	std	Y+4, r25	; 0x04
     ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ac6:	8d 81       	ldd	r24, Y+5	; 0x05
     ac8:	9e 81       	ldd	r25, Y+6	; 0x06
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9e 83       	std	Y+6, r25	; 0x06
     ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ad0:	8d 81       	ldd	r24, Y+5	; 0x05
     ad2:	9e 81       	ldd	r25, Y+6	; 0x06
     ad4:	00 97       	sbiw	r24, 0x00	; 0
     ad6:	69 f7       	brne	.-38     	; 0xab2 <lcd_set_4bit+0x988>
     ad8:	14 c0       	rjmp	.+40     	; 0xb02 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ada:	6f 81       	ldd	r22, Y+7	; 0x07
     adc:	78 85       	ldd	r23, Y+8	; 0x08
     ade:	89 85       	ldd	r24, Y+9	; 0x09
     ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ae2:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     ae6:	dc 01       	movw	r26, r24
     ae8:	cb 01       	movw	r24, r22
     aea:	9e 83       	std	Y+6, r25	; 0x06
     aec:	8d 83       	std	Y+5, r24	; 0x05
     aee:	8d 81       	ldd	r24, Y+5	; 0x05
     af0:	9e 81       	ldd	r25, Y+6	; 0x06
     af2:	9a 83       	std	Y+2, r25	; 0x02
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	9a 81       	ldd	r25, Y+2	; 0x02
     afa:	01 97       	sbiw	r24, 0x01	; 1
     afc:	f1 f7       	brne	.-4      	; 0xafa <lcd_set_4bit+0x9d0>
     afe:	9a 83       	std	Y+2, r25	; 0x02
     b00:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     b02:	a8 e2       	ldi	r26, 0x28	; 40
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 e2       	ldi	r30, 0x28	; 40
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	80 81       	ld	r24, Z
     b0c:	8b 7f       	andi	r24, 0xFB	; 251
     b0e:	8c 93       	st	X, r24

	
}
     b10:	c0 59       	subi	r28, 0x90	; 144
     b12:	df 4f       	sbci	r29, 0xFF	; 255
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	de bf       	out	0x3e, r29	; 62
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	cd bf       	out	0x3d, r28	; 61
     b1e:	cf 91       	pop	r28
     b20:	df 91       	pop	r29
     b22:	1f 91       	pop	r17
     b24:	0f 91       	pop	r16
     b26:	08 95       	ret

00000b28 <lcd_init>:

/*****Function to Initialize LCD*****/
void lcd_init()
{
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	2e 97       	sbiw	r28, 0x0e	; 14
     b32:	0f b6       	in	r0, 0x3f	; 63
     b34:	f8 94       	cli
     b36:	de bf       	out	0x3e, r29	; 62
     b38:	0f be       	out	0x3f, r0	; 63
     b3a:	cd bf       	out	0x3d, r28	; 61
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e8       	ldi	r26, 0x80	; 128
     b42:	bf e3       	ldi	r27, 0x3F	; 63
     b44:	8b 87       	std	Y+11, r24	; 0x0b
     b46:	9c 87       	std	Y+12, r25	; 0x0c
     b48:	ad 87       	std	Y+13, r26	; 0x0d
     b4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     b4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     b50:	8d 85       	ldd	r24, Y+13	; 0x0d
     b52:	9e 85       	ldd	r25, Y+14	; 0x0e
     b54:	26 e6       	ldi	r18, 0x66	; 102
     b56:	36 e6       	ldi	r19, 0x66	; 102
     b58:	46 e6       	ldi	r20, 0x66	; 102
     b5a:	55 e4       	ldi	r21, 0x45	; 69
     b5c:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     b60:	dc 01       	movw	r26, r24
     b62:	cb 01       	movw	r24, r22
     b64:	8f 83       	std	Y+7, r24	; 0x07
     b66:	98 87       	std	Y+8, r25	; 0x08
     b68:	a9 87       	std	Y+9, r26	; 0x09
     b6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     b6c:	6f 81       	ldd	r22, Y+7	; 0x07
     b6e:	78 85       	ldd	r23, Y+8	; 0x08
     b70:	89 85       	ldd	r24, Y+9	; 0x09
     b72:	9a 85       	ldd	r25, Y+10	; 0x0a
     b74:	20 e0       	ldi	r18, 0x00	; 0
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	40 e8       	ldi	r20, 0x80	; 128
     b7a:	5f e3       	ldi	r21, 0x3F	; 63
     b7c:	0e 94 23 13 	call	0x2646	; 0x2646 <__ltsf2>
     b80:	88 23       	and	r24, r24
     b82:	2c f4       	brge	.+10     	; 0xb8e <lcd_init+0x66>
		__ticks = 1;
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	9e 83       	std	Y+6, r25	; 0x06
     b8a:	8d 83       	std	Y+5, r24	; 0x05
     b8c:	3f c0       	rjmp	.+126    	; 0xc0c <lcd_init+0xe4>
	else if (__tmp > 65535)
     b8e:	6f 81       	ldd	r22, Y+7	; 0x07
     b90:	78 85       	ldd	r23, Y+8	; 0x08
     b92:	89 85       	ldd	r24, Y+9	; 0x09
     b94:	9a 85       	ldd	r25, Y+10	; 0x0a
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	3f ef       	ldi	r19, 0xFF	; 255
     b9a:	4f e7       	ldi	r20, 0x7F	; 127
     b9c:	57 e4       	ldi	r21, 0x47	; 71
     b9e:	0e 94 c3 12 	call	0x2586	; 0x2586 <__gtsf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	4c f5       	brge	.+82     	; 0xbf8 <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
     baa:	8d 85       	ldd	r24, Y+13	; 0x0d
     bac:	9e 85       	ldd	r25, Y+14	; 0x0e
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     bba:	dc 01       	movw	r26, r24
     bbc:	cb 01       	movw	r24, r22
     bbe:	bc 01       	movw	r22, r24
     bc0:	cd 01       	movw	r24, r26
     bc2:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     bc6:	dc 01       	movw	r26, r24
     bc8:	cb 01       	movw	r24, r22
     bca:	9e 83       	std	Y+6, r25	; 0x06
     bcc:	8d 83       	std	Y+5, r24	; 0x05
     bce:	0f c0       	rjmp	.+30     	; 0xbee <lcd_init+0xc6>
     bd0:	80 e7       	ldi	r24, 0x70	; 112
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	9c 83       	std	Y+4, r25	; 0x04
     bd6:	8b 83       	std	Y+3, r24	; 0x03
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	9c 81       	ldd	r25, Y+4	; 0x04
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <lcd_init+0xb4>
     be0:	9c 83       	std	Y+4, r25	; 0x04
     be2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     be4:	8d 81       	ldd	r24, Y+5	; 0x05
     be6:	9e 81       	ldd	r25, Y+6	; 0x06
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	9e 83       	std	Y+6, r25	; 0x06
     bec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bee:	8d 81       	ldd	r24, Y+5	; 0x05
     bf0:	9e 81       	ldd	r25, Y+6	; 0x06
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f7       	brne	.-38     	; 0xbd0 <lcd_init+0xa8>
     bf6:	14 c0       	rjmp	.+40     	; 0xc20 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     bf8:	6f 81       	ldd	r22, Y+7	; 0x07
     bfa:	78 85       	ldd	r23, Y+8	; 0x08
     bfc:	89 85       	ldd	r24, Y+9	; 0x09
     bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     c00:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	9e 83       	std	Y+6, r25	; 0x06
     c0a:	8d 83       	std	Y+5, r24	; 0x05
     c0c:	8d 81       	ldd	r24, Y+5	; 0x05
     c0e:	9e 81       	ldd	r25, Y+6	; 0x06
     c10:	9a 83       	std	Y+2, r25	; 0x02
     c12:	89 83       	std	Y+1, r24	; 0x01
     c14:	89 81       	ldd	r24, Y+1	; 0x01
     c16:	9a 81       	ldd	r25, Y+2	; 0x02
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	f1 f7       	brne	.-4      	; 0xc18 <lcd_init+0xf0>
     c1c:	9a 83       	std	Y+2, r25	; 0x02
     c1e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x01);
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x06);
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x0E);
     c32:	8e e0       	ldi	r24, 0x0E	; 14
     c34:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
	lcd_wr_command(0x80);
     c38:	80 e8       	ldi	r24, 0x80	; 128
     c3a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		
}
     c3e:	2e 96       	adiw	r28, 0x0e	; 14
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <lcd_wr_command>:

	 
/*****Function to Write Command on LCD*****/
void lcd_wr_command(unsigned char cmd)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	6e 97       	sbiw	r28, 0x1e	; 30
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     c66:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c68:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
     c6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c6c:	80 7f       	andi	r24, 0xF0	; 240
     c6e:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     c70:	a8 e2       	ldi	r26, 0x28	; 40
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	e8 e2       	ldi	r30, 0x28	; 40
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 70       	andi	r24, 0x0F	; 15
     c7c:	8c 93       	st	X, r24
	lcd_port |= temp;
     c7e:	a8 e2       	ldi	r26, 0x28	; 40
     c80:	b0 e0       	ldi	r27, 0x00	; 0
     c82:	e8 e2       	ldi	r30, 0x28	; 40
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	90 81       	ld	r25, Z
     c88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c8a:	89 2b       	or	r24, r25
     c8c:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     c8e:	a8 e2       	ldi	r26, 0x28	; 40
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e8 e2       	ldi	r30, 0x28	; 40
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	8e 7f       	andi	r24, 0xFE	; 254
     c9a:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     c9c:	a8 e2       	ldi	r26, 0x28	; 40
     c9e:	b0 e0       	ldi	r27, 0x00	; 0
     ca0:	e8 e2       	ldi	r30, 0x28	; 40
     ca2:	f0 e0       	ldi	r31, 0x00	; 0
     ca4:	80 81       	ld	r24, Z
     ca6:	8d 7f       	andi	r24, 0xFD	; 253
     ca8:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     caa:	a8 e2       	ldi	r26, 0x28	; 40
     cac:	b0 e0       	ldi	r27, 0x00	; 0
     cae:	e8 e2       	ldi	r30, 0x28	; 40
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 81       	ld	r24, Z
     cb4:	84 60       	ori	r24, 0x04	; 4
     cb6:	8c 93       	st	X, r24
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 ea       	ldi	r26, 0xA0	; 160
     cbe:	b0 e4       	ldi	r27, 0x40	; 64
     cc0:	89 8f       	std	Y+25, r24	; 0x19
     cc2:	9a 8f       	std	Y+26, r25	; 0x1a
     cc4:	ab 8f       	std	Y+27, r26	; 0x1b
     cc6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cc8:	69 8d       	ldd	r22, Y+25	; 0x19
     cca:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ccc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cce:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cd0:	26 e6       	ldi	r18, 0x66	; 102
     cd2:	36 e6       	ldi	r19, 0x66	; 102
     cd4:	46 e6       	ldi	r20, 0x66	; 102
     cd6:	55 e4       	ldi	r21, 0x45	; 69
     cd8:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     cdc:	dc 01       	movw	r26, r24
     cde:	cb 01       	movw	r24, r22
     ce0:	8d 8b       	std	Y+21, r24	; 0x15
     ce2:	9e 8b       	std	Y+22, r25	; 0x16
     ce4:	af 8b       	std	Y+23, r26	; 0x17
     ce6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ce8:	6d 89       	ldd	r22, Y+21	; 0x15
     cea:	7e 89       	ldd	r23, Y+22	; 0x16
     cec:	8f 89       	ldd	r24, Y+23	; 0x17
     cee:	98 8d       	ldd	r25, Y+24	; 0x18
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	40 e8       	ldi	r20, 0x80	; 128
     cf6:	5f e3       	ldi	r21, 0x3F	; 63
     cf8:	0e 94 23 13 	call	0x2646	; 0x2646 <__ltsf2>
     cfc:	88 23       	and	r24, r24
     cfe:	2c f4       	brge	.+10     	; 0xd0a <lcd_wr_command+0xba>
		__ticks = 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9c 8b       	std	Y+20, r25	; 0x14
     d06:	8b 8b       	std	Y+19, r24	; 0x13
     d08:	3f c0       	rjmp	.+126    	; 0xd88 <lcd_wr_command+0x138>
	else if (__tmp > 65535)
     d0a:	6d 89       	ldd	r22, Y+21	; 0x15
     d0c:	7e 89       	ldd	r23, Y+22	; 0x16
     d0e:	8f 89       	ldd	r24, Y+23	; 0x17
     d10:	98 8d       	ldd	r25, Y+24	; 0x18
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	3f ef       	ldi	r19, 0xFF	; 255
     d16:	4f e7       	ldi	r20, 0x7F	; 127
     d18:	57 e4       	ldi	r21, 0x47	; 71
     d1a:	0e 94 c3 12 	call	0x2586	; 0x2586 <__gtsf2>
     d1e:	18 16       	cp	r1, r24
     d20:	4c f5       	brge	.+82     	; 0xd74 <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d22:	69 8d       	ldd	r22, Y+25	; 0x19
     d24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d2a:	20 e0       	ldi	r18, 0x00	; 0
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	51 e4       	ldi	r21, 0x41	; 65
     d32:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	bc 01       	movw	r22, r24
     d3c:	cd 01       	movw	r24, r26
     d3e:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     d42:	dc 01       	movw	r26, r24
     d44:	cb 01       	movw	r24, r22
     d46:	9c 8b       	std	Y+20, r25	; 0x14
     d48:	8b 8b       	std	Y+19, r24	; 0x13
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <lcd_wr_command+0x11a>
     d4c:	80 e7       	ldi	r24, 0x70	; 112
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	9a 8b       	std	Y+18, r25	; 0x12
     d52:	89 8b       	std	Y+17, r24	; 0x11
     d54:	89 89       	ldd	r24, Y+17	; 0x11
     d56:	9a 89       	ldd	r25, Y+18	; 0x12
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <lcd_wr_command+0x108>
     d5c:	9a 8b       	std	Y+18, r25	; 0x12
     d5e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d60:	8b 89       	ldd	r24, Y+19	; 0x13
     d62:	9c 89       	ldd	r25, Y+20	; 0x14
     d64:	01 97       	sbiw	r24, 0x01	; 1
     d66:	9c 8b       	std	Y+20, r25	; 0x14
     d68:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d6a:	8b 89       	ldd	r24, Y+19	; 0x13
     d6c:	9c 89       	ldd	r25, Y+20	; 0x14
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	69 f7       	brne	.-38     	; 0xd4c <lcd_wr_command+0xfc>
     d72:	14 c0       	rjmp	.+40     	; 0xd9c <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d74:	6d 89       	ldd	r22, Y+21	; 0x15
     d76:	7e 89       	ldd	r23, Y+22	; 0x16
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     d80:	dc 01       	movw	r26, r24
     d82:	cb 01       	movw	r24, r22
     d84:	9c 8b       	std	Y+20, r25	; 0x14
     d86:	8b 8b       	std	Y+19, r24	; 0x13
     d88:	8b 89       	ldd	r24, Y+19	; 0x13
     d8a:	9c 89       	ldd	r25, Y+20	; 0x14
     d8c:	98 8b       	std	Y+16, r25	; 0x10
     d8e:	8f 87       	std	Y+15, r24	; 0x0f
     d90:	8f 85       	ldd	r24, Y+15	; 0x0f
     d92:	98 89       	ldd	r25, Y+16	; 0x10
     d94:	01 97       	sbiw	r24, 0x01	; 1
     d96:	f1 f7       	brne	.-4      	; 0xd94 <lcd_wr_command+0x144>
     d98:	98 8b       	std	Y+16, r25	; 0x10
     d9a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
     d9c:	a8 e2       	ldi	r26, 0x28	; 40
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	e8 e2       	ldi	r30, 0x28	; 40
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
     daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dac:	8f 70       	andi	r24, 0x0F	; 15
     dae:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
     db0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db2:	82 95       	swap	r24
     db4:	80 7f       	andi	r24, 0xF0	; 240
     db6:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
     db8:	a8 e2       	ldi	r26, 0x28	; 40
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e8 e2       	ldi	r30, 0x28	; 40
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	80 81       	ld	r24, Z
     dc2:	8f 70       	andi	r24, 0x0F	; 15
     dc4:	8c 93       	st	X, r24
	lcd_port |= cmd;
     dc6:	a8 e2       	ldi	r26, 0x28	; 40
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e8 e2       	ldi	r30, 0x28	; 40
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	90 81       	ld	r25, Z
     dd0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd2:	89 2b       	or	r24, r25
     dd4:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
     dd6:	a8 e2       	ldi	r26, 0x28	; 40
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e8 e2       	ldi	r30, 0x28	; 40
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	8e 7f       	andi	r24, 0xFE	; 254
     de2:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     de4:	a8 e2       	ldi	r26, 0x28	; 40
     de6:	b0 e0       	ldi	r27, 0x00	; 0
     de8:	e8 e2       	ldi	r30, 0x28	; 40
     dea:	f0 e0       	ldi	r31, 0x00	; 0
     dec:	80 81       	ld	r24, Z
     dee:	8d 7f       	andi	r24, 0xFD	; 253
     df0:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     df2:	a8 e2       	ldi	r26, 0x28	; 40
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e8 e2       	ldi	r30, 0x28	; 40
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	84 60       	ori	r24, 0x04	; 4
     dfe:	8c 93       	st	X, r24
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	a0 ea       	ldi	r26, 0xA0	; 160
     e06:	b0 e4       	ldi	r27, 0x40	; 64
     e08:	8b 87       	std	Y+11, r24	; 0x0b
     e0a:	9c 87       	std	Y+12, r25	; 0x0c
     e0c:	ad 87       	std	Y+13, r26	; 0x0d
     e0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e10:	6b 85       	ldd	r22, Y+11	; 0x0b
     e12:	7c 85       	ldd	r23, Y+12	; 0x0c
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	26 e6       	ldi	r18, 0x66	; 102
     e1a:	36 e6       	ldi	r19, 0x66	; 102
     e1c:	46 e6       	ldi	r20, 0x66	; 102
     e1e:	55 e4       	ldi	r21, 0x45	; 69
     e20:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8f 83       	std	Y+7, r24	; 0x07
     e2a:	98 87       	std	Y+8, r25	; 0x08
     e2c:	a9 87       	std	Y+9, r26	; 0x09
     e2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e30:	6f 81       	ldd	r22, Y+7	; 0x07
     e32:	78 85       	ldd	r23, Y+8	; 0x08
     e34:	89 85       	ldd	r24, Y+9	; 0x09
     e36:	9a 85       	ldd	r25, Y+10	; 0x0a
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e8       	ldi	r20, 0x80	; 128
     e3e:	5f e3       	ldi	r21, 0x3F	; 63
     e40:	0e 94 23 13 	call	0x2646	; 0x2646 <__ltsf2>
     e44:	88 23       	and	r24, r24
     e46:	2c f4       	brge	.+10     	; 0xe52 <lcd_wr_command+0x202>
		__ticks = 1;
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 83       	std	Y+6, r25	; 0x06
     e4e:	8d 83       	std	Y+5, r24	; 0x05
     e50:	3f c0       	rjmp	.+126    	; 0xed0 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
     e52:	6f 81       	ldd	r22, Y+7	; 0x07
     e54:	78 85       	ldd	r23, Y+8	; 0x08
     e56:	89 85       	ldd	r24, Y+9	; 0x09
     e58:	9a 85       	ldd	r25, Y+10	; 0x0a
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	3f ef       	ldi	r19, 0xFF	; 255
     e5e:	4f e7       	ldi	r20, 0x7F	; 127
     e60:	57 e4       	ldi	r21, 0x47	; 71
     e62:	0e 94 c3 12 	call	0x2586	; 0x2586 <__gtsf2>
     e66:	18 16       	cp	r1, r24
     e68:	4c f5       	brge	.+82     	; 0xebc <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e70:	9e 85       	ldd	r25, Y+14	; 0x0e
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	bc 01       	movw	r22, r24
     e84:	cd 01       	movw	r24, r26
     e86:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	9e 83       	std	Y+6, r25	; 0x06
     e90:	8d 83       	std	Y+5, r24	; 0x05
     e92:	0f c0       	rjmp	.+30     	; 0xeb2 <lcd_wr_command+0x262>
     e94:	80 e7       	ldi	r24, 0x70	; 112
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <lcd_wr_command+0x250>
     ea4:	9c 83       	std	Y+4, r25	; 0x04
     ea6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea8:	8d 81       	ldd	r24, Y+5	; 0x05
     eaa:	9e 81       	ldd	r25, Y+6	; 0x06
     eac:	01 97       	sbiw	r24, 0x01	; 1
     eae:	9e 83       	std	Y+6, r25	; 0x06
     eb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb2:	8d 81       	ldd	r24, Y+5	; 0x05
     eb4:	9e 81       	ldd	r25, Y+6	; 0x06
     eb6:	00 97       	sbiw	r24, 0x00	; 0
     eb8:	69 f7       	brne	.-38     	; 0xe94 <lcd_wr_command+0x244>
     eba:	14 c0       	rjmp	.+40     	; 0xee4 <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	8d 81       	ldd	r24, Y+5	; 0x05
     ed2:	9e 81       	ldd	r25, Y+6	; 0x06
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	9a 81       	ldd	r25, Y+2	; 0x02
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	f1 f7       	brne	.-4      	; 0xedc <lcd_wr_command+0x28c>
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
     ee4:	a8 e2       	ldi	r26, 0x28	; 40
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e2       	ldi	r30, 0x28	; 40
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	8b 7f       	andi	r24, 0xFB	; 251
     ef0:	8c 93       	st	X, r24
}
     ef2:	6e 96       	adiw	r28, 0x1e	; 30
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	cf 91       	pop	r28
     f00:	df 91       	pop	r29
     f02:	08 95       	ret

00000f04 <lcd_wr_char>:

/*****Function to Write Data on LCD*****/
void lcd_wr_char(char letter)
{
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	6e 97       	sbiw	r28, 0x1e	; 30
     f0e:	0f b6       	in	r0, 0x3f	; 63
     f10:	f8 94       	cli
     f12:	de bf       	out	0x3e, r29	; 62
     f14:	0f be       	out	0x3f, r0	; 63
     f16:	cd bf       	out	0x3d, r28	; 61
     f18:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
     f1a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f1c:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
     f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f20:	80 7f       	andi	r24, 0xF0	; 240
     f22:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
     f24:	a8 e2       	ldi	r26, 0x28	; 40
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e8 e2       	ldi	r30, 0x28	; 40
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	8f 70       	andi	r24, 0x0F	; 15
     f30:	8c 93       	st	X, r24
	lcd_port |= temp;
     f32:	a8 e2       	ldi	r26, 0x28	; 40
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e8 e2       	ldi	r30, 0x28	; 40
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	90 81       	ld	r25, Z
     f3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f3e:	89 2b       	or	r24, r25
     f40:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
     f42:	a8 e2       	ldi	r26, 0x28	; 40
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 e2       	ldi	r30, 0x28	; 40
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	81 60       	ori	r24, 0x01	; 1
     f4e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
     f50:	a8 e2       	ldi	r26, 0x28	; 40
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e8 e2       	ldi	r30, 0x28	; 40
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
     f5e:	a8 e2       	ldi	r26, 0x28	; 40
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e8 e2       	ldi	r30, 0x28	; 40
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	8c 93       	st	X, r24
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 ea       	ldi	r26, 0xA0	; 160
     f72:	b0 e4       	ldi	r27, 0x40	; 64
     f74:	89 8f       	std	Y+25, r24	; 0x19
     f76:	9a 8f       	std	Y+26, r25	; 0x1a
     f78:	ab 8f       	std	Y+27, r26	; 0x1b
     f7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	69 8d       	ldd	r22, Y+25	; 0x19
     f7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f84:	26 e6       	ldi	r18, 0x66	; 102
     f86:	36 e6       	ldi	r19, 0x66	; 102
     f88:	46 e6       	ldi	r20, 0x66	; 102
     f8a:	55 e4       	ldi	r21, 0x45	; 69
     f8c:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8d 8b       	std	Y+21, r24	; 0x15
     f96:	9e 8b       	std	Y+22, r25	; 0x16
     f98:	af 8b       	std	Y+23, r26	; 0x17
     f9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f9c:	6d 89       	ldd	r22, Y+21	; 0x15
     f9e:	7e 89       	ldd	r23, Y+22	; 0x16
     fa0:	8f 89       	ldd	r24, Y+23	; 0x17
     fa2:	98 8d       	ldd	r25, Y+24	; 0x18
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 23 13 	call	0x2646	; 0x2646 <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <lcd_wr_char+0xba>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 8b       	std	Y+20, r25	; 0x14
     fba:	8b 8b       	std	Y+19, r24	; 0x13
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <lcd_wr_char+0x138>
	else if (__tmp > 65535)
     fbe:	6d 89       	ldd	r22, Y+21	; 0x15
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 c3 12 	call	0x2586	; 0x2586 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	69 8d       	ldd	r22, Y+25	; 0x19
     fd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9c 8b       	std	Y+20, r25	; 0x14
     ffc:	8b 8b       	std	Y+19, r24	; 0x13
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <lcd_wr_char+0x11a>
    1000:	80 e7       	ldi	r24, 0x70	; 112
    1002:	91 e0       	ldi	r25, 0x01	; 1
    1004:	9a 8b       	std	Y+18, r25	; 0x12
    1006:	89 8b       	std	Y+17, r24	; 0x11
    1008:	89 89       	ldd	r24, Y+17	; 0x11
    100a:	9a 89       	ldd	r25, Y+18	; 0x12
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <lcd_wr_char+0x108>
    1010:	9a 8b       	std	Y+18, r25	; 0x12
    1012:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8b 89       	ldd	r24, Y+19	; 0x13
    1016:	9c 89       	ldd	r25, Y+20	; 0x14
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9c 8b       	std	Y+20, r25	; 0x14
    101c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8b 89       	ldd	r24, Y+19	; 0x13
    1020:	9c 89       	ldd	r25, Y+20	; 0x14
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <lcd_wr_char+0xfc>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	6d 89       	ldd	r22, Y+21	; 0x15
    102a:	7e 89       	ldd	r23, Y+22	; 0x16
    102c:	8f 89       	ldd	r24, Y+23	; 0x17
    102e:	98 8d       	ldd	r25, Y+24	; 0x18
    1030:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	8b 89       	ldd	r24, Y+19	; 0x13
    103e:	9c 89       	ldd	r25, Y+20	; 0x14
    1040:	98 8b       	std	Y+16, r25	; 0x10
    1042:	8f 87       	std	Y+15, r24	; 0x0f
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	98 89       	ldd	r25, Y+16	; 0x10
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <lcd_wr_char+0x144>
    104c:	98 8b       	std	Y+16, r25	; 0x10
    104e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1050:	a8 e2       	ldi	r26, 0x28	; 40
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	e8 e2       	ldi	r30, 0x28	; 40
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    105e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1060:	8f 70       	andi	r24, 0x0F	; 15
    1062:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    1064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1066:	82 95       	swap	r24
    1068:	80 7f       	andi	r24, 0xF0	; 240
    106a:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    106c:	a8 e2       	ldi	r26, 0x28	; 40
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e2       	ldi	r30, 0x28	; 40
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 70       	andi	r24, 0x0F	; 15
    1078:	8c 93       	st	X, r24
	lcd_port |= letter;
    107a:	a8 e2       	ldi	r26, 0x28	; 40
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e8 e2       	ldi	r30, 0x28	; 40
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	90 81       	ld	r25, Z
    1084:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1086:	89 2b       	or	r24, r25
    1088:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    108a:	a8 e2       	ldi	r26, 0x28	; 40
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e8 e2       	ldi	r30, 0x28	; 40
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	81 60       	ori	r24, 0x01	; 1
    1096:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1098:	a8 e2       	ldi	r26, 0x28	; 40
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e8 e2       	ldi	r30, 0x28	; 40
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	8d 7f       	andi	r24, 0xFD	; 253
    10a4:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    10a6:	a8 e2       	ldi	r26, 0x28	; 40
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e8 e2       	ldi	r30, 0x28	; 40
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	84 60       	ori	r24, 0x04	; 4
    10b2:	8c 93       	st	X, r24
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	a0 ea       	ldi	r26, 0xA0	; 160
    10ba:	b0 e4       	ldi	r27, 0x40	; 64
    10bc:	8b 87       	std	Y+11, r24	; 0x0b
    10be:	9c 87       	std	Y+12, r25	; 0x0c
    10c0:	ad 87       	std	Y+13, r26	; 0x0d
    10c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    10cc:	26 e6       	ldi	r18, 0x66	; 102
    10ce:	36 e6       	ldi	r19, 0x66	; 102
    10d0:	46 e6       	ldi	r20, 0x66	; 102
    10d2:	55 e4       	ldi	r21, 0x45	; 69
    10d4:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	8f 83       	std	Y+7, r24	; 0x07
    10de:	98 87       	std	Y+8, r25	; 0x08
    10e0:	a9 87       	std	Y+9, r26	; 0x09
    10e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e8       	ldi	r20, 0x80	; 128
    10f2:	5f e3       	ldi	r21, 0x3F	; 63
    10f4:	0e 94 23 13 	call	0x2646	; 0x2646 <__ltsf2>
    10f8:	88 23       	and	r24, r24
    10fa:	2c f4       	brge	.+10     	; 0x1106 <lcd_wr_char+0x202>
		__ticks = 1;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9e 83       	std	Y+6, r25	; 0x06
    1102:	8d 83       	std	Y+5, r24	; 0x05
    1104:	3f c0       	rjmp	.+126    	; 0x1184 <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	3f ef       	ldi	r19, 0xFF	; 255
    1112:	4f e7       	ldi	r20, 0x7F	; 127
    1114:	57 e4       	ldi	r21, 0x47	; 71
    1116:	0e 94 c3 12 	call	0x2586	; 0x2586 <__gtsf2>
    111a:	18 16       	cp	r1, r24
    111c:	4c f5       	brge	.+82     	; 0x1170 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1120:	7c 85       	ldd	r23, Y+12	; 0x0c
    1122:	8d 85       	ldd	r24, Y+13	; 0x0d
    1124:	9e 85       	ldd	r25, Y+14	; 0x0e
    1126:	20 e0       	ldi	r18, 0x00	; 0
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	40 e2       	ldi	r20, 0x20	; 32
    112c:	51 e4       	ldi	r21, 0x41	; 65
    112e:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	bc 01       	movw	r22, r24
    1138:	cd 01       	movw	r24, r26
    113a:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	9e 83       	std	Y+6, r25	; 0x06
    1144:	8d 83       	std	Y+5, r24	; 0x05
    1146:	0f c0       	rjmp	.+30     	; 0x1166 <lcd_wr_char+0x262>
    1148:	80 e7       	ldi	r24, 0x70	; 112
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	01 97       	sbiw	r24, 0x01	; 1
    1156:	f1 f7       	brne	.-4      	; 0x1154 <lcd_wr_char+0x250>
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9e 83       	std	Y+6, r25	; 0x06
    1164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	69 f7       	brne	.-38     	; 0x1148 <lcd_wr_char+0x244>
    116e:	14 c0       	rjmp	.+40     	; 0x1198 <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1170:	6f 81       	ldd	r22, Y+7	; 0x07
    1172:	78 85       	ldd	r23, Y+8	; 0x08
    1174:	89 85       	ldd	r24, Y+9	; 0x09
    1176:	9a 85       	ldd	r25, Y+10	; 0x0a
    1178:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
    117c:	dc 01       	movw	r26, r24
    117e:	cb 01       	movw	r24, r22
    1180:	9e 83       	std	Y+6, r25	; 0x06
    1182:	8d 83       	std	Y+5, r24	; 0x05
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	9e 81       	ldd	r25, Y+6	; 0x06
    1188:	9a 83       	std	Y+2, r25	; 0x02
    118a:	89 83       	std	Y+1, r24	; 0x01
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	f1 f7       	brne	.-4      	; 0x1190 <lcd_wr_char+0x28c>
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    1198:	a8 e2       	ldi	r26, 0x28	; 40
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e8 e2       	ldi	r30, 0x28	; 40
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	8b 7f       	andi	r24, 0xFB	; 251
    11a4:	8c 93       	st	X, r24
}
    11a6:	6e 96       	adiw	r28, 0x1e	; 30
    11a8:	0f b6       	in	r0, 0x3f	; 63
    11aa:	f8 94       	cli
    11ac:	de bf       	out	0x3e, r29	; 62
    11ae:	0f be       	out	0x3f, r0	; 63
    11b0:	cd bf       	out	0x3d, r28	; 61
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <lcd_home>:


void lcd_home()
{
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    11c0:	80 e8       	ldi	r24, 0x80	; 128
    11c2:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
}
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <lcd_string>:


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	0f 92       	push	r0
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	0a c0       	rjmp	.+20     	; 0x11f2 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    11de:	e9 81       	ldd	r30, Y+1	; 0x01
    11e0:	fa 81       	ldd	r31, Y+2	; 0x02
    11e2:	80 81       	ld	r24, Z
    11e4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		str++;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01


/*****Function to Print String on LCD*****/
void lcd_string(char *str)
{
	while(*str != '\0')
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	80 81       	ld	r24, Z
    11f8:	88 23       	and	r24, r24
    11fa:	89 f7       	brne	.-30     	; 0x11de <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <lcd_cursor>:

/*** Position the LCD cursor at "row", "column". ***/

void lcd_cursor (char row, char column)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <lcd_cursor+0x6>
    120c:	0f 92       	push	r0
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3c 83       	std	Y+4, r19	; 0x04
    121e:	2b 83       	std	Y+3, r18	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	91 05       	cpc	r25, r1
    1228:	d9 f0       	breq	.+54     	; 0x1260 <lcd_cursor+0x5a>
    122a:	2b 81       	ldd	r18, Y+3	; 0x03
    122c:	3c 81       	ldd	r19, Y+4	; 0x04
    122e:	23 30       	cpi	r18, 0x03	; 3
    1230:	31 05       	cpc	r19, r1
    1232:	34 f4       	brge	.+12     	; 0x1240 <lcd_cursor+0x3a>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	9c 81       	ldd	r25, Y+4	; 0x04
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	61 f0       	breq	.+24     	; 0x1256 <lcd_cursor+0x50>
    123e:	1e c0       	rjmp	.+60     	; 0x127c <lcd_cursor+0x76>
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	23 30       	cpi	r18, 0x03	; 3
    1246:	31 05       	cpc	r19, r1
    1248:	81 f0       	breq	.+32     	; 0x126a <lcd_cursor+0x64>
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	91 05       	cpc	r25, r1
    1252:	81 f0       	breq	.+32     	; 0x1274 <lcd_cursor+0x6e>
    1254:	13 c0       	rjmp	.+38     	; 0x127c <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	81 58       	subi	r24, 0x81	; 129
    125a:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    125e:	0e c0       	rjmp	.+28     	; 0x127c <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	81 54       	subi	r24, 0x41	; 65
    1264:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1268:	09 c0       	rjmp	.+18     	; 0x127c <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	8d 56       	subi	r24, 0x6D	; 109
    126e:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	8d 52       	subi	r24, 0x2D	; 45
    1278:	0e 94 28 06 	call	0xc50	; 0xc50 <lcd_wr_command>
		default: break;
	}
}
    127c:	0f 90       	pop	r0
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <lcd_print>:

/***** Function To Print Any input value upto the desired digit on LCD *****/
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	27 97       	sbiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	8a 83       	std	Y+2, r24	; 0x02
    12a0:	6b 83       	std	Y+3, r22	; 0x03
    12a2:	5d 83       	std	Y+5, r21	; 0x05
    12a4:	4c 83       	std	Y+4, r20	; 0x04
    12a6:	3f 83       	std	Y+7, r19	; 0x07
    12a8:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    12aa:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 23       	and	r24, r24
    12b0:	19 f0       	breq	.+6      	; 0x12b8 <lcd_print+0x2e>
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	88 23       	and	r24, r24
    12b6:	19 f4       	brne	.+6      	; 0x12be <lcd_print+0x34>
	{
		lcd_home();
    12b8:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <lcd_home>
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    12be:	8a 81       	ldd	r24, Y+2	; 0x02
    12c0:	6b 81       	ldd	r22, Y+3	; 0x03
    12c2:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	}
	if(digits==5 || flag==1)
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	85 30       	cpi	r24, 0x05	; 5
    12cc:	91 05       	cpc	r25, r1
    12ce:	19 f0       	breq	.+6      	; 0x12d6 <lcd_print+0x4c>
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	a9 f4       	brne	.+42     	; 0x1300 <lcd_print+0x76>
	{
		million=value/10000+48;
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	20 e1       	ldi	r18, 0x10	; 16
    12dc:	37 e2       	ldi	r19, 0x27	; 39
    12de:	b9 01       	movw	r22, r18
    12e0:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__udivmodhi4>
    12e4:	cb 01       	movw	r24, r22
    12e6:	c0 96       	adiw	r24, 0x30	; 48
    12e8:	90 93 3a 02 	sts	0x023A, r25
    12ec:	80 93 39 02 	sts	0x0239, r24
		lcd_wr_char(million);
    12f0:	80 91 39 02 	lds	r24, 0x0239
    12f4:	90 91 3a 02 	lds	r25, 0x023A
    12f8:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	9f 81       	ldd	r25, Y+7	; 0x07
    1304:	84 30       	cpi	r24, 0x04	; 4
    1306:	91 05       	cpc	r25, r1
    1308:	19 f0       	breq	.+6      	; 0x1310 <lcd_print+0x86>
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	11 f5       	brne	.+68     	; 0x1354 <lcd_print+0xca>
	{
		temp = value/1000;
    1310:	8c 81       	ldd	r24, Y+4	; 0x04
    1312:	9d 81       	ldd	r25, Y+5	; 0x05
    1314:	28 ee       	ldi	r18, 0xE8	; 232
    1316:	33 e0       	ldi	r19, 0x03	; 3
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__udivmodhi4>
    131e:	cb 01       	movw	r24, r22
    1320:	90 93 3f 02 	sts	0x023F, r25
    1324:	80 93 3e 02 	sts	0x023E, r24
		thousand = temp%10 + 48;
    1328:	80 91 3e 02 	lds	r24, 0x023E
    132c:	90 91 3f 02 	lds	r25, 0x023F
    1330:	2a e0       	ldi	r18, 0x0A	; 10
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	b9 01       	movw	r22, r18
    1336:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__udivmodhi4>
    133a:	c0 96       	adiw	r24, 0x30	; 48
    133c:	90 93 51 02 	sts	0x0251, r25
    1340:	80 93 50 02 	sts	0x0250, r24
		lcd_wr_char(thousand);
    1344:	80 91 50 02 	lds	r24, 0x0250
    1348:	90 91 51 02 	lds	r25, 0x0251
    134c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    1354:	8e 81       	ldd	r24, Y+6	; 0x06
    1356:	9f 81       	ldd	r25, Y+7	; 0x07
    1358:	83 30       	cpi	r24, 0x03	; 3
    135a:	91 05       	cpc	r25, r1
    135c:	19 f0       	breq	.+6      	; 0x1364 <lcd_print+0xda>
    135e:	89 81       	ldd	r24, Y+1	; 0x01
    1360:	81 30       	cpi	r24, 0x01	; 1
    1362:	11 f5       	brne	.+68     	; 0x13a8 <lcd_print+0x11e>
	{
		temp = value/100;
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	9d 81       	ldd	r25, Y+5	; 0x05
    1368:	24 e6       	ldi	r18, 0x64	; 100
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	b9 01       	movw	r22, r18
    136e:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__udivmodhi4>
    1372:	cb 01       	movw	r24, r22
    1374:	90 93 3f 02 	sts	0x023F, r25
    1378:	80 93 3e 02 	sts	0x023E, r24
		hundred = temp%10 + 48;
    137c:	80 91 3e 02 	lds	r24, 0x023E
    1380:	90 91 3f 02 	lds	r25, 0x023F
    1384:	2a e0       	ldi	r18, 0x0A	; 10
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	b9 01       	movw	r22, r18
    138a:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__udivmodhi4>
    138e:	c0 96       	adiw	r24, 0x30	; 48
    1390:	90 93 4c 02 	sts	0x024C, r25
    1394:	80 93 4b 02 	sts	0x024B, r24
		lcd_wr_char(hundred);
    1398:	80 91 4b 02 	lds	r24, 0x024B
    139c:	90 91 4c 02 	lds	r25, 0x024C
    13a0:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    13a8:	8e 81       	ldd	r24, Y+6	; 0x06
    13aa:	9f 81       	ldd	r25, Y+7	; 0x07
    13ac:	82 30       	cpi	r24, 0x02	; 2
    13ae:	91 05       	cpc	r25, r1
    13b0:	19 f0       	breq	.+6      	; 0x13b8 <lcd_print+0x12e>
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	81 30       	cpi	r24, 0x01	; 1
    13b6:	11 f5       	brne	.+68     	; 0x13fc <lcd_print+0x172>
	{
		temp = value/10;
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	9d 81       	ldd	r25, Y+5	; 0x05
    13bc:	2a e0       	ldi	r18, 0x0A	; 10
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	b9 01       	movw	r22, r18
    13c2:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__udivmodhi4>
    13c6:	cb 01       	movw	r24, r22
    13c8:	90 93 3f 02 	sts	0x023F, r25
    13cc:	80 93 3e 02 	sts	0x023E, r24
		tens = temp%10 + 48;
    13d0:	80 91 3e 02 	lds	r24, 0x023E
    13d4:	90 91 3f 02 	lds	r25, 0x023F
    13d8:	2a e0       	ldi	r18, 0x0A	; 10
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	b9 01       	movw	r22, r18
    13de:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__udivmodhi4>
    13e2:	c0 96       	adiw	r24, 0x30	; 48
    13e4:	90 93 46 02 	sts	0x0246, r25
    13e8:	80 93 45 02 	sts	0x0245, r24
		lcd_wr_char(tens);
    13ec:	80 91 45 02 	lds	r24, 0x0245
    13f0:	90 91 46 02 	lds	r25, 0x0246
    13f4:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
		flag=1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    13fc:	8e 81       	ldd	r24, Y+6	; 0x06
    13fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1400:	81 30       	cpi	r24, 0x01	; 1
    1402:	91 05       	cpc	r25, r1
    1404:	19 f0       	breq	.+6      	; 0x140c <lcd_print+0x182>
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	91 f4       	brne	.+36     	; 0x1430 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	b9 01       	movw	r22, r18
    1416:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__udivmodhi4>
    141a:	c0 96       	adiw	r24, 0x30	; 48
    141c:	90 93 4f 02 	sts	0x024F, r25
    1420:	80 93 4e 02 	sts	0x024E, r24
		lcd_wr_char(unit);
    1424:	80 91 4e 02 	lds	r24, 0x024E
    1428:	90 91 4f 02 	lds	r25, 0x024F
    142c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	if(digits>5)
    1430:	8e 81       	ldd	r24, Y+6	; 0x06
    1432:	9f 81       	ldd	r25, Y+7	; 0x07
    1434:	86 30       	cpi	r24, 0x06	; 6
    1436:	91 05       	cpc	r25, r1
    1438:	1c f0       	brlt	.+6      	; 0x1440 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    143a:	85 e4       	ldi	r24, 0x45	; 69
    143c:	0e 94 82 07 	call	0xf04	; 0xf04 <lcd_wr_char>
	}
	
}
    1440:	27 96       	adiw	r28, 0x07	; 7
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <motion_pin_config>:
unsigned int right_motor_pulse_count = 0x00;        //incremented at each isr
unsigned int right_motor_pulse_count_locked = 0x00; // locked at serial comm isr
//-------------------------------------------------------------------------------

void motion_pin_config (void)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
 DDRA = DDRA | 0x0F;   //set direction of the PORTA 3 to PORTA 0 pins as output
    145a:	a1 e2       	ldi	r26, 0x21	; 33
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e1 e2       	ldi	r30, 0x21	; 33
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	8f 60       	ori	r24, 0x0F	; 15
    1466:	8c 93       	st	X, r24
 PORTA = PORTA & 0xF0; // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
    1468:	a2 e2       	ldi	r26, 0x22	; 34
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e2 e2       	ldi	r30, 0x22	; 34
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	80 7f       	andi	r24, 0xF0	; 240
    1474:	8c 93       	st	X, r24
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    1476:	aa e0       	ldi	r26, 0x0A	; 10
    1478:	b1 e0       	ldi	r27, 0x01	; 1
    147a:	ea e0       	ldi	r30, 0x0A	; 10
    147c:	f1 e0       	ldi	r31, 0x01	; 1
    147e:	80 81       	ld	r24, Z
    1480:	88 61       	ori	r24, 0x18	; 24
    1482:	8c 93       	st	X, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM
    1484:	ab e0       	ldi	r26, 0x0B	; 11
    1486:	b1 e0       	ldi	r27, 0x01	; 1
    1488:	eb e0       	ldi	r30, 0x0B	; 11
    148a:	f1 e0       	ldi	r31, 0x01	; 1
    148c:	80 81       	ld	r24, Z
    148e:	88 61       	ori	r24, 0x18	; 24
    1490:	8c 93       	st	X, r24
}
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <servo1_pin_config>:

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
    14a0:	a4 e2       	ldi	r26, 0x24	; 36
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e4 e2       	ldi	r30, 0x24	; 36
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	80 62       	ori	r24, 0x20	; 32
    14ac:	8c 93       	st	X, r24
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
    14ae:	a5 e2       	ldi	r26, 0x25	; 37
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e5 e2       	ldi	r30, 0x25	; 37
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	80 62       	ori	r24, 0x20	; 32
    14ba:	8c 93       	st	X, r24
}
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
    14ca:	a4 e2       	ldi	r26, 0x24	; 36
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e4 e2       	ldi	r30, 0x24	; 36
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	80 64       	ori	r24, 0x40	; 64
    14d6:	8c 93       	st	X, r24
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
    14d8:	a5 e2       	ldi	r26, 0x25	; 37
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e5 e2       	ldi	r30, 0x25	; 37
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 64       	ori	r24, 0x40	; 64
    14e4:	8c 93       	st	X, r24
}
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
    14f4:	a4 e2       	ldi	r26, 0x24	; 36
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e4 e2       	ldi	r30, 0x24	; 36
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 68       	ori	r24, 0x80	; 128
    1500:	8c 93       	st	X, r24
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
    1502:	a5 e2       	ldi	r26, 0x25	; 37
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e5 e2       	ldi	r30, 0x25	; 37
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	80 68       	ori	r24, 0x80	; 128
    150e:	8c 93       	st	X, r24
}
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <spi_pin_config>:

void spi_pin_config (void)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	cd b7       	in	r28, 0x3d	; 61
    151c:	de b7       	in	r29, 0x3e	; 62
 DDRB = DDRB | 0x07;
    151e:	a4 e2       	ldi	r26, 0x24	; 36
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e4 e2       	ldi	r30, 0x24	; 36
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	87 60       	ori	r24, 0x07	; 7
    152a:	8c 93       	st	X, r24
 PORTB = PORTB | 0x07;
    152c:	a5 e2       	ldi	r26, 0x25	; 37
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	e5 e2       	ldi	r30, 0x25	; 37
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	87 60       	ori	r24, 0x07	; 7
    1538:	8c 93       	st	X, r24
}
    153a:	cf 91       	pop	r28
    153c:	df 91       	pop	r29
    153e:	08 95       	ret

00001540 <lcd_port_config>:

void lcd_port_config (void)
{
    1540:	df 93       	push	r29
    1542:	cf 93       	push	r28
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7;    //all the LCD pin's direction set as output
    1548:	a7 e2       	ldi	r26, 0x27	; 39
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e7 e2       	ldi	r30, 0x27	; 39
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	87 6f       	ori	r24, 0xF7	; 247
    1554:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80;  // all the LCD pins are set to logic 0 except PORTC 7
    1556:	a8 e2       	ldi	r26, 0x28	; 40
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e8 e2       	ldi	r30, 0x28	; 40
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	80 78       	andi	r24, 0x80	; 128
    1562:	8c 93       	st	X, r24
}
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <buzzer_pin_config>:

//Function to initialize Buzzer 
void buzzer_pin_config (void)
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	cd b7       	in	r28, 0x3d	; 61
    1570:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
    1572:	a7 e2       	ldi	r26, 0x27	; 39
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	e7 e2       	ldi	r30, 0x27	; 39
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	80 81       	ld	r24, Z
    157c:	88 60       	ori	r24, 0x08	; 8
    157e:	8c 93       	st	X, r24
 PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    1580:	a8 e2       	ldi	r26, 0x28	; 40
    1582:	b0 e0       	ldi	r27, 0x00	; 0
    1584:	e8 e2       	ldi	r30, 0x28	; 40
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	80 81       	ld	r24, Z
    158a:	87 7f       	andi	r24, 0xF7	; 247
    158c:	8c 93       	st	X, r24
}
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
    159c:	ad e2       	ldi	r26, 0x2D	; 45
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	ed e2       	ldi	r30, 0x2D	; 45
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	8f 7e       	andi	r24, 0xEF	; 239
    15a8:	8c 93       	st	X, r24
 PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
    15aa:	ae e2       	ldi	r26, 0x2E	; 46
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	ee e2       	ldi	r30, 0x2E	; 46
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	80 61       	ori	r24, 0x10	; 16
    15b6:	8c 93       	st	X, r24
}
    15b8:	cf 91       	pop	r28
    15ba:	df 91       	pop	r29
    15bc:	08 95       	ret

000015be <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
    15be:	df 93       	push	r29
    15c0:	cf 93       	push	r28
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
 DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
    15c6:	ad e2       	ldi	r26, 0x2D	; 45
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	ed e2       	ldi	r30, 0x2D	; 45
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	8f 7d       	andi	r24, 0xDF	; 223
    15d2:	8c 93       	st	X, r24
 PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
    15d4:	ae e2       	ldi	r26, 0x2E	; 46
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	ee e2       	ldi	r30, 0x2E	; 46
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	80 62       	ori	r24, 0x20	; 32
    15e0:	8c 93       	st	X, r24
}
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
 DDRF = 0x00;  //set PORTF direction as input
    15f0:	e0 e3       	ldi	r30, 0x30	; 48
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	10 82       	st	Z, r1
 PORTF = 0x00; //set PORTF pins floating
    15f6:	e1 e3       	ldi	r30, 0x31	; 49
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	10 82       	st	Z, r1
 DDRK = 0x00;  //set PORTK direction as input
    15fc:	e7 e0       	ldi	r30, 0x07	; 7
    15fe:	f1 e0       	ldi	r31, 0x01	; 1
    1600:	10 82       	st	Z, r1
 PORTK = 0x00; //set PORTK pins floating
    1602:	e8 e0       	ldi	r30, 0x08	; 8
    1604:	f1 e0       	ldi	r31, 0x01	; 1
    1606:	10 82       	st	Z, r1
}
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <port_init>:

//Port init for different modules
void port_init(void)
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
 motion_pin_config();
    1616:	0e 94 29 0a 	call	0x1452	; 0x1452 <motion_pin_config>
 servo1_pin_config();
    161a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <servo1_pin_config>
 servo2_pin_config();
    161e:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <servo2_pin_config>
 servo3_pin_config();
    1622:	0e 94 76 0a 	call	0x14ec	; 0x14ec <servo3_pin_config>
 spi_pin_config();
    1626:	0e 94 8b 0a 	call	0x1516	; 0x1516 <spi_pin_config>
 lcd_port_config();
    162a:	0e 94 a0 0a 	call	0x1540	; 0x1540 <lcd_port_config>
 buzzer_pin_config();           
    162e:	0e 94 b5 0a 	call	0x156a	; 0x156a <buzzer_pin_config>
 left_encoder_pin_config();
    1632:	0e 94 ca 0a 	call	0x1594	; 0x1594 <left_encoder_pin_config>
 right_encoder_pin_config();
    1636:	0e 94 df 0a 	call	0x15be	; 0x15be <right_encoder_pin_config>
 adc_pin_config();	 
    163a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <adc_pin_config>
}
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
    164c:	e1 e2       	ldi	r30, 0x21	; 33
    164e:	f1 e0       	ldi	r31, 0x01	; 1
    1650:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
    1652:	e5 e2       	ldi	r30, 0x25	; 37
    1654:	f1 e0       	ldi	r31, 0x01	; 1
    1656:	8f ef       	ldi	r24, 0xFF	; 255
    1658:	80 83       	st	Z, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
    165a:	e4 e2       	ldi	r30, 0x24	; 36
    165c:	f1 e0       	ldi	r31, 0x01	; 1
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	80 83       	st	Z, r24
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
    1662:	e9 e2       	ldi	r30, 0x29	; 41
    1664:	f1 e0       	ldi	r31, 0x01	; 1
    1666:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
    1668:	e8 e2       	ldi	r30, 0x28	; 40
    166a:	f1 e0       	ldi	r31, 0x01	; 1
    166c:	8f ef       	ldi	r24, 0xFF	; 255
    166e:	80 83       	st	Z, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
    1670:	eb e2       	ldi	r30, 0x2B	; 43
    1672:	f1 e0       	ldi	r31, 0x01	; 1
    1674:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
    1676:	ea e2       	ldi	r30, 0x2A	; 42
    1678:	f1 e0       	ldi	r31, 0x01	; 1
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	80 83       	st	Z, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
    167e:	ed e2       	ldi	r30, 0x2D	; 45
    1680:	f1 e0       	ldi	r31, 0x01	; 1
    1682:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
    1684:	ec e2       	ldi	r30, 0x2C	; 44
    1686:	f1 e0       	ldi	r31, 0x01	; 1
    1688:	8f ef       	ldi	r24, 0xFF	; 255
    168a:	80 83       	st	Z, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
    168c:	e0 e2       	ldi	r30, 0x20	; 32
    168e:	f1 e0       	ldi	r31, 0x01	; 1
    1690:	89 ea       	ldi	r24, 0xA9	; 169
    1692:	80 83       	st	Z, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
    1694:	e1 e2       	ldi	r30, 0x21	; 33
    1696:	f1 e0       	ldi	r31, 0x01	; 1
    1698:	8b e0       	ldi	r24, 0x0B	; 11
    169a:	80 83       	st	Z, r24
}
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <timer1_init>:
//TIMER1 initialize - prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// desired value: 40Hz
// actual value: 42.187Hz (5.2%)
void timer1_init(void)
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
    16aa:	e1 e8       	ldi	r30, 0x81	; 129
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //setup
    16b0:	e5 e8       	ldi	r30, 0x85	; 133
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	8c ef       	ldi	r24, 0xFC	; 252
    16b6:	80 83       	st	Z, r24
 TCNT1L = 0x01;
    16b8:	e4 e8       	ldi	r30, 0x84	; 132
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	80 83       	st	Z, r24
 OCR1AH = 0x03;
    16c0:	e9 e8       	ldi	r30, 0x89	; 137
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	83 e0       	ldi	r24, 0x03	; 3
    16c6:	80 83       	st	Z, r24
 OCR1AL = 0xFF;
    16c8:	e8 e8       	ldi	r30, 0x88	; 136
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	80 83       	st	Z, r24
 OCR1BH = 0x03;
    16d0:	eb e8       	ldi	r30, 0x8B	; 139
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	83 e0       	ldi	r24, 0x03	; 3
    16d6:	80 83       	st	Z, r24
 OCR1BL = 0xFF;
    16d8:	ea e8       	ldi	r30, 0x8A	; 138
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	80 83       	st	Z, r24
 OCR1CH = 0x00;
    16e0:	ed e8       	ldi	r30, 0x8D	; 141
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	10 82       	st	Z, r1
 OCR1CL = 0x00;
    16e6:	ec e8       	ldi	r30, 0x8C	; 140
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	10 82       	st	Z, r1
 //ICR1H  = 0x03;
 //ICR1L  = 0xFF;
 TCCR1A = 0xA3;
    16ec:	e0 e8       	ldi	r30, 0x80	; 128
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	83 ea       	ldi	r24, 0xA3	; 163
    16f2:	80 83       	st	Z, r24
 TCCR1C = 0x00;
    16f4:	e2 e8       	ldi	r30, 0x82	; 130
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //start Timer
    16fa:	e1 e8       	ldi	r30, 0x81	; 129
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	8c e0       	ldi	r24, 0x0C	; 12
    1700:	80 83       	st	Z, r24
}
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <uart0_init>:
//UART1 initialize
// desired baud rate:115200
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
 UCSR0B = 0x00; //disable while setting baud rate
    1710:	e1 ec       	ldi	r30, 0xC1	; 193
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	10 82       	st	Z, r1
 UCSR0A = 0x00;
    1716:	e0 ec       	ldi	r30, 0xC0	; 192
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	10 82       	st	Z, r1
 UCSR0C = 0x06;
    171c:	e2 ec       	ldi	r30, 0xC2	; 194
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	86 e0       	ldi	r24, 0x06	; 6
    1722:	80 83       	st	Z, r24
 UBRR0H = 0x00; //set baud rate hi
    1724:	e5 ec       	ldi	r30, 0xC5	; 197
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	10 82       	st	Z, r1
 UBRR0L = 0x07; //set baud rate lo
    172a:	e4 ec       	ldi	r30, 0xC4	; 196
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	87 e0       	ldi	r24, 0x07	; 7
    1730:	80 83       	st	Z, r24
 UCSR0B = 0x98;
    1732:	e1 ec       	ldi	r30, 0xC1	; 193
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	88 e9       	ldi	r24, 0x98	; 152
    1738:	80 83       	st	Z, r24
}
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <spi_init>:

//SPI initialize
// clock rate: 921600hz
void spi_init(void)
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
 SPCR = 0x53; //setup SPI
    1748:	ec e4       	ldi	r30, 0x4C	; 76
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	83 e5       	ldi	r24, 0x53	; 83
    174e:	80 83       	st	Z, r24
 SPSR = 0x00; //setup SPI
    1750:	ed e4       	ldi	r30, 0x4D	; 77
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	10 82       	st	Z, r1
 SPDR = 0x00;}
    1756:	ee e4       	ldi	r30, 0x4E	; 78
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	10 82       	st	Z, r1
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <adc_init>:

//ADC initialize
// Conversion time: 56uS
void adc_init(void)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
 ADCSRA = 0x00;
    176a:	ea e7       	ldi	r30, 0x7A	; 122
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	10 82       	st	Z, r1
 ADCSRB = 0x00;		//MUX5 = 0
    1770:	eb e7       	ldi	r30, 0x7B	; 123
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	10 82       	st	Z, r1
 ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
    1776:	ec e7       	ldi	r30, 0x7C	; 124
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 e2       	ldi	r24, 0x20	; 32
    177c:	80 83       	st	Z, r24
 ACSR = 0x80;
    177e:	e0 e5       	ldi	r30, 0x50	; 80
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 e8       	ldi	r24, 0x80	; 128
    1784:	80 83       	st	Z, r24
 ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
    1786:	ea e7       	ldi	r30, 0x7A	; 122
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	86 e8       	ldi	r24, 0x86	; 134
    178c:	80 83       	st	Z, r24
}
    178e:	cf 91       	pop	r28
    1790:	df 91       	pop	r29
    1792:	08 95       	ret

00001794 <left_position_encoder_interrupt_init>:

//-------------------------------------------------------------------------------
void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
    1794:	df 93       	push	r29
    1796:	cf 93       	push	r28
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    179c:	f8 94       	cli
 EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
    179e:	aa e6       	ldi	r26, 0x6A	; 106
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	ea e6       	ldi	r30, 0x6A	; 106
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	82 60       	ori	r24, 0x02	; 2
    17aa:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
    17ac:	ad e3       	ldi	r26, 0x3D	; 61
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	ed e3       	ldi	r30, 0x3D	; 61
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	80 61       	ori	r24, 0x10	; 16
    17b8:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
    17ba:	78 94       	sei
}
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupt
    17ca:	f8 94       	cli
 EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
    17cc:	aa e6       	ldi	r26, 0x6A	; 106
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	ea e6       	ldi	r30, 0x6A	; 106
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	88 60       	ori	r24, 0x08	; 8
    17d8:	8c 93       	st	X, r24
 EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
    17da:	ad e3       	ldi	r26, 0x3D	; 61
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	ed e3       	ldi	r30, 0x3D	; 61
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	80 62       	ori	r24, 0x20	; 32
    17e6:	8c 93       	st	X, r24
 sei();   // Enables the global interrupt 
    17e8:	78 94       	sei
}
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <__vector_6>:
//-------------------------------------------------------------------------------
//ISR for right position encoder
//-------------------------------------------------------------------------------

ISR(INT5_vect)  
{
    17f0:	1f 92       	push	r1
    17f2:	0f 92       	push	r0
    17f4:	0f b6       	in	r0, 0x3f	; 63
    17f6:	0f 92       	push	r0
    17f8:	11 24       	eor	r1, r1
    17fa:	8f 93       	push	r24
    17fc:	9f 93       	push	r25
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
 right_motor_pulse_count++;
    1806:	80 91 30 02 	lds	r24, 0x0230
    180a:	90 91 31 02 	lds	r25, 0x0231
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	90 93 31 02 	sts	0x0231, r25
    1814:	80 93 30 02 	sts	0x0230, r24
 //external interupt on INT5
}
    1818:	cf 91       	pop	r28
    181a:	df 91       	pop	r29
    181c:	9f 91       	pop	r25
    181e:	8f 91       	pop	r24
    1820:	0f 90       	pop	r0
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	0f 90       	pop	r0
    1826:	1f 90       	pop	r1
    1828:	18 95       	reti

0000182a <__vector_5>:


//ISR for left position encoder

ISR(INT4_vect)   
{
    182a:	1f 92       	push	r1
    182c:	0f 92       	push	r0
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	0f 92       	push	r0
    1832:	11 24       	eor	r1, r1
    1834:	8f 93       	push	r24
    1836:	9f 93       	push	r25
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
 left_motor_pulse_count++;
    1840:	80 91 2c 02 	lds	r24, 0x022C
    1844:	90 91 2d 02 	lds	r25, 0x022D
    1848:	01 96       	adiw	r24, 0x01	; 1
    184a:	90 93 2d 02 	sts	0x022D, r25
    184e:	80 93 2c 02 	sts	0x022C, r24
 //external interupt on INT4
}
    1852:	cf 91       	pop	r28
    1854:	df 91       	pop	r29
    1856:	9f 91       	pop	r25
    1858:	8f 91       	pop	r24
    185a:	0f 90       	pop	r0
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	0f 90       	pop	r0
    1860:	1f 90       	pop	r1
    1862:	18 95       	reti

00001864 <ADC_Conversion>:

//-------------------------------------------------------------------------------
//-- ADC Conversion Function --------------
//-------------------------------------------------------------------------------
unsigned char ADC_Conversion(unsigned char ch)
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	0f 92       	push	r0
    186a:	0f 92       	push	r0
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
    1870:	8a 83       	std	Y+2, r24	; 0x02
unsigned char a;
 if(ch>7)
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	88 30       	cpi	r24, 0x08	; 8
    1876:	20 f0       	brcs	.+8      	; 0x1880 <ADC_Conversion+0x1c>
	{
		ADCSRB = 0x08;
    1878:	eb e7       	ldi	r30, 0x7B	; 123
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	88 e0       	ldi	r24, 0x08	; 8
    187e:	80 83       	st	Z, r24
	}
 ch = ch & 0x07;			  //Store only 3 LSB bits
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	87 70       	andi	r24, 0x07	; 7
    1884:	8a 83       	std	Y+2, r24	; 0x02
 ADMUX= 0x20 | ch;			  //Select the ADC channel with left adjust select
    1886:	ec e7       	ldi	r30, 0x7C	; 124
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	80 62       	ori	r24, 0x20	; 32
    188e:	80 83       	st	Z, r24
 ADC_flag = 0x00; 			  //Clear the user defined flag
    1890:	10 92 36 02 	sts	0x0236, r1
 ADCSRA = ADCSRA | 0x40;	  //Set start conversion bit
    1894:	aa e7       	ldi	r26, 0x7A	; 122
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	ea e7       	ldi	r30, 0x7A	; 122
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	80 64       	ori	r24, 0x40	; 64
    18a0:	8c 93       	st	X, r24
 while((ADCSRA&0x10)==0);	  //Wait for ADC conversion to complete
    18a2:	ea e7       	ldi	r30, 0x7A	; 122
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	88 2f       	mov	r24, r24
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	80 71       	andi	r24, 0x10	; 16
    18ae:	90 70       	andi	r25, 0x00	; 0
    18b0:	00 97       	sbiw	r24, 0x00	; 0
    18b2:	b9 f3       	breq	.-18     	; 0x18a2 <ADC_Conversion+0x3e>
 a=ADCH;
    18b4:	e9 e7       	ldi	r30, 0x79	; 121
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	89 83       	std	Y+1, r24	; 0x01
 ADCSRA = ADCSRA|0x10;        //clear ADIF (ADC Interrupt Flag) by writing 1 to it
    18bc:	aa e7       	ldi	r26, 0x7A	; 122
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	ea e7       	ldi	r30, 0x7A	; 122
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	80 61       	ori	r24, 0x10	; 16
    18c8:	8c 93       	st	X, r24
 ADCSRB = 0x00;
    18ca:	eb e7       	ldi	r30, 0x7B	; 123
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	10 82       	st	Z, r1
 return a;
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <spi_master_tx_and_rx>:

//-------------------------------------------------------------------------------
//-- Function To Transmit/Receive through SPI interface ------
//-------------------------------------------------------------------------------
unsigned char spi_master_tx_and_rx (unsigned char data)
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	60 97       	sbiw	r28, 0x10	; 16
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	88 8b       	std	Y+16, r24	; 0x10
 unsigned char rx_data = 0;
    18f2:	1f 86       	std	Y+15, r1	; 0x0f

 PORTB = PORTB & 0xFE;        // make SS pin low
    18f4:	a5 e2       	ldi	r26, 0x25	; 37
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e5 e2       	ldi	r30, 0x25	; 37
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	8e 7f       	andi	r24, 0xFE	; 254
    1900:	8c 93       	st	X, r24
 SPDR = data;
    1902:	ee e4       	ldi	r30, 0x4E	; 78
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	88 89       	ldd	r24, Y+16	; 0x10
    1908:	80 83       	st	Z, r24
 while(!(SPSR & (1<<SPIF)));  //wait for data transmission to complete
    190a:	ed e4       	ldi	r30, 0x4D	; 77
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	88 23       	and	r24, r24
    1912:	dc f7       	brge	.-10     	; 0x190a <spi_master_tx_and_rx+0x2e>
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	a0 e8       	ldi	r26, 0x80	; 128
    191a:	bf e3       	ldi	r27, 0x3F	; 63
    191c:	8b 87       	std	Y+11, r24	; 0x0b
    191e:	9c 87       	std	Y+12, r25	; 0x0c
    1920:	ad 87       	std	Y+13, r26	; 0x0d
    1922:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1924:	6b 85       	ldd	r22, Y+11	; 0x0b
    1926:	7c 85       	ldd	r23, Y+12	; 0x0c
    1928:	8d 85       	ldd	r24, Y+13	; 0x0d
    192a:	9e 85       	ldd	r25, Y+14	; 0x0e
    192c:	26 e6       	ldi	r18, 0x66	; 102
    192e:	36 e6       	ldi	r19, 0x66	; 102
    1930:	46 e6       	ldi	r20, 0x66	; 102
    1932:	55 e4       	ldi	r21, 0x45	; 69
    1934:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	8f 83       	std	Y+7, r24	; 0x07
    193e:	98 87       	std	Y+8, r25	; 0x08
    1940:	a9 87       	std	Y+9, r26	; 0x09
    1942:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1944:	6f 81       	ldd	r22, Y+7	; 0x07
    1946:	78 85       	ldd	r23, Y+8	; 0x08
    1948:	89 85       	ldd	r24, Y+9	; 0x09
    194a:	9a 85       	ldd	r25, Y+10	; 0x0a
    194c:	20 e0       	ldi	r18, 0x00	; 0
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	40 e8       	ldi	r20, 0x80	; 128
    1952:	5f e3       	ldi	r21, 0x3F	; 63
    1954:	0e 94 23 13 	call	0x2646	; 0x2646 <__ltsf2>
    1958:	88 23       	and	r24, r24
    195a:	2c f4       	brge	.+10     	; 0x1966 <spi_master_tx_and_rx+0x8a>
		__ticks = 1;
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	9e 83       	std	Y+6, r25	; 0x06
    1962:	8d 83       	std	Y+5, r24	; 0x05
    1964:	3f c0       	rjmp	.+126    	; 0x19e4 <spi_master_tx_and_rx+0x108>
	else if (__tmp > 65535)
    1966:	6f 81       	ldd	r22, Y+7	; 0x07
    1968:	78 85       	ldd	r23, Y+8	; 0x08
    196a:	89 85       	ldd	r24, Y+9	; 0x09
    196c:	9a 85       	ldd	r25, Y+10	; 0x0a
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	3f ef       	ldi	r19, 0xFF	; 255
    1972:	4f e7       	ldi	r20, 0x7F	; 127
    1974:	57 e4       	ldi	r21, 0x47	; 71
    1976:	0e 94 c3 12 	call	0x2586	; 0x2586 <__gtsf2>
    197a:	18 16       	cp	r1, r24
    197c:	4c f5       	brge	.+82     	; 0x19d0 <spi_master_tx_and_rx+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1980:	7c 85       	ldd	r23, Y+12	; 0x0c
    1982:	8d 85       	ldd	r24, Y+13	; 0x0d
    1984:	9e 85       	ldd	r25, Y+14	; 0x0e
    1986:	20 e0       	ldi	r18, 0x00	; 0
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	40 e2       	ldi	r20, 0x20	; 32
    198c:	51 e4       	ldi	r21, 0x41	; 65
    198e:	0e 94 c9 11 	call	0x2392	; 0x2392 <__mulsf3>
    1992:	dc 01       	movw	r26, r24
    1994:	cb 01       	movw	r24, r22
    1996:	bc 01       	movw	r22, r24
    1998:	cd 01       	movw	r24, r26
    199a:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
    199e:	dc 01       	movw	r26, r24
    19a0:	cb 01       	movw	r24, r22
    19a2:	9e 83       	std	Y+6, r25	; 0x06
    19a4:	8d 83       	std	Y+5, r24	; 0x05
    19a6:	0f c0       	rjmp	.+30     	; 0x19c6 <spi_master_tx_and_rx+0xea>
    19a8:	80 e7       	ldi	r24, 0x70	; 112
    19aa:	91 e0       	ldi	r25, 0x01	; 1
    19ac:	9c 83       	std	Y+4, r25	; 0x04
    19ae:	8b 83       	std	Y+3, r24	; 0x03
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	9c 81       	ldd	r25, Y+4	; 0x04
    19b4:	01 97       	sbiw	r24, 0x01	; 1
    19b6:	f1 f7       	brne	.-4      	; 0x19b4 <spi_master_tx_and_rx+0xd8>
    19b8:	9c 83       	std	Y+4, r25	; 0x04
    19ba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19bc:	8d 81       	ldd	r24, Y+5	; 0x05
    19be:	9e 81       	ldd	r25, Y+6	; 0x06
    19c0:	01 97       	sbiw	r24, 0x01	; 1
    19c2:	9e 83       	std	Y+6, r25	; 0x06
    19c4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c6:	8d 81       	ldd	r24, Y+5	; 0x05
    19c8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	69 f7       	brne	.-38     	; 0x19a8 <spi_master_tx_and_rx+0xcc>
    19ce:	14 c0       	rjmp	.+40     	; 0x19f8 <spi_master_tx_and_rx+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d0:	6f 81       	ldd	r22, Y+7	; 0x07
    19d2:	78 85       	ldd	r23, Y+8	; 0x08
    19d4:	89 85       	ldd	r24, Y+9	; 0x09
    19d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    19d8:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__fixunssfsi>
    19dc:	dc 01       	movw	r26, r24
    19de:	cb 01       	movw	r24, r22
    19e0:	9e 83       	std	Y+6, r25	; 0x06
    19e2:	8d 83       	std	Y+5, r24	; 0x05
    19e4:	8d 81       	ldd	r24, Y+5	; 0x05
    19e6:	9e 81       	ldd	r25, Y+6	; 0x06
    19e8:	9a 83       	std	Y+2, r25	; 0x02
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
    19ee:	9a 81       	ldd	r25, Y+2	; 0x02
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	f1 f7       	brne	.-4      	; 0x19f0 <spi_master_tx_and_rx+0x114>
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01

 _delay_ms(1);                //time for ADC conversion in the slave microcontroller
 
 SPDR = 0x50;                 // send dummy byte to read back data from the slave microcontroller
    19f8:	ee e4       	ldi	r30, 0x4E	; 78
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 e5       	ldi	r24, 0x50	; 80
    19fe:	80 83       	st	Z, r24
 while(!(SPSR & (1<<SPIF)));  //wait for data reception to complete
    1a00:	ed e4       	ldi	r30, 0x4D	; 77
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	88 23       	and	r24, r24
    1a08:	dc f7       	brge	.-10     	; 0x1a00 <spi_master_tx_and_rx+0x124>
 rx_data = SPDR;
    1a0a:	ee e4       	ldi	r30, 0x4E	; 78
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	8f 87       	std	Y+15, r24	; 0x0f
 PORTB = PORTB | 0x01;        // make SS high
    1a12:	a5 e2       	ldi	r26, 0x25	; 37
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e5 e2       	ldi	r30, 0x25	; 37
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	81 60       	ori	r24, 0x01	; 1
    1a1e:	8c 93       	st	X, r24
 return rx_data;
    1a20:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1a22:	60 96       	adiw	r28, 0x10	; 16
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <sensor_data_interpretation>:

//-------------------------------------------------------------------------------

void sensor_data_interpretation(void) //ld, fd, rd, light int
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
 
 WL_LEFT = ADC_Conversion(3);
    1a3c:	83 e0       	ldi	r24, 0x03	; 3
    1a3e:	0e 94 32 0c 	call	0x1864	; 0x1864 <ADC_Conversion>
    1a42:	80 93 37 02 	sts	0x0237, r24
  
 WL_CENTER = ADC_Conversion(2);
    1a46:	82 e0       	ldi	r24, 0x02	; 2
    1a48:	0e 94 32 0c 	call	0x1864	; 0x1864 <ADC_Conversion>
    1a4c:	80 93 3c 02 	sts	0x023C, r24
  
 WL_RIGHT = ADC_Conversion(1);
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	0e 94 32 0c 	call	0x1864	; 0x1864 <ADC_Conversion>
    1a56:	80 93 3b 02 	sts	0x023B, r24
 
 
 IR1 = ADC_Conversion(4); 
    1a5a:	84 e0       	ldi	r24, 0x04	; 4
    1a5c:	0e 94 32 0c 	call	0x1864	; 0x1864 <ADC_Conversion>
    1a60:	80 93 44 02 	sts	0x0244, r24
 
 IR2 = ADC_Conversion(5);
    1a64:	85 e0       	ldi	r24, 0x05	; 5
    1a66:	0e 94 32 0c 	call	0x1864	; 0x1864 <ADC_Conversion>
    1a6a:	80 93 38 02 	sts	0x0238, r24
 
 IR3 = ADC_Conversion(6);
    1a6e:	86 e0       	ldi	r24, 0x06	; 6
    1a70:	0e 94 32 0c 	call	0x1864	; 0x1864 <ADC_Conversion>
    1a74:	80 93 3d 02 	sts	0x023D, r24
  
 IR4 = ADC_Conversion(7);
    1a78:	87 e0       	ldi	r24, 0x07	; 7
    1a7a:	0e 94 32 0c 	call	0x1864	; 0x1864 <ADC_Conversion>
    1a7e:	80 93 47 02 	sts	0x0247, r24

 IR5 = ADC_Conversion(8);
    1a82:	88 e0       	ldi	r24, 0x08	; 8
    1a84:	0e 94 32 0c 	call	0x1864	; 0x1864 <ADC_Conversion>
    1a88:	80 93 35 02 	sts	0x0235, r24
 
 IR6 = spi_master_tx_and_rx(5);  
    1a8c:	85 e0       	ldi	r24, 0x05	; 5
    1a8e:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <spi_master_tx_and_rx>
    1a92:	80 93 53 02 	sts	0x0253, r24
 
 IR7 = spi_master_tx_and_rx (6); 
    1a96:	86 e0       	ldi	r24, 0x06	; 6
    1a98:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <spi_master_tx_and_rx>
    1a9c:	80 93 4a 02 	sts	0x024A, r24
 
 IR8 = spi_master_tx_and_rx (7);
    1aa0:	87 e0       	ldi	r24, 0x07	; 7
    1aa2:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <spi_master_tx_and_rx>
    1aa6:	80 93 40 02 	sts	0x0240, r24
 
 
 SHARP_1 = ADC_Conversion(9);
    1aaa:	89 e0       	ldi	r24, 0x09	; 9
    1aac:	0e 94 32 0c 	call	0x1864	; 0x1864 <ADC_Conversion>
    1ab0:	80 93 52 02 	sts	0x0252, r24
 //lcd_print(2,1,SHARP_1,3);
 
 SHARP_2 = ADC_Conversion(10);
    1ab4:	8a e0       	ldi	r24, 0x0A	; 10
    1ab6:	0e 94 32 0c 	call	0x1864	; 0x1864 <ADC_Conversion>
    1aba:	80 93 4d 02 	sts	0x024D, r24
 //lcd_print(2,5,SHARP_2,3);
 
 SHARP_3 = ADC_Conversion(11);
    1abe:	8b e0       	ldi	r24, 0x0B	; 11
    1ac0:	0e 94 32 0c 	call	0x1864	; 0x1864 <ADC_Conversion>
    1ac4:	80 93 34 02 	sts	0x0234, r24
 //lcd_print(1,13,SHARP_3,3);
 
 SHARP_4 = ADC_Conversion(12);
    1ac8:	8c e0       	ldi	r24, 0x0C	; 12
    1aca:	0e 94 32 0c 	call	0x1864	; 0x1864 <ADC_Conversion>
    1ace:	80 93 48 02 	sts	0x0248, r24
 //lcd_print(2,9,SHARP_4,3);
 
 SHARP_5 = ADC_Conversion(13);
    1ad2:	8d e0       	ldi	r24, 0x0D	; 13
    1ad4:	0e 94 32 0c 	call	0x1864	; 0x1864 <ADC_Conversion>
    1ad8:	80 93 41 02 	sts	0x0241, r24
 
 BATT_VALUE = ADC_Conversion(0);
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	0e 94 32 0c 	call	0x1864	; 0x1864 <ADC_Conversion>
    1ae2:	80 93 49 02 	sts	0x0249, r24
  
}
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	08 95       	ret

00001aec <motion_set>:

//-------------------------------------------------------------------------------
//------Function used for setting motor's direction----------
//-------------------------------------------------------------------------------
void motion_set(unsigned char ucDirection)
{
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	0f 92       	push	r0
    1af2:	0f 92       	push	r0
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	8a 83       	std	Y+2, r24	; 0x02
 unsigned char ucPortARestore = 0;
    1afa:	19 82       	std	Y+1, r1	; 0x01

 ucDirection &= 0x0F;            // removing upper nibbel for the protection
    1afc:	8a 81       	ldd	r24, Y+2	; 0x02
    1afe:	8f 70       	andi	r24, 0x0F	; 15
    1b00:	8a 83       	std	Y+2, r24	; 0x02
 ucPortARestore = PORTA;         // reading the PORTA original status
    1b02:	e2 e2       	ldi	r30, 0x22	; 34
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	89 83       	std	Y+1, r24	; 0x01
 ucPortARestore &= 0xF0;         // making lower direction nibbel to 0
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	80 7f       	andi	r24, 0xF0	; 240
    1b0e:	89 83       	std	Y+1, r24	; 0x01
 ucPortARestore |= ucDirection;  // adding lower nibbel for forward command and restoring the PORTA status
    1b10:	99 81       	ldd	r25, Y+1	; 0x01
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	89 2b       	or	r24, r25
    1b16:	89 83       	std	Y+1, r24	; 0x01
 PORTA = ucPortARestore;         // executing the command
    1b18:	e2 e2       	ldi	r30, 0x22	; 34
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	80 83       	st	Z, r24
}
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	08 95       	ret

00001b2a <forward>:

void forward(void) 
{ 
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
 motion_set(0x06);
    1b32:	86 e0       	ldi	r24, 0x06	; 6
    1b34:	0e 94 76 0d 	call	0x1aec	; 0x1aec <motion_set>
}
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <back>:

void back(void)  
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x09);  
    1b46:	89 e0       	ldi	r24, 0x09	; 9
    1b48:	0e 94 76 0d 	call	0x1aec	; 0x1aec <motion_set>
}
    1b4c:	cf 91       	pop	r28
    1b4e:	df 91       	pop	r29
    1b50:	08 95       	ret

00001b52 <left>:

void left(void)  
{
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x05);
    1b5a:	85 e0       	ldi	r24, 0x05	; 5
    1b5c:	0e 94 76 0d 	call	0x1aec	; 0x1aec <motion_set>
}
    1b60:	cf 91       	pop	r28
    1b62:	df 91       	pop	r29
    1b64:	08 95       	ret

00001b66 <right>:

void right(void)
{
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x0A);
    1b6e:	8a e0       	ldi	r24, 0x0A	; 10
    1b70:	0e 94 76 0d 	call	0x1aec	; 0x1aec <motion_set>
}
    1b74:	cf 91       	pop	r28
    1b76:	df 91       	pop	r29
    1b78:	08 95       	ret

00001b7a <stop>:

void stop(void)
{
    1b7a:	df 93       	push	r29
    1b7c:	cf 93       	push	r28
    1b7e:	cd b7       	in	r28, 0x3d	; 61
    1b80:	de b7       	in	r29, 0x3e	; 62
  motion_set(0x00);
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	0e 94 76 0d 	call	0x1aec	; 0x1aec <motion_set>
}
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <buzzer_on>:

//-------------------------------------------------------------------------------
//------- Function For Buzzer ON ----------
//-------------------------------------------------------------------------------
void buzzer_on(void)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	0f 92       	push	r0
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
 unsigned char portc_restore = 0;
    1b98:	19 82       	std	Y+1, r1	; 0x01
 portc_restore = PORTC; // reading the PORTC original status
    1b9a:	e8 e2       	ldi	r30, 0x28	; 40
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	80 81       	ld	r24, Z
    1ba0:	89 83       	std	Y+1, r24	; 0x01
 portc_restore |= 0x08; // setting the bit to turn on the buzzer
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	88 60       	ori	r24, 0x08	; 8
    1ba6:	89 83       	std	Y+1, r24	; 0x01
 PORTC = portc_restore; // executing the command
    1ba8:	e8 e2       	ldi	r30, 0x28	; 40
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	80 83       	st	Z, r24
}
    1bb0:	0f 90       	pop	r0
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	08 95       	ret

00001bb8 <buzzer_off>:

//-------------------------------------------------------------------------------
//------ Function For Buzzer OFF -------------
//-------------------------------------------------------------------------------
void buzzer_off(void)
{
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	0f 92       	push	r0
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
 unsigned char portc_restore = 0;
    1bc2:	19 82       	std	Y+1, r1	; 0x01
 portc_restore = PORTC; // reading the PORTC original status
    1bc4:	e8 e2       	ldi	r30, 0x28	; 40
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	89 83       	std	Y+1, r24	; 0x01
 portc_restore &= 0xF7; // resetting the bit to turn off the buzzer
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	87 7f       	andi	r24, 0xF7	; 247
    1bd0:	89 83       	std	Y+1, r24	; 0x01
 PORTC = portc_restore; // executing the command
    1bd2:	e8 e2       	ldi	r30, 0x28	; 40
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	80 83       	st	Z, r24
}
    1bda:	0f 90       	pop	r0
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <init_devices>:


//-------------------------------------------------------------------------------
//call this routine to initialize all peripherals
void init_devices(void)
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
 //stop errant interrupts until set up
 cli();              //disable all interrupts
    1bea:	f8 94       	cli
 port_init();
    1bec:	0e 94 07 0b 	call	0x160e	; 0x160e <port_init>
 uart0_init();
    1bf0:	0e 94 84 0b 	call	0x1708	; 0x1708 <uart0_init>
 adc_init();
    1bf4:	0e 94 b1 0b 	call	0x1762	; 0x1762 <adc_init>
 timer1_init();
    1bf8:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <timer1_init>
 timer5_init();
    1bfc:	0e 94 22 0b 	call	0x1644	; 0x1644 <timer5_init>
 lcd_set_4bit();
    1c00:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
 lcd_init();
    1c04:	0e 94 94 05 	call	0xb28	; 0xb28 <lcd_init>
 spi_init();
    1c08:	0e 94 a0 0b 	call	0x1740	; 0x1740 <spi_init>
 
 // below for lines are important for Encoder init
 left_position_encoder_interrupt_init();
    1c0c:	0e 94 ca 0b 	call	0x1794	; 0x1794 <left_position_encoder_interrupt_init>
 right_position_encoder_interrupt_init();
    1c10:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <right_position_encoder_interrupt_init>
 EICRB  = 0x0A;     //pin change int edge 4:7
    1c14:	ea e6       	ldi	r30, 0x6A	; 106
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	8a e0       	ldi	r24, 0x0A	; 10
    1c1a:	80 83       	st	Z, r24
 EIMSK  = 0x30;
    1c1c:	ed e3       	ldi	r30, 0x3D	; 61
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 e3       	ldi	r24, 0x30	; 48
    1c22:	80 83       	st	Z, r24

 sei();             //re-enable interrupts
    1c24:	78 94       	sei
 //all peripherals are now initialized
}
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <__vector_25>:

//-------------------------------------------------------------------------------
SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    1c2c:	1f 92       	push	r1
    1c2e:	0f 92       	push	r0
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	0f 92       	push	r0
    1c34:	00 90 5b 00 	lds	r0, 0x005B
    1c38:	0f 92       	push	r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	2f 93       	push	r18
    1c3e:	3f 93       	push	r19
    1c40:	4f 93       	push	r20
    1c42:	5f 93       	push	r21
    1c44:	6f 93       	push	r22
    1c46:	7f 93       	push	r23
    1c48:	8f 93       	push	r24
    1c4a:	9f 93       	push	r25
    1c4c:	af 93       	push	r26
    1c4e:	bf 93       	push	r27
    1c50:	ef 93       	push	r30
    1c52:	ff 93       	push	r31
    1c54:	df 93       	push	r29
    1c56:	cf 93       	push	r28
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <__vector_25+0x2e>
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
 unsigned char ser_data = 0x00;
    1c5e:	1b 82       	std	Y+3, r1	; 0x03
 unsigned char ser_data_upper_nibbel = 0x00;
    1c60:	1a 82       	std	Y+2, r1	; 0x02
 unsigned char ser_data_lower_nibbel = 0x00;
    1c62:	19 82       	std	Y+1, r1	; 0x01
 //uart has received a character in UDR0
 ser_data = UDR0;
    1c64:	e6 ec       	ldi	r30, 0xC6	; 198
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	8b 83       	std	Y+3, r24	; 0x03
 ser_data_upper_nibbel = ser_data & 0xF0;
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	80 7f       	andi	r24, 0xF0	; 240
    1c70:	8a 83       	std	Y+2, r24	; 0x02
 ser_data_lower_nibbel = ser_data & 0x0F;
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	8f 70       	andi	r24, 0x0F	; 15
    1c76:	89 83       	std	Y+1, r24	; 0x01
//__________________________Locomotoion setting commands_____________
 if (ser_data_upper_nibbel == 0x10)
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	80 31       	cpi	r24, 0x10	; 16
    1c7c:	19 f4       	brne	.+6      	; 0x1c84 <__vector_25+0x58>
 {
 left_motor_velocity = ser_data_lower_nibbel;
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	80 93 28 02 	sts	0x0228, r24
 }
 
 if (ser_data_upper_nibbel == 0x20)
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	80 32       	cpi	r24, 0x20	; 32
    1c88:	a1 f4       	brne	.+40     	; 0x1cb2 <__vector_25+0x86>
 {
 left_motor_velocity = ((ser_data_lower_nibbel * 16) + left_motor_velocity);
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	88 2f       	mov	r24, r24
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	82 95       	swap	r24
    1c92:	92 95       	swap	r25
    1c94:	90 7f       	andi	r25, 0xF0	; 240
    1c96:	98 27       	eor	r25, r24
    1c98:	80 7f       	andi	r24, 0xF0	; 240
    1c9a:	98 27       	eor	r25, r24
    1c9c:	98 2f       	mov	r25, r24
    1c9e:	80 91 28 02 	lds	r24, 0x0228
    1ca2:	89 0f       	add	r24, r25
    1ca4:	80 93 28 02 	sts	0x0228, r24
 if(left_motor_velocity > 0xFF)
 {
 left_motor_velocity = 0xFF;
 }
 OCR5AL = left_motor_velocity;
    1ca8:	e8 e2       	ldi	r30, 0x28	; 40
    1caa:	f1 e0       	ldi	r31, 0x01	; 1
    1cac:	80 91 28 02 	lds	r24, 0x0228
    1cb0:	80 83       	st	Z, r24
 //left_motor_pwm_feedback = left_motor_velocity;
 }
 
 if (ser_data_upper_nibbel == 0x30)
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	80 33       	cpi	r24, 0x30	; 48
    1cb6:	19 f4       	brne	.+6      	; 0x1cbe <__vector_25+0x92>
 {
 right_motor_velocity = ser_data_lower_nibbel;
    1cb8:	89 81       	ldd	r24, Y+1	; 0x01
    1cba:	80 93 29 02 	sts	0x0229, r24
 }
 
 if (ser_data_upper_nibbel == 0x40)
    1cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc0:	80 34       	cpi	r24, 0x40	; 64
    1cc2:	a1 f4       	brne	.+40     	; 0x1cec <__vector_25+0xc0>
 {
 right_motor_velocity = ((ser_data_lower_nibbel * 16) + right_motor_velocity);
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	88 2f       	mov	r24, r24
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	82 95       	swap	r24
    1ccc:	92 95       	swap	r25
    1cce:	90 7f       	andi	r25, 0xF0	; 240
    1cd0:	98 27       	eor	r25, r24
    1cd2:	80 7f       	andi	r24, 0xF0	; 240
    1cd4:	98 27       	eor	r25, r24
    1cd6:	98 2f       	mov	r25, r24
    1cd8:	80 91 29 02 	lds	r24, 0x0229
    1cdc:	89 0f       	add	r24, r25
    1cde:	80 93 29 02 	sts	0x0229, r24
 if(right_motor_velocity > 0xFF)
 {
 right_motor_velocity = 0xFF;
 }
 OCR5BL = right_motor_velocity;
    1ce2:	ea e2       	ldi	r30, 0x2A	; 42
    1ce4:	f1 e0       	ldi	r31, 0x01	; 1
    1ce6:	80 91 29 02 	lds	r24, 0x0229
    1cea:	80 83       	st	Z, r24
 //right_motor_pwm_feedback = right_motor_velocity;
 }
   
 if (ser_data == 0x51) //Forward
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	81 35       	cpi	r24, 0x51	; 81
    1cf0:	11 f4       	brne	.+4      	; 0x1cf6 <__vector_25+0xca>
 {
  forward(); 
    1cf2:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <forward>
 }
 
 if (ser_data == 0x52) //Backward
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	82 35       	cpi	r24, 0x52	; 82
    1cfa:	11 f4       	brne	.+4      	; 0x1d00 <__vector_25+0xd4>
 {
  back();
    1cfc:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <back>
 }
 
 if (ser_data == 0x53) //Right
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	83 35       	cpi	r24, 0x53	; 83
    1d04:	11 f4       	brne	.+4      	; 0x1d0a <__vector_25+0xde>
 {
  right();
    1d06:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <right>
 }
 
 if (ser_data == 0x54) //Left
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	84 35       	cpi	r24, 0x54	; 84
    1d0e:	11 f4       	brne	.+4      	; 0x1d14 <__vector_25+0xe8>
 {
  left();
    1d10:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <left>
 }
 
 if (ser_data == 0x59) //Stop
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	89 35       	cpi	r24, 0x59	; 89
    1d18:	11 f4       	brne	.+4      	; 0x1d1e <__vector_25+0xf2>
 {
  stop();
    1d1a:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <stop>
 }

//_______________________Shaft encoder data__________________________

 if(ser_data == 0x72) //Lower_byte number of pulse counted
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	82 37       	cpi	r24, 0x72	; 114
    1d22:	79 f4       	brne	.+30     	; 0x1d42 <__vector_25+0x116>
 {
  left_motor_pulse_count_locked = left_motor_pulse_count;
    1d24:	80 91 2c 02 	lds	r24, 0x022C
    1d28:	90 91 2d 02 	lds	r25, 0x022D
    1d2c:	90 93 2f 02 	sts	0x022F, r25
    1d30:	80 93 2e 02 	sts	0x022E, r24
  UDR0 = left_motor_pulse_count_locked % 256;
    1d34:	e6 ec       	ldi	r30, 0xC6	; 198
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 91 2e 02 	lds	r24, 0x022E
    1d3c:	90 91 2f 02 	lds	r25, 0x022F
    1d40:	80 83       	st	Z, r24
 }
 
 if(ser_data == 0x73) //Upper_byte number of pulse counted
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	83 37       	cpi	r24, 0x73	; 115
    1d46:	49 f4       	brne	.+18     	; 0x1d5a <__vector_25+0x12e>
 {
  UDR0 = left_motor_pulse_count_locked / 256;
    1d48:	e6 ec       	ldi	r30, 0xC6	; 198
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 91 2e 02 	lds	r24, 0x022E
    1d50:	90 91 2f 02 	lds	r25, 0x022F
    1d54:	89 2f       	mov	r24, r25
    1d56:	99 27       	eor	r25, r25
    1d58:	80 83       	st	Z, r24
 }

 if(ser_data == 0x79) //Lower_byte number of pulse counted
    1d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5c:	89 37       	cpi	r24, 0x79	; 121
    1d5e:	79 f4       	brne	.+30     	; 0x1d7e <__vector_25+0x152>
 {
  right_motor_pulse_count_locked = right_motor_pulse_count;
    1d60:	80 91 30 02 	lds	r24, 0x0230
    1d64:	90 91 31 02 	lds	r25, 0x0231
    1d68:	90 93 33 02 	sts	0x0233, r25
    1d6c:	80 93 32 02 	sts	0x0232, r24
  UDR0 = right_motor_pulse_count_locked % 256;
    1d70:	e6 ec       	ldi	r30, 0xC6	; 198
    1d72:	f0 e0       	ldi	r31, 0x00	; 0
    1d74:	80 91 32 02 	lds	r24, 0x0232
    1d78:	90 91 33 02 	lds	r25, 0x0233
    1d7c:	80 83       	st	Z, r24
 }
 
 if(ser_data == 0x7A) //Upper_byte number of pulse counted
    1d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d80:	8a 37       	cpi	r24, 0x7A	; 122
    1d82:	49 f4       	brne	.+18     	; 0x1d96 <__vector_25+0x16a>
 {
  UDR0 = right_motor_pulse_count_locked / 256;
    1d84:	e6 ec       	ldi	r30, 0xC6	; 198
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	80 91 32 02 	lds	r24, 0x0232
    1d8c:	90 91 33 02 	lds	r25, 0x0233
    1d90:	89 2f       	mov	r24, r25
    1d92:	99 27       	eor	r25, r25
    1d94:	80 83       	st	Z, r24
 }
   
//_______________________Servo motors position commands________________
 if (ser_data_upper_nibbel == 0x80)
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	80 38       	cpi	r24, 0x80	; 128
    1d9a:	19 f4       	brne	.+6      	; 0x1da2 <__vector_25+0x176>
 {
  horz_servo_pos = ser_data_lower_nibbel;
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	80 93 2a 02 	sts	0x022A, r24
 }
 
 if (ser_data_upper_nibbel == 0x90)
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	80 39       	cpi	r24, 0x90	; 144
    1da6:	29 f5       	brne	.+74     	; 0x1df2 <__vector_25+0x1c6>
 {
  horz_servo_pos = ((ser_data_lower_nibbel * 16) + horz_servo_pos);
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	88 2f       	mov	r24, r24
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	82 95       	swap	r24
    1db0:	92 95       	swap	r25
    1db2:	90 7f       	andi	r25, 0xF0	; 240
    1db4:	98 27       	eor	r25, r24
    1db6:	80 7f       	andi	r24, 0xF0	; 240
    1db8:	98 27       	eor	r25, r24
    1dba:	98 2f       	mov	r25, r24
    1dbc:	80 91 2a 02 	lds	r24, 0x022A
    1dc0:	89 0f       	add	r24, r25
    1dc2:	80 93 2a 02 	sts	0x022A, r24
  
  if(horz_servo_pos > 0x65)
    1dc6:	80 91 2a 02 	lds	r24, 0x022A
    1dca:	86 36       	cpi	r24, 0x66	; 102
    1dcc:	18 f0       	brcs	.+6      	; 0x1dd4 <__vector_25+0x1a8>
  {
   horz_servo_pos = 0x65;
    1dce:	85 e6       	ldi	r24, 0x65	; 101
    1dd0:	80 93 2a 02 	sts	0x022A, r24
  }
 
  if(horz_servo_pos < 0x15)
    1dd4:	80 91 2a 02 	lds	r24, 0x022A
    1dd8:	85 31       	cpi	r24, 0x15	; 21
    1dda:	18 f4       	brcc	.+6      	; 0x1de2 <__vector_25+0x1b6>
  {
   horz_servo_pos = 0x15;
    1ddc:	85 e1       	ldi	r24, 0x15	; 21
    1dde:	80 93 2a 02 	sts	0x022A, r24
  }
 
  OCR1AH = 0x00;
    1de2:	e9 e8       	ldi	r30, 0x89	; 137
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	10 82       	st	Z, r1
  OCR1AL = horz_servo_pos;
    1de8:	e8 e8       	ldi	r30, 0x88	; 136
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 91 2a 02 	lds	r24, 0x022A
    1df0:	80 83       	st	Z, r24
 }
 
 if (ser_data_upper_nibbel == 0xA0)
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	80 3a       	cpi	r24, 0xA0	; 160
    1df6:	19 f4       	brne	.+6      	; 0x1dfe <__vector_25+0x1d2>
  {
   vert_servo_pos = ser_data_lower_nibbel;
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	80 93 2b 02 	sts	0x022B, r24
  }
 
  if (ser_data_upper_nibbel == 0xB0)
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	80 3b       	cpi	r24, 0xB0	; 176
    1e02:	29 f5       	brne	.+74     	; 0x1e4e <__vector_25+0x222>
  {
   vert_servo_pos = ((ser_data_lower_nibbel * 16) + vert_servo_pos);
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	82 95       	swap	r24
    1e0c:	92 95       	swap	r25
    1e0e:	90 7f       	andi	r25, 0xF0	; 240
    1e10:	98 27       	eor	r25, r24
    1e12:	80 7f       	andi	r24, 0xF0	; 240
    1e14:	98 27       	eor	r25, r24
    1e16:	98 2f       	mov	r25, r24
    1e18:	80 91 2b 02 	lds	r24, 0x022B
    1e1c:	89 0f       	add	r24, r25
    1e1e:	80 93 2b 02 	sts	0x022B, r24
 
   if(vert_servo_pos > 0x65)
    1e22:	80 91 2b 02 	lds	r24, 0x022B
    1e26:	86 36       	cpi	r24, 0x66	; 102
    1e28:	18 f0       	brcs	.+6      	; 0x1e30 <__vector_25+0x204>
   {
    vert_servo_pos = 0x65;
    1e2a:	85 e6       	ldi	r24, 0x65	; 101
    1e2c:	80 93 2b 02 	sts	0x022B, r24
   }
 
   if(vert_servo_pos < 0x15)
    1e30:	80 91 2b 02 	lds	r24, 0x022B
    1e34:	85 31       	cpi	r24, 0x15	; 21
    1e36:	18 f4       	brcc	.+6      	; 0x1e3e <__vector_25+0x212>
   {
    vert_servo_pos = 0x15;
    1e38:	85 e1       	ldi	r24, 0x15	; 21
    1e3a:	80 93 2b 02 	sts	0x022B, r24
   }
   OCR1BH = 0x00;
    1e3e:	eb e8       	ldi	r30, 0x8B	; 139
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	10 82       	st	Z, r1
   OCR1BL = vert_servo_pos;
    1e44:	ea e8       	ldi	r30, 0x8A	; 138
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 91 2b 02 	lds	r24, 0x022B
    1e4c:	80 83       	st	Z, r24
  }
 
//________________ IR PROXIMITY STATUS COMMANDS _____________________
 if (ser_data == 0xC1)       //0xC1
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	81 3c       	cpi	r24, 0xC1	; 193
    1e52:	29 f4       	brne	.+10     	; 0x1e5e <__vector_25+0x232>
 {
  UDR0 = IR1;
    1e54:	e6 ec       	ldi	r30, 0xC6	; 198
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 91 44 02 	lds	r24, 0x0244
    1e5c:	80 83       	st	Z, r24
 }
 
 if (ser_data == 0xC2)
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	82 3c       	cpi	r24, 0xC2	; 194
    1e62:	29 f4       	brne	.+10     	; 0x1e6e <__vector_25+0x242>
 {
  UDR0 = IR2;
    1e64:	e6 ec       	ldi	r30, 0xC6	; 198
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 91 38 02 	lds	r24, 0x0238
    1e6c:	80 83       	st	Z, r24
 }
 
 if (ser_data == 0xC3)
    1e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e70:	83 3c       	cpi	r24, 0xC3	; 195
    1e72:	29 f4       	brne	.+10     	; 0x1e7e <__vector_25+0x252>
 {
  UDR0 = IR3;
    1e74:	e6 ec       	ldi	r30, 0xC6	; 198
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	80 91 3d 02 	lds	r24, 0x023D
    1e7c:	80 83       	st	Z, r24
 }
 
 if (ser_data == 0xC4) 
    1e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e80:	84 3c       	cpi	r24, 0xC4	; 196
    1e82:	29 f4       	brne	.+10     	; 0x1e8e <__vector_25+0x262>
 {
  UDR0 = IR4;
    1e84:	e6 ec       	ldi	r30, 0xC6	; 198
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 91 47 02 	lds	r24, 0x0247
    1e8c:	80 83       	st	Z, r24
 }
 
 if (ser_data == 0xC5)
    1e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e90:	85 3c       	cpi	r24, 0xC5	; 197
    1e92:	29 f4       	brne	.+10     	; 0x1e9e <__vector_25+0x272>
 {
  UDR0 = IR5;
    1e94:	e6 ec       	ldi	r30, 0xC6	; 198
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 91 35 02 	lds	r24, 0x0235
    1e9c:	80 83       	st	Z, r24
 }
 
 if (ser_data == 0xC6)
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	86 3c       	cpi	r24, 0xC6	; 198
    1ea2:	29 f4       	brne	.+10     	; 0x1eae <__vector_25+0x282>
 {
  UDR0 = IR6;
    1ea4:	e6 ec       	ldi	r30, 0xC6	; 198
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 91 53 02 	lds	r24, 0x0253
    1eac:	80 83       	st	Z, r24
 }
 
 if (ser_data == 0xC7)
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	87 3c       	cpi	r24, 0xC7	; 199
    1eb2:	29 f4       	brne	.+10     	; 0x1ebe <__vector_25+0x292>
 {
  UDR0 = IR7;
    1eb4:	e6 ec       	ldi	r30, 0xC6	; 198
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 91 4a 02 	lds	r24, 0x024A
    1ebc:	80 83       	st	Z, r24
 }
 
 if (ser_data == 0xC8)      //0xC8
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	88 3c       	cpi	r24, 0xC8	; 200
    1ec2:	29 f4       	brne	.+10     	; 0x1ece <__vector_25+0x2a2>
 {
  UDR0 = IR8;
    1ec4:	e6 ec       	ldi	r30, 0xC6	; 198
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 91 40 02 	lds	r24, 0x0240
    1ecc:	80 83       	st	Z, r24
 }

//________ BATT VALUE + WHITE LINE SENSORS + SHARP SENSORS _________
 
 if (ser_data == 0x60)
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	80 36       	cpi	r24, 0x60	; 96
    1ed2:	29 f4       	brne	.+10     	; 0x1ede <__vector_25+0x2b2>
 {
   UDR0 = BATT_VALUE;
    1ed4:	e6 ec       	ldi	r30, 0xC6	; 198
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 91 49 02 	lds	r24, 0x0249
    1edc:	80 83       	st	Z, r24
 } 
 
 if (ser_data == 0x62)
    1ede:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee0:	82 36       	cpi	r24, 0x62	; 98
    1ee2:	29 f4       	brne	.+10     	; 0x1eee <__vector_25+0x2c2>
 {
  UDR0 = SHARP_3;
    1ee4:	e6 ec       	ldi	r30, 0xC6	; 198
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 91 34 02 	lds	r24, 0x0234
    1eec:	80 83       	st	Z, r24
 } 
 
 if (ser_data == 0x63)
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	83 36       	cpi	r24, 0x63	; 99
    1ef2:	29 f4       	brne	.+10     	; 0x1efe <__vector_25+0x2d2>
 {
  UDR0 = SHARP_2;
    1ef4:	e6 ec       	ldi	r30, 0xC6	; 198
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 91 4d 02 	lds	r24, 0x024D
    1efc:	80 83       	st	Z, r24
 } 
 
 if (ser_data == 0x64)
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	84 36       	cpi	r24, 0x64	; 100
    1f02:	29 f4       	brne	.+10     	; 0x1f0e <__vector_25+0x2e2>
 {
  UDR0 = WL_LEFT;
    1f04:	e6 ec       	ldi	r30, 0xC6	; 198
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 91 37 02 	lds	r24, 0x0237
    1f0c:	80 83       	st	Z, r24
 }  
 
 if (ser_data == 0x65)
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	85 36       	cpi	r24, 0x65	; 101
    1f12:	29 f4       	brne	.+10     	; 0x1f1e <__vector_25+0x2f2>
 {
  UDR0 = WL_CENTER;
    1f14:	e6 ec       	ldi	r30, 0xC6	; 198
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 91 3c 02 	lds	r24, 0x023C
    1f1c:	80 83       	st	Z, r24
 }  
 
 if (ser_data == 0x66)
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	86 36       	cpi	r24, 0x66	; 102
    1f22:	29 f4       	brne	.+10     	; 0x1f2e <__vector_25+0x302>
 {
  UDR0 = WL_RIGHT;
    1f24:	e6 ec       	ldi	r30, 0xC6	; 198
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	80 91 3b 02 	lds	r24, 0x023B
    1f2c:	80 83       	st	Z, r24
 }  
 
 if (ser_data == 0x67)
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	87 36       	cpi	r24, 0x67	; 103
    1f32:	29 f4       	brne	.+10     	; 0x1f3e <__vector_25+0x312>
 {
  UDR0 = SHARP_4;
    1f34:	e6 ec       	ldi	r30, 0xC6	; 198
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	80 91 48 02 	lds	r24, 0x0248
    1f3c:	80 83       	st	Z, r24
 }
 
 if (ser_data == 0xC9)         //0xC9
    1f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f40:	89 3c       	cpi	r24, 0xC9	; 201
    1f42:	29 f4       	brne	.+10     	; 0x1f4e <__vector_25+0x322>
 {
  UDR0 = SHARP_1;
    1f44:	e6 ec       	ldi	r30, 0xC6	; 198
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 91 52 02 	lds	r24, 0x0252
    1f4c:	80 83       	st	Z, r24
 }
 
 if (ser_data == 0xCA)		   //0xCA
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	8a 3c       	cpi	r24, 0xCA	; 202
    1f52:	29 f4       	brne	.+10     	; 0x1f5e <__vector_25+0x332>
 {
  UDR0 = SHARP_5;
    1f54:	e6 ec       	ldi	r30, 0xC6	; 198
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 91 41 02 	lds	r24, 0x0241
    1f5c:	80 83       	st	Z, r24
 }
  
//______________________Identity tag ____________________________
 if (ser_data == 0x6B)
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	8b 36       	cpi	r24, 0x6B	; 107
    1f62:	29 f4       	brne	.+10     	; 0x1f6e <__vector_25+0x342>
 {
  UDR0 = robot_id;
    1f64:	e6 ec       	ldi	r30, 0xC6	; 198
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 91 00 02 	lds	r24, 0x0200
    1f6c:	80 83       	st	Z, r24
 }

//________________  Buzzer _______________________________________
 if (ser_data == 0x69) //Turn on the buzzer
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	89 36       	cpi	r24, 0x69	; 105
    1f72:	11 f4       	brne	.+4      	; 0x1f78 <__vector_25+0x34c>
 {
  buzzer_on();
    1f74:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <buzzer_on>
 }
 
 if (ser_data == 0x6A) //Turn off the buzzer
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	8a 36       	cpi	r24, 0x6A	; 106
    1f7c:	11 f4       	brne	.+4      	; 0x1f82 <__vector_25+0x356>
 {
  buzzer_off();
    1f7e:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <buzzer_off>
 }

}
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	ff 91       	pop	r31
    1f8e:	ef 91       	pop	r30
    1f90:	bf 91       	pop	r27
    1f92:	af 91       	pop	r26
    1f94:	9f 91       	pop	r25
    1f96:	8f 91       	pop	r24
    1f98:	7f 91       	pop	r23
    1f9a:	6f 91       	pop	r22
    1f9c:	5f 91       	pop	r21
    1f9e:	4f 91       	pop	r20
    1fa0:	3f 91       	pop	r19
    1fa2:	2f 91       	pop	r18
    1fa4:	0f 90       	pop	r0
    1fa6:	00 92 5b 00 	sts	0x005B, r0
    1faa:	0f 90       	pop	r0
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	0f 90       	pop	r0
    1fb0:	1f 90       	pop	r1
    1fb2:	18 95       	reti

00001fb4 <main>:

//-------------------------------------------------------------------------------
//Main Function
//-------------------------------------------------------------------------------
int main(void)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	cd b7       	in	r28, 0x3d	; 61
    1fba:	de b7       	in	r29, 0x3e	; 62
	init_devices();
    1fbc:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <init_devices>

	lcd_cursor(1,3);
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	63 e0       	ldi	r22, 0x03	; 3
    1fc4:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	lcd_string("FB5 GUI MODE");
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	92 e0       	ldi	r25, 0x02	; 2
    1fcc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>
	lcd_cursor(2,1);
    1fd0:	82 e0       	ldi	r24, 0x02	; 2
    1fd2:	61 e0       	ldi	r22, 0x01	; 1
    1fd4:	0e 94 03 09 	call	0x1206	; 0x1206 <lcd_cursor>
	lcd_string("NEX-ROBOTICS IND");
    1fd8:	8e e0       	ldi	r24, 0x0E	; 14
    1fda:	92 e0       	ldi	r25, 0x02	; 2
    1fdc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <lcd_string>

	while(1)
	{
		sensor_data_interpretation();
    1fe0:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <sensor_data_interpretation>
    1fe4:	fd cf       	rjmp	.-6      	; 0x1fe0 <main+0x2c>

00001fe6 <__fixunssfsi>:
    1fe6:	ef 92       	push	r14
    1fe8:	ff 92       	push	r15
    1fea:	0f 93       	push	r16
    1fec:	1f 93       	push	r17
    1fee:	7b 01       	movw	r14, r22
    1ff0:	8c 01       	movw	r16, r24
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e0       	ldi	r20, 0x00	; 0
    1ff8:	5f e4       	ldi	r21, 0x4F	; 79
    1ffa:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__gesf2>
    1ffe:	88 23       	and	r24, r24
    2000:	8c f0       	brlt	.+34     	; 0x2024 <__fixunssfsi+0x3e>
    2002:	c8 01       	movw	r24, r16
    2004:	b7 01       	movw	r22, r14
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	30 e0       	ldi	r19, 0x00	; 0
    200a:	40 e0       	ldi	r20, 0x00	; 0
    200c:	5f e4       	ldi	r21, 0x4F	; 79
    200e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__subsf3>
    2012:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__fixsfsi>
    2016:	9b 01       	movw	r18, r22
    2018:	ac 01       	movw	r20, r24
    201a:	20 50       	subi	r18, 0x00	; 0
    201c:	30 40       	sbci	r19, 0x00	; 0
    201e:	40 40       	sbci	r20, 0x00	; 0
    2020:	50 48       	sbci	r21, 0x80	; 128
    2022:	06 c0       	rjmp	.+12     	; 0x2030 <__fixunssfsi+0x4a>
    2024:	c8 01       	movw	r24, r16
    2026:	b7 01       	movw	r22, r14
    2028:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__fixsfsi>
    202c:	9b 01       	movw	r18, r22
    202e:	ac 01       	movw	r20, r24
    2030:	b9 01       	movw	r22, r18
    2032:	ca 01       	movw	r24, r20
    2034:	1f 91       	pop	r17
    2036:	0f 91       	pop	r16
    2038:	ff 90       	pop	r15
    203a:	ef 90       	pop	r14
    203c:	08 95       	ret

0000203e <_fpadd_parts>:
    203e:	a0 e0       	ldi	r26, 0x00	; 0
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	e5 e2       	ldi	r30, 0x25	; 37
    2044:	f0 e1       	ldi	r31, 0x10	; 16
    2046:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__prologue_saves__>
    204a:	dc 01       	movw	r26, r24
    204c:	2b 01       	movw	r4, r22
    204e:	fa 01       	movw	r30, r20
    2050:	9c 91       	ld	r25, X
    2052:	92 30       	cpi	r25, 0x02	; 2
    2054:	08 f4       	brcc	.+2      	; 0x2058 <_fpadd_parts+0x1a>
    2056:	39 c1       	rjmp	.+626    	; 0x22ca <__stack+0xcb>
    2058:	eb 01       	movw	r28, r22
    205a:	88 81       	ld	r24, Y
    205c:	82 30       	cpi	r24, 0x02	; 2
    205e:	08 f4       	brcc	.+2      	; 0x2062 <_fpadd_parts+0x24>
    2060:	33 c1       	rjmp	.+614    	; 0x22c8 <__stack+0xc9>
    2062:	94 30       	cpi	r25, 0x04	; 4
    2064:	69 f4       	brne	.+26     	; 0x2080 <_fpadd_parts+0x42>
    2066:	84 30       	cpi	r24, 0x04	; 4
    2068:	09 f0       	breq	.+2      	; 0x206c <_fpadd_parts+0x2e>
    206a:	2f c1       	rjmp	.+606    	; 0x22ca <__stack+0xcb>
    206c:	11 96       	adiw	r26, 0x01	; 1
    206e:	9c 91       	ld	r25, X
    2070:	11 97       	sbiw	r26, 0x01	; 1
    2072:	89 81       	ldd	r24, Y+1	; 0x01
    2074:	98 17       	cp	r25, r24
    2076:	09 f4       	brne	.+2      	; 0x207a <_fpadd_parts+0x3c>
    2078:	28 c1       	rjmp	.+592    	; 0x22ca <__stack+0xcb>
    207a:	af e1       	ldi	r26, 0x1F	; 31
    207c:	b2 e0       	ldi	r27, 0x02	; 2
    207e:	25 c1       	rjmp	.+586    	; 0x22ca <__stack+0xcb>
    2080:	84 30       	cpi	r24, 0x04	; 4
    2082:	09 f4       	brne	.+2      	; 0x2086 <_fpadd_parts+0x48>
    2084:	21 c1       	rjmp	.+578    	; 0x22c8 <__stack+0xc9>
    2086:	82 30       	cpi	r24, 0x02	; 2
    2088:	a9 f4       	brne	.+42     	; 0x20b4 <_fpadd_parts+0x76>
    208a:	92 30       	cpi	r25, 0x02	; 2
    208c:	09 f0       	breq	.+2      	; 0x2090 <_fpadd_parts+0x52>
    208e:	1d c1       	rjmp	.+570    	; 0x22ca <__stack+0xcb>
    2090:	9a 01       	movw	r18, r20
    2092:	ad 01       	movw	r20, r26
    2094:	88 e0       	ldi	r24, 0x08	; 8
    2096:	ea 01       	movw	r28, r20
    2098:	09 90       	ld	r0, Y+
    209a:	ae 01       	movw	r20, r28
    209c:	e9 01       	movw	r28, r18
    209e:	09 92       	st	Y+, r0
    20a0:	9e 01       	movw	r18, r28
    20a2:	81 50       	subi	r24, 0x01	; 1
    20a4:	c1 f7       	brne	.-16     	; 0x2096 <_fpadd_parts+0x58>
    20a6:	e2 01       	movw	r28, r4
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	11 96       	adiw	r26, 0x01	; 1
    20ac:	9c 91       	ld	r25, X
    20ae:	89 23       	and	r24, r25
    20b0:	81 83       	std	Z+1, r24	; 0x01
    20b2:	08 c1       	rjmp	.+528    	; 0x22c4 <__stack+0xc5>
    20b4:	92 30       	cpi	r25, 0x02	; 2
    20b6:	09 f4       	brne	.+2      	; 0x20ba <_fpadd_parts+0x7c>
    20b8:	07 c1       	rjmp	.+526    	; 0x22c8 <__stack+0xc9>
    20ba:	12 96       	adiw	r26, 0x02	; 2
    20bc:	2d 90       	ld	r2, X+
    20be:	3c 90       	ld	r3, X
    20c0:	13 97       	sbiw	r26, 0x03	; 3
    20c2:	eb 01       	movw	r28, r22
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	9b 81       	ldd	r25, Y+3	; 0x03
    20c8:	14 96       	adiw	r26, 0x04	; 4
    20ca:	ad 90       	ld	r10, X+
    20cc:	bd 90       	ld	r11, X+
    20ce:	cd 90       	ld	r12, X+
    20d0:	dc 90       	ld	r13, X
    20d2:	17 97       	sbiw	r26, 0x07	; 7
    20d4:	ec 80       	ldd	r14, Y+4	; 0x04
    20d6:	fd 80       	ldd	r15, Y+5	; 0x05
    20d8:	0e 81       	ldd	r16, Y+6	; 0x06
    20da:	1f 81       	ldd	r17, Y+7	; 0x07
    20dc:	91 01       	movw	r18, r2
    20de:	28 1b       	sub	r18, r24
    20e0:	39 0b       	sbc	r19, r25
    20e2:	b9 01       	movw	r22, r18
    20e4:	37 ff       	sbrs	r19, 7
    20e6:	04 c0       	rjmp	.+8      	; 0x20f0 <_fpadd_parts+0xb2>
    20e8:	66 27       	eor	r22, r22
    20ea:	77 27       	eor	r23, r23
    20ec:	62 1b       	sub	r22, r18
    20ee:	73 0b       	sbc	r23, r19
    20f0:	60 32       	cpi	r22, 0x20	; 32
    20f2:	71 05       	cpc	r23, r1
    20f4:	0c f0       	brlt	.+2      	; 0x20f8 <_fpadd_parts+0xba>
    20f6:	61 c0       	rjmp	.+194    	; 0x21ba <_fpadd_parts+0x17c>
    20f8:	12 16       	cp	r1, r18
    20fa:	13 06       	cpc	r1, r19
    20fc:	6c f5       	brge	.+90     	; 0x2158 <_fpadd_parts+0x11a>
    20fe:	37 01       	movw	r6, r14
    2100:	48 01       	movw	r8, r16
    2102:	06 2e       	mov	r0, r22
    2104:	04 c0       	rjmp	.+8      	; 0x210e <_fpadd_parts+0xd0>
    2106:	96 94       	lsr	r9
    2108:	87 94       	ror	r8
    210a:	77 94       	ror	r7
    210c:	67 94       	ror	r6
    210e:	0a 94       	dec	r0
    2110:	d2 f7       	brpl	.-12     	; 0x2106 <_fpadd_parts+0xc8>
    2112:	21 e0       	ldi	r18, 0x01	; 1
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	50 e0       	ldi	r21, 0x00	; 0
    211a:	04 c0       	rjmp	.+8      	; 0x2124 <_fpadd_parts+0xe6>
    211c:	22 0f       	add	r18, r18
    211e:	33 1f       	adc	r19, r19
    2120:	44 1f       	adc	r20, r20
    2122:	55 1f       	adc	r21, r21
    2124:	6a 95       	dec	r22
    2126:	d2 f7       	brpl	.-12     	; 0x211c <_fpadd_parts+0xde>
    2128:	21 50       	subi	r18, 0x01	; 1
    212a:	30 40       	sbci	r19, 0x00	; 0
    212c:	40 40       	sbci	r20, 0x00	; 0
    212e:	50 40       	sbci	r21, 0x00	; 0
    2130:	2e 21       	and	r18, r14
    2132:	3f 21       	and	r19, r15
    2134:	40 23       	and	r20, r16
    2136:	51 23       	and	r21, r17
    2138:	21 15       	cp	r18, r1
    213a:	31 05       	cpc	r19, r1
    213c:	41 05       	cpc	r20, r1
    213e:	51 05       	cpc	r21, r1
    2140:	21 f0       	breq	.+8      	; 0x214a <_fpadd_parts+0x10c>
    2142:	21 e0       	ldi	r18, 0x01	; 1
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e0       	ldi	r20, 0x00	; 0
    2148:	50 e0       	ldi	r21, 0x00	; 0
    214a:	79 01       	movw	r14, r18
    214c:	8a 01       	movw	r16, r20
    214e:	e6 28       	or	r14, r6
    2150:	f7 28       	or	r15, r7
    2152:	08 29       	or	r16, r8
    2154:	19 29       	or	r17, r9
    2156:	3c c0       	rjmp	.+120    	; 0x21d0 <_fpadd_parts+0x192>
    2158:	23 2b       	or	r18, r19
    215a:	d1 f1       	breq	.+116    	; 0x21d0 <_fpadd_parts+0x192>
    215c:	26 0e       	add	r2, r22
    215e:	37 1e       	adc	r3, r23
    2160:	35 01       	movw	r6, r10
    2162:	46 01       	movw	r8, r12
    2164:	06 2e       	mov	r0, r22
    2166:	04 c0       	rjmp	.+8      	; 0x2170 <_fpadd_parts+0x132>
    2168:	96 94       	lsr	r9
    216a:	87 94       	ror	r8
    216c:	77 94       	ror	r7
    216e:	67 94       	ror	r6
    2170:	0a 94       	dec	r0
    2172:	d2 f7       	brpl	.-12     	; 0x2168 <_fpadd_parts+0x12a>
    2174:	21 e0       	ldi	r18, 0x01	; 1
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e0       	ldi	r20, 0x00	; 0
    217a:	50 e0       	ldi	r21, 0x00	; 0
    217c:	04 c0       	rjmp	.+8      	; 0x2186 <_fpadd_parts+0x148>
    217e:	22 0f       	add	r18, r18
    2180:	33 1f       	adc	r19, r19
    2182:	44 1f       	adc	r20, r20
    2184:	55 1f       	adc	r21, r21
    2186:	6a 95       	dec	r22
    2188:	d2 f7       	brpl	.-12     	; 0x217e <_fpadd_parts+0x140>
    218a:	21 50       	subi	r18, 0x01	; 1
    218c:	30 40       	sbci	r19, 0x00	; 0
    218e:	40 40       	sbci	r20, 0x00	; 0
    2190:	50 40       	sbci	r21, 0x00	; 0
    2192:	2a 21       	and	r18, r10
    2194:	3b 21       	and	r19, r11
    2196:	4c 21       	and	r20, r12
    2198:	5d 21       	and	r21, r13
    219a:	21 15       	cp	r18, r1
    219c:	31 05       	cpc	r19, r1
    219e:	41 05       	cpc	r20, r1
    21a0:	51 05       	cpc	r21, r1
    21a2:	21 f0       	breq	.+8      	; 0x21ac <_fpadd_parts+0x16e>
    21a4:	21 e0       	ldi	r18, 0x01	; 1
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	50 e0       	ldi	r21, 0x00	; 0
    21ac:	59 01       	movw	r10, r18
    21ae:	6a 01       	movw	r12, r20
    21b0:	a6 28       	or	r10, r6
    21b2:	b7 28       	or	r11, r7
    21b4:	c8 28       	or	r12, r8
    21b6:	d9 28       	or	r13, r9
    21b8:	0b c0       	rjmp	.+22     	; 0x21d0 <_fpadd_parts+0x192>
    21ba:	82 15       	cp	r24, r2
    21bc:	93 05       	cpc	r25, r3
    21be:	2c f0       	brlt	.+10     	; 0x21ca <_fpadd_parts+0x18c>
    21c0:	1c 01       	movw	r2, r24
    21c2:	aa 24       	eor	r10, r10
    21c4:	bb 24       	eor	r11, r11
    21c6:	65 01       	movw	r12, r10
    21c8:	03 c0       	rjmp	.+6      	; 0x21d0 <_fpadd_parts+0x192>
    21ca:	ee 24       	eor	r14, r14
    21cc:	ff 24       	eor	r15, r15
    21ce:	87 01       	movw	r16, r14
    21d0:	11 96       	adiw	r26, 0x01	; 1
    21d2:	9c 91       	ld	r25, X
    21d4:	d2 01       	movw	r26, r4
    21d6:	11 96       	adiw	r26, 0x01	; 1
    21d8:	8c 91       	ld	r24, X
    21da:	98 17       	cp	r25, r24
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <_fpadd_parts+0x1a2>
    21de:	45 c0       	rjmp	.+138    	; 0x226a <__stack+0x6b>
    21e0:	99 23       	and	r25, r25
    21e2:	39 f0       	breq	.+14     	; 0x21f2 <_fpadd_parts+0x1b4>
    21e4:	a8 01       	movw	r20, r16
    21e6:	97 01       	movw	r18, r14
    21e8:	2a 19       	sub	r18, r10
    21ea:	3b 09       	sbc	r19, r11
    21ec:	4c 09       	sbc	r20, r12
    21ee:	5d 09       	sbc	r21, r13
    21f0:	06 c0       	rjmp	.+12     	; 0x21fe <_fpadd_parts+0x1c0>
    21f2:	a6 01       	movw	r20, r12
    21f4:	95 01       	movw	r18, r10
    21f6:	2e 19       	sub	r18, r14
    21f8:	3f 09       	sbc	r19, r15
    21fa:	40 0b       	sbc	r20, r16
    21fc:	51 0b       	sbc	r21, r17
    21fe:	57 fd       	sbrc	r21, 7
    2200:	08 c0       	rjmp	.+16     	; 0x2212 <__stack+0x13>
    2202:	11 82       	std	Z+1, r1	; 0x01
    2204:	33 82       	std	Z+3, r3	; 0x03
    2206:	22 82       	std	Z+2, r2	; 0x02
    2208:	24 83       	std	Z+4, r18	; 0x04
    220a:	35 83       	std	Z+5, r19	; 0x05
    220c:	46 83       	std	Z+6, r20	; 0x06
    220e:	57 83       	std	Z+7, r21	; 0x07
    2210:	1d c0       	rjmp	.+58     	; 0x224c <__stack+0x4d>
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	81 83       	std	Z+1, r24	; 0x01
    2216:	33 82       	std	Z+3, r3	; 0x03
    2218:	22 82       	std	Z+2, r2	; 0x02
    221a:	88 27       	eor	r24, r24
    221c:	99 27       	eor	r25, r25
    221e:	dc 01       	movw	r26, r24
    2220:	82 1b       	sub	r24, r18
    2222:	93 0b       	sbc	r25, r19
    2224:	a4 0b       	sbc	r26, r20
    2226:	b5 0b       	sbc	r27, r21
    2228:	84 83       	std	Z+4, r24	; 0x04
    222a:	95 83       	std	Z+5, r25	; 0x05
    222c:	a6 83       	std	Z+6, r26	; 0x06
    222e:	b7 83       	std	Z+7, r27	; 0x07
    2230:	0d c0       	rjmp	.+26     	; 0x224c <__stack+0x4d>
    2232:	22 0f       	add	r18, r18
    2234:	33 1f       	adc	r19, r19
    2236:	44 1f       	adc	r20, r20
    2238:	55 1f       	adc	r21, r21
    223a:	24 83       	std	Z+4, r18	; 0x04
    223c:	35 83       	std	Z+5, r19	; 0x05
    223e:	46 83       	std	Z+6, r20	; 0x06
    2240:	57 83       	std	Z+7, r21	; 0x07
    2242:	82 81       	ldd	r24, Z+2	; 0x02
    2244:	93 81       	ldd	r25, Z+3	; 0x03
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	93 83       	std	Z+3, r25	; 0x03
    224a:	82 83       	std	Z+2, r24	; 0x02
    224c:	24 81       	ldd	r18, Z+4	; 0x04
    224e:	35 81       	ldd	r19, Z+5	; 0x05
    2250:	46 81       	ldd	r20, Z+6	; 0x06
    2252:	57 81       	ldd	r21, Z+7	; 0x07
    2254:	da 01       	movw	r26, r20
    2256:	c9 01       	movw	r24, r18
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	a1 09       	sbc	r26, r1
    225c:	b1 09       	sbc	r27, r1
    225e:	8f 5f       	subi	r24, 0xFF	; 255
    2260:	9f 4f       	sbci	r25, 0xFF	; 255
    2262:	af 4f       	sbci	r26, 0xFF	; 255
    2264:	bf 43       	sbci	r27, 0x3F	; 63
    2266:	28 f3       	brcs	.-54     	; 0x2232 <__stack+0x33>
    2268:	0b c0       	rjmp	.+22     	; 0x2280 <__stack+0x81>
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	33 82       	std	Z+3, r3	; 0x03
    226e:	22 82       	std	Z+2, r2	; 0x02
    2270:	ea 0c       	add	r14, r10
    2272:	fb 1c       	adc	r15, r11
    2274:	0c 1d       	adc	r16, r12
    2276:	1d 1d       	adc	r17, r13
    2278:	e4 82       	std	Z+4, r14	; 0x04
    227a:	f5 82       	std	Z+5, r15	; 0x05
    227c:	06 83       	std	Z+6, r16	; 0x06
    227e:	17 83       	std	Z+7, r17	; 0x07
    2280:	83 e0       	ldi	r24, 0x03	; 3
    2282:	80 83       	st	Z, r24
    2284:	24 81       	ldd	r18, Z+4	; 0x04
    2286:	35 81       	ldd	r19, Z+5	; 0x05
    2288:	46 81       	ldd	r20, Z+6	; 0x06
    228a:	57 81       	ldd	r21, Z+7	; 0x07
    228c:	57 ff       	sbrs	r21, 7
    228e:	1a c0       	rjmp	.+52     	; 0x22c4 <__stack+0xc5>
    2290:	c9 01       	movw	r24, r18
    2292:	aa 27       	eor	r26, r26
    2294:	97 fd       	sbrc	r25, 7
    2296:	a0 95       	com	r26
    2298:	ba 2f       	mov	r27, r26
    229a:	81 70       	andi	r24, 0x01	; 1
    229c:	90 70       	andi	r25, 0x00	; 0
    229e:	a0 70       	andi	r26, 0x00	; 0
    22a0:	b0 70       	andi	r27, 0x00	; 0
    22a2:	56 95       	lsr	r21
    22a4:	47 95       	ror	r20
    22a6:	37 95       	ror	r19
    22a8:	27 95       	ror	r18
    22aa:	82 2b       	or	r24, r18
    22ac:	93 2b       	or	r25, r19
    22ae:	a4 2b       	or	r26, r20
    22b0:	b5 2b       	or	r27, r21
    22b2:	84 83       	std	Z+4, r24	; 0x04
    22b4:	95 83       	std	Z+5, r25	; 0x05
    22b6:	a6 83       	std	Z+6, r26	; 0x06
    22b8:	b7 83       	std	Z+7, r27	; 0x07
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	93 81       	ldd	r25, Z+3	; 0x03
    22be:	01 96       	adiw	r24, 0x01	; 1
    22c0:	93 83       	std	Z+3, r25	; 0x03
    22c2:	82 83       	std	Z+2, r24	; 0x02
    22c4:	df 01       	movw	r26, r30
    22c6:	01 c0       	rjmp	.+2      	; 0x22ca <__stack+0xcb>
    22c8:	d2 01       	movw	r26, r4
    22ca:	cd 01       	movw	r24, r26
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	e2 e1       	ldi	r30, 0x12	; 18
    22d2:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <__epilogue_restores__>

000022d6 <__subsf3>:
    22d6:	a0 e2       	ldi	r26, 0x20	; 32
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	e1 e7       	ldi	r30, 0x71	; 113
    22dc:	f1 e1       	ldi	r31, 0x11	; 17
    22de:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__prologue_saves__+0x18>
    22e2:	69 83       	std	Y+1, r22	; 0x01
    22e4:	7a 83       	std	Y+2, r23	; 0x02
    22e6:	8b 83       	std	Y+3, r24	; 0x03
    22e8:	9c 83       	std	Y+4, r25	; 0x04
    22ea:	2d 83       	std	Y+5, r18	; 0x05
    22ec:	3e 83       	std	Y+6, r19	; 0x06
    22ee:	4f 83       	std	Y+7, r20	; 0x07
    22f0:	58 87       	std	Y+8, r21	; 0x08
    22f2:	e9 e0       	ldi	r30, 0x09	; 9
    22f4:	ee 2e       	mov	r14, r30
    22f6:	f1 2c       	mov	r15, r1
    22f8:	ec 0e       	add	r14, r28
    22fa:	fd 1e       	adc	r15, r29
    22fc:	ce 01       	movw	r24, r28
    22fe:	01 96       	adiw	r24, 0x01	; 1
    2300:	b7 01       	movw	r22, r14
    2302:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__unpack_f>
    2306:	8e 01       	movw	r16, r28
    2308:	0f 5e       	subi	r16, 0xEF	; 239
    230a:	1f 4f       	sbci	r17, 0xFF	; 255
    230c:	ce 01       	movw	r24, r28
    230e:	05 96       	adiw	r24, 0x05	; 5
    2310:	b8 01       	movw	r22, r16
    2312:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__unpack_f>
    2316:	8a 89       	ldd	r24, Y+18	; 0x12
    2318:	91 e0       	ldi	r25, 0x01	; 1
    231a:	89 27       	eor	r24, r25
    231c:	8a 8b       	std	Y+18, r24	; 0x12
    231e:	c7 01       	movw	r24, r14
    2320:	b8 01       	movw	r22, r16
    2322:	ae 01       	movw	r20, r28
    2324:	47 5e       	subi	r20, 0xE7	; 231
    2326:	5f 4f       	sbci	r21, 0xFF	; 255
    2328:	0e 94 1f 10 	call	0x203e	; 0x203e <_fpadd_parts>
    232c:	0e 94 a7 13 	call	0x274e	; 0x274e <__pack_f>
    2330:	a0 96       	adiw	r28, 0x20	; 32
    2332:	e6 e0       	ldi	r30, 0x06	; 6
    2334:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <__epilogue_restores__+0x18>

00002338 <__addsf3>:
    2338:	a0 e2       	ldi	r26, 0x20	; 32
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e2 ea       	ldi	r30, 0xA2	; 162
    233e:	f1 e1       	ldi	r31, 0x11	; 17
    2340:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__prologue_saves__+0x18>
    2344:	69 83       	std	Y+1, r22	; 0x01
    2346:	7a 83       	std	Y+2, r23	; 0x02
    2348:	8b 83       	std	Y+3, r24	; 0x03
    234a:	9c 83       	std	Y+4, r25	; 0x04
    234c:	2d 83       	std	Y+5, r18	; 0x05
    234e:	3e 83       	std	Y+6, r19	; 0x06
    2350:	4f 83       	std	Y+7, r20	; 0x07
    2352:	58 87       	std	Y+8, r21	; 0x08
    2354:	f9 e0       	ldi	r31, 0x09	; 9
    2356:	ef 2e       	mov	r14, r31
    2358:	f1 2c       	mov	r15, r1
    235a:	ec 0e       	add	r14, r28
    235c:	fd 1e       	adc	r15, r29
    235e:	ce 01       	movw	r24, r28
    2360:	01 96       	adiw	r24, 0x01	; 1
    2362:	b7 01       	movw	r22, r14
    2364:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__unpack_f>
    2368:	8e 01       	movw	r16, r28
    236a:	0f 5e       	subi	r16, 0xEF	; 239
    236c:	1f 4f       	sbci	r17, 0xFF	; 255
    236e:	ce 01       	movw	r24, r28
    2370:	05 96       	adiw	r24, 0x05	; 5
    2372:	b8 01       	movw	r22, r16
    2374:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__unpack_f>
    2378:	c7 01       	movw	r24, r14
    237a:	b8 01       	movw	r22, r16
    237c:	ae 01       	movw	r20, r28
    237e:	47 5e       	subi	r20, 0xE7	; 231
    2380:	5f 4f       	sbci	r21, 0xFF	; 255
    2382:	0e 94 1f 10 	call	0x203e	; 0x203e <_fpadd_parts>
    2386:	0e 94 a7 13 	call	0x274e	; 0x274e <__pack_f>
    238a:	a0 96       	adiw	r28, 0x20	; 32
    238c:	e6 e0       	ldi	r30, 0x06	; 6
    238e:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <__epilogue_restores__+0x18>

00002392 <__mulsf3>:
    2392:	a0 e2       	ldi	r26, 0x20	; 32
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	ef ec       	ldi	r30, 0xCF	; 207
    2398:	f1 e1       	ldi	r31, 0x11	; 17
    239a:	0c 94 61 15 	jmp	0x2ac2	; 0x2ac2 <__prologue_saves__>
    239e:	69 83       	std	Y+1, r22	; 0x01
    23a0:	7a 83       	std	Y+2, r23	; 0x02
    23a2:	8b 83       	std	Y+3, r24	; 0x03
    23a4:	9c 83       	std	Y+4, r25	; 0x04
    23a6:	2d 83       	std	Y+5, r18	; 0x05
    23a8:	3e 83       	std	Y+6, r19	; 0x06
    23aa:	4f 83       	std	Y+7, r20	; 0x07
    23ac:	58 87       	std	Y+8, r21	; 0x08
    23ae:	ce 01       	movw	r24, r28
    23b0:	01 96       	adiw	r24, 0x01	; 1
    23b2:	be 01       	movw	r22, r28
    23b4:	67 5f       	subi	r22, 0xF7	; 247
    23b6:	7f 4f       	sbci	r23, 0xFF	; 255
    23b8:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__unpack_f>
    23bc:	ce 01       	movw	r24, r28
    23be:	05 96       	adiw	r24, 0x05	; 5
    23c0:	be 01       	movw	r22, r28
    23c2:	6f 5e       	subi	r22, 0xEF	; 239
    23c4:	7f 4f       	sbci	r23, 0xFF	; 255
    23c6:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__unpack_f>
    23ca:	99 85       	ldd	r25, Y+9	; 0x09
    23cc:	92 30       	cpi	r25, 0x02	; 2
    23ce:	88 f0       	brcs	.+34     	; 0x23f2 <__mulsf3+0x60>
    23d0:	89 89       	ldd	r24, Y+17	; 0x11
    23d2:	82 30       	cpi	r24, 0x02	; 2
    23d4:	c8 f0       	brcs	.+50     	; 0x2408 <__mulsf3+0x76>
    23d6:	94 30       	cpi	r25, 0x04	; 4
    23d8:	19 f4       	brne	.+6      	; 0x23e0 <__mulsf3+0x4e>
    23da:	82 30       	cpi	r24, 0x02	; 2
    23dc:	51 f4       	brne	.+20     	; 0x23f2 <__mulsf3+0x60>
    23de:	04 c0       	rjmp	.+8      	; 0x23e8 <__mulsf3+0x56>
    23e0:	84 30       	cpi	r24, 0x04	; 4
    23e2:	29 f4       	brne	.+10     	; 0x23ee <__mulsf3+0x5c>
    23e4:	92 30       	cpi	r25, 0x02	; 2
    23e6:	81 f4       	brne	.+32     	; 0x2408 <__mulsf3+0x76>
    23e8:	8f e1       	ldi	r24, 0x1F	; 31
    23ea:	92 e0       	ldi	r25, 0x02	; 2
    23ec:	c6 c0       	rjmp	.+396    	; 0x257a <__mulsf3+0x1e8>
    23ee:	92 30       	cpi	r25, 0x02	; 2
    23f0:	49 f4       	brne	.+18     	; 0x2404 <__mulsf3+0x72>
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f6:	8a 89       	ldd	r24, Y+18	; 0x12
    23f8:	98 13       	cpse	r25, r24
    23fa:	21 e0       	ldi	r18, 0x01	; 1
    23fc:	2a 87       	std	Y+10, r18	; 0x0a
    23fe:	ce 01       	movw	r24, r28
    2400:	09 96       	adiw	r24, 0x09	; 9
    2402:	bb c0       	rjmp	.+374    	; 0x257a <__mulsf3+0x1e8>
    2404:	82 30       	cpi	r24, 0x02	; 2
    2406:	49 f4       	brne	.+18     	; 0x241a <__mulsf3+0x88>
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	9a 85       	ldd	r25, Y+10	; 0x0a
    240c:	8a 89       	ldd	r24, Y+18	; 0x12
    240e:	98 13       	cpse	r25, r24
    2410:	21 e0       	ldi	r18, 0x01	; 1
    2412:	2a 8b       	std	Y+18, r18	; 0x12
    2414:	ce 01       	movw	r24, r28
    2416:	41 96       	adiw	r24, 0x11	; 17
    2418:	b0 c0       	rjmp	.+352    	; 0x257a <__mulsf3+0x1e8>
    241a:	2d 84       	ldd	r2, Y+13	; 0x0d
    241c:	3e 84       	ldd	r3, Y+14	; 0x0e
    241e:	4f 84       	ldd	r4, Y+15	; 0x0f
    2420:	58 88       	ldd	r5, Y+16	; 0x10
    2422:	6d 88       	ldd	r6, Y+21	; 0x15
    2424:	7e 88       	ldd	r7, Y+22	; 0x16
    2426:	8f 88       	ldd	r8, Y+23	; 0x17
    2428:	98 8c       	ldd	r9, Y+24	; 0x18
    242a:	ee 24       	eor	r14, r14
    242c:	ff 24       	eor	r15, r15
    242e:	87 01       	movw	r16, r14
    2430:	aa 24       	eor	r10, r10
    2432:	bb 24       	eor	r11, r11
    2434:	65 01       	movw	r12, r10
    2436:	40 e0       	ldi	r20, 0x00	; 0
    2438:	50 e0       	ldi	r21, 0x00	; 0
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	70 e0       	ldi	r23, 0x00	; 0
    243e:	e0 e0       	ldi	r30, 0x00	; 0
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	c1 01       	movw	r24, r2
    2444:	81 70       	andi	r24, 0x01	; 1
    2446:	90 70       	andi	r25, 0x00	; 0
    2448:	89 2b       	or	r24, r25
    244a:	e9 f0       	breq	.+58     	; 0x2486 <__mulsf3+0xf4>
    244c:	e6 0c       	add	r14, r6
    244e:	f7 1c       	adc	r15, r7
    2450:	08 1d       	adc	r16, r8
    2452:	19 1d       	adc	r17, r9
    2454:	9a 01       	movw	r18, r20
    2456:	ab 01       	movw	r20, r22
    2458:	2a 0d       	add	r18, r10
    245a:	3b 1d       	adc	r19, r11
    245c:	4c 1d       	adc	r20, r12
    245e:	5d 1d       	adc	r21, r13
    2460:	80 e0       	ldi	r24, 0x00	; 0
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	a0 e0       	ldi	r26, 0x00	; 0
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e6 14       	cp	r14, r6
    246a:	f7 04       	cpc	r15, r7
    246c:	08 05       	cpc	r16, r8
    246e:	19 05       	cpc	r17, r9
    2470:	20 f4       	brcc	.+8      	; 0x247a <__mulsf3+0xe8>
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	a0 e0       	ldi	r26, 0x00	; 0
    2478:	b0 e0       	ldi	r27, 0x00	; 0
    247a:	ba 01       	movw	r22, r20
    247c:	a9 01       	movw	r20, r18
    247e:	48 0f       	add	r20, r24
    2480:	59 1f       	adc	r21, r25
    2482:	6a 1f       	adc	r22, r26
    2484:	7b 1f       	adc	r23, r27
    2486:	aa 0c       	add	r10, r10
    2488:	bb 1c       	adc	r11, r11
    248a:	cc 1c       	adc	r12, r12
    248c:	dd 1c       	adc	r13, r13
    248e:	97 fe       	sbrs	r9, 7
    2490:	08 c0       	rjmp	.+16     	; 0x24a2 <__mulsf3+0x110>
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	a0 e0       	ldi	r26, 0x00	; 0
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	a8 2a       	or	r10, r24
    249c:	b9 2a       	or	r11, r25
    249e:	ca 2a       	or	r12, r26
    24a0:	db 2a       	or	r13, r27
    24a2:	31 96       	adiw	r30, 0x01	; 1
    24a4:	e0 32       	cpi	r30, 0x20	; 32
    24a6:	f1 05       	cpc	r31, r1
    24a8:	49 f0       	breq	.+18     	; 0x24bc <__mulsf3+0x12a>
    24aa:	66 0c       	add	r6, r6
    24ac:	77 1c       	adc	r7, r7
    24ae:	88 1c       	adc	r8, r8
    24b0:	99 1c       	adc	r9, r9
    24b2:	56 94       	lsr	r5
    24b4:	47 94       	ror	r4
    24b6:	37 94       	ror	r3
    24b8:	27 94       	ror	r2
    24ba:	c3 cf       	rjmp	.-122    	; 0x2442 <__mulsf3+0xb0>
    24bc:	fa 85       	ldd	r31, Y+10	; 0x0a
    24be:	ea 89       	ldd	r30, Y+18	; 0x12
    24c0:	2b 89       	ldd	r18, Y+19	; 0x13
    24c2:	3c 89       	ldd	r19, Y+20	; 0x14
    24c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    24c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    24c8:	28 0f       	add	r18, r24
    24ca:	39 1f       	adc	r19, r25
    24cc:	2e 5f       	subi	r18, 0xFE	; 254
    24ce:	3f 4f       	sbci	r19, 0xFF	; 255
    24d0:	17 c0       	rjmp	.+46     	; 0x2500 <__mulsf3+0x16e>
    24d2:	ca 01       	movw	r24, r20
    24d4:	81 70       	andi	r24, 0x01	; 1
    24d6:	90 70       	andi	r25, 0x00	; 0
    24d8:	89 2b       	or	r24, r25
    24da:	61 f0       	breq	.+24     	; 0x24f4 <__mulsf3+0x162>
    24dc:	16 95       	lsr	r17
    24de:	07 95       	ror	r16
    24e0:	f7 94       	ror	r15
    24e2:	e7 94       	ror	r14
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	90 e0       	ldi	r25, 0x00	; 0
    24e8:	a0 e0       	ldi	r26, 0x00	; 0
    24ea:	b0 e8       	ldi	r27, 0x80	; 128
    24ec:	e8 2a       	or	r14, r24
    24ee:	f9 2a       	or	r15, r25
    24f0:	0a 2b       	or	r16, r26
    24f2:	1b 2b       	or	r17, r27
    24f4:	76 95       	lsr	r23
    24f6:	67 95       	ror	r22
    24f8:	57 95       	ror	r21
    24fa:	47 95       	ror	r20
    24fc:	2f 5f       	subi	r18, 0xFF	; 255
    24fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2500:	77 fd       	sbrc	r23, 7
    2502:	e7 cf       	rjmp	.-50     	; 0x24d2 <__mulsf3+0x140>
    2504:	0c c0       	rjmp	.+24     	; 0x251e <__mulsf3+0x18c>
    2506:	44 0f       	add	r20, r20
    2508:	55 1f       	adc	r21, r21
    250a:	66 1f       	adc	r22, r22
    250c:	77 1f       	adc	r23, r23
    250e:	17 fd       	sbrc	r17, 7
    2510:	41 60       	ori	r20, 0x01	; 1
    2512:	ee 0c       	add	r14, r14
    2514:	ff 1c       	adc	r15, r15
    2516:	00 1f       	adc	r16, r16
    2518:	11 1f       	adc	r17, r17
    251a:	21 50       	subi	r18, 0x01	; 1
    251c:	30 40       	sbci	r19, 0x00	; 0
    251e:	40 30       	cpi	r20, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	59 07       	cpc	r21, r25
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	69 07       	cpc	r22, r25
    2528:	90 e4       	ldi	r25, 0x40	; 64
    252a:	79 07       	cpc	r23, r25
    252c:	60 f3       	brcs	.-40     	; 0x2506 <__mulsf3+0x174>
    252e:	2b 8f       	std	Y+27, r18	; 0x1b
    2530:	3c 8f       	std	Y+28, r19	; 0x1c
    2532:	db 01       	movw	r26, r22
    2534:	ca 01       	movw	r24, r20
    2536:	8f 77       	andi	r24, 0x7F	; 127
    2538:	90 70       	andi	r25, 0x00	; 0
    253a:	a0 70       	andi	r26, 0x00	; 0
    253c:	b0 70       	andi	r27, 0x00	; 0
    253e:	80 34       	cpi	r24, 0x40	; 64
    2540:	91 05       	cpc	r25, r1
    2542:	a1 05       	cpc	r26, r1
    2544:	b1 05       	cpc	r27, r1
    2546:	61 f4       	brne	.+24     	; 0x2560 <__mulsf3+0x1ce>
    2548:	47 fd       	sbrc	r20, 7
    254a:	0a c0       	rjmp	.+20     	; 0x2560 <__mulsf3+0x1ce>
    254c:	e1 14       	cp	r14, r1
    254e:	f1 04       	cpc	r15, r1
    2550:	01 05       	cpc	r16, r1
    2552:	11 05       	cpc	r17, r1
    2554:	29 f0       	breq	.+10     	; 0x2560 <__mulsf3+0x1ce>
    2556:	40 5c       	subi	r20, 0xC0	; 192
    2558:	5f 4f       	sbci	r21, 0xFF	; 255
    255a:	6f 4f       	sbci	r22, 0xFF	; 255
    255c:	7f 4f       	sbci	r23, 0xFF	; 255
    255e:	40 78       	andi	r20, 0x80	; 128
    2560:	1a 8e       	std	Y+26, r1	; 0x1a
    2562:	fe 17       	cp	r31, r30
    2564:	11 f0       	breq	.+4      	; 0x256a <__mulsf3+0x1d8>
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	8a 8f       	std	Y+26, r24	; 0x1a
    256a:	4d 8f       	std	Y+29, r20	; 0x1d
    256c:	5e 8f       	std	Y+30, r21	; 0x1e
    256e:	6f 8f       	std	Y+31, r22	; 0x1f
    2570:	78 a3       	std	Y+32, r23	; 0x20
    2572:	83 e0       	ldi	r24, 0x03	; 3
    2574:	89 8f       	std	Y+25, r24	; 0x19
    2576:	ce 01       	movw	r24, r28
    2578:	49 96       	adiw	r24, 0x19	; 25
    257a:	0e 94 a7 13 	call	0x274e	; 0x274e <__pack_f>
    257e:	a0 96       	adiw	r28, 0x20	; 32
    2580:	e2 e1       	ldi	r30, 0x12	; 18
    2582:	0c 94 7d 15 	jmp	0x2afa	; 0x2afa <__epilogue_restores__>

00002586 <__gtsf2>:
    2586:	a8 e1       	ldi	r26, 0x18	; 24
    2588:	b0 e0       	ldi	r27, 0x00	; 0
    258a:	e9 ec       	ldi	r30, 0xC9	; 201
    258c:	f2 e1       	ldi	r31, 0x12	; 18
    258e:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__prologue_saves__+0x18>
    2592:	69 83       	std	Y+1, r22	; 0x01
    2594:	7a 83       	std	Y+2, r23	; 0x02
    2596:	8b 83       	std	Y+3, r24	; 0x03
    2598:	9c 83       	std	Y+4, r25	; 0x04
    259a:	2d 83       	std	Y+5, r18	; 0x05
    259c:	3e 83       	std	Y+6, r19	; 0x06
    259e:	4f 83       	std	Y+7, r20	; 0x07
    25a0:	58 87       	std	Y+8, r21	; 0x08
    25a2:	89 e0       	ldi	r24, 0x09	; 9
    25a4:	e8 2e       	mov	r14, r24
    25a6:	f1 2c       	mov	r15, r1
    25a8:	ec 0e       	add	r14, r28
    25aa:	fd 1e       	adc	r15, r29
    25ac:	ce 01       	movw	r24, r28
    25ae:	01 96       	adiw	r24, 0x01	; 1
    25b0:	b7 01       	movw	r22, r14
    25b2:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__unpack_f>
    25b6:	8e 01       	movw	r16, r28
    25b8:	0f 5e       	subi	r16, 0xEF	; 239
    25ba:	1f 4f       	sbci	r17, 0xFF	; 255
    25bc:	ce 01       	movw	r24, r28
    25be:	05 96       	adiw	r24, 0x05	; 5
    25c0:	b8 01       	movw	r22, r16
    25c2:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__unpack_f>
    25c6:	89 85       	ldd	r24, Y+9	; 0x09
    25c8:	82 30       	cpi	r24, 0x02	; 2
    25ca:	40 f0       	brcs	.+16     	; 0x25dc <__gtsf2+0x56>
    25cc:	89 89       	ldd	r24, Y+17	; 0x11
    25ce:	82 30       	cpi	r24, 0x02	; 2
    25d0:	28 f0       	brcs	.+10     	; 0x25dc <__gtsf2+0x56>
    25d2:	c7 01       	movw	r24, r14
    25d4:	b8 01       	movw	r22, r16
    25d6:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__fpcmp_parts_f>
    25da:	01 c0       	rjmp	.+2      	; 0x25de <__gtsf2+0x58>
    25dc:	8f ef       	ldi	r24, 0xFF	; 255
    25de:	68 96       	adiw	r28, 0x18	; 24
    25e0:	e6 e0       	ldi	r30, 0x06	; 6
    25e2:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <__epilogue_restores__+0x18>

000025e6 <__gesf2>:
    25e6:	a8 e1       	ldi	r26, 0x18	; 24
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	e9 ef       	ldi	r30, 0xF9	; 249
    25ec:	f2 e1       	ldi	r31, 0x12	; 18
    25ee:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__prologue_saves__+0x18>
    25f2:	69 83       	std	Y+1, r22	; 0x01
    25f4:	7a 83       	std	Y+2, r23	; 0x02
    25f6:	8b 83       	std	Y+3, r24	; 0x03
    25f8:	9c 83       	std	Y+4, r25	; 0x04
    25fa:	2d 83       	std	Y+5, r18	; 0x05
    25fc:	3e 83       	std	Y+6, r19	; 0x06
    25fe:	4f 83       	std	Y+7, r20	; 0x07
    2600:	58 87       	std	Y+8, r21	; 0x08
    2602:	89 e0       	ldi	r24, 0x09	; 9
    2604:	e8 2e       	mov	r14, r24
    2606:	f1 2c       	mov	r15, r1
    2608:	ec 0e       	add	r14, r28
    260a:	fd 1e       	adc	r15, r29
    260c:	ce 01       	movw	r24, r28
    260e:	01 96       	adiw	r24, 0x01	; 1
    2610:	b7 01       	movw	r22, r14
    2612:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__unpack_f>
    2616:	8e 01       	movw	r16, r28
    2618:	0f 5e       	subi	r16, 0xEF	; 239
    261a:	1f 4f       	sbci	r17, 0xFF	; 255
    261c:	ce 01       	movw	r24, r28
    261e:	05 96       	adiw	r24, 0x05	; 5
    2620:	b8 01       	movw	r22, r16
    2622:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__unpack_f>
    2626:	89 85       	ldd	r24, Y+9	; 0x09
    2628:	82 30       	cpi	r24, 0x02	; 2
    262a:	40 f0       	brcs	.+16     	; 0x263c <__gesf2+0x56>
    262c:	89 89       	ldd	r24, Y+17	; 0x11
    262e:	82 30       	cpi	r24, 0x02	; 2
    2630:	28 f0       	brcs	.+10     	; 0x263c <__gesf2+0x56>
    2632:	c7 01       	movw	r24, r14
    2634:	b8 01       	movw	r22, r16
    2636:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__fpcmp_parts_f>
    263a:	01 c0       	rjmp	.+2      	; 0x263e <__gesf2+0x58>
    263c:	8f ef       	ldi	r24, 0xFF	; 255
    263e:	68 96       	adiw	r28, 0x18	; 24
    2640:	e6 e0       	ldi	r30, 0x06	; 6
    2642:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <__epilogue_restores__+0x18>

00002646 <__ltsf2>:
    2646:	a8 e1       	ldi	r26, 0x18	; 24
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	e9 e2       	ldi	r30, 0x29	; 41
    264c:	f3 e1       	ldi	r31, 0x13	; 19
    264e:	0c 94 6d 15 	jmp	0x2ada	; 0x2ada <__prologue_saves__+0x18>
    2652:	69 83       	std	Y+1, r22	; 0x01
    2654:	7a 83       	std	Y+2, r23	; 0x02
    2656:	8b 83       	std	Y+3, r24	; 0x03
    2658:	9c 83       	std	Y+4, r25	; 0x04
    265a:	2d 83       	std	Y+5, r18	; 0x05
    265c:	3e 83       	std	Y+6, r19	; 0x06
    265e:	4f 83       	std	Y+7, r20	; 0x07
    2660:	58 87       	std	Y+8, r21	; 0x08
    2662:	89 e0       	ldi	r24, 0x09	; 9
    2664:	e8 2e       	mov	r14, r24
    2666:	f1 2c       	mov	r15, r1
    2668:	ec 0e       	add	r14, r28
    266a:	fd 1e       	adc	r15, r29
    266c:	ce 01       	movw	r24, r28
    266e:	01 96       	adiw	r24, 0x01	; 1
    2670:	b7 01       	movw	r22, r14
    2672:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__unpack_f>
    2676:	8e 01       	movw	r16, r28
    2678:	0f 5e       	subi	r16, 0xEF	; 239
    267a:	1f 4f       	sbci	r17, 0xFF	; 255
    267c:	ce 01       	movw	r24, r28
    267e:	05 96       	adiw	r24, 0x05	; 5
    2680:	b8 01       	movw	r22, r16
    2682:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__unpack_f>
    2686:	89 85       	ldd	r24, Y+9	; 0x09
    2688:	82 30       	cpi	r24, 0x02	; 2
    268a:	40 f0       	brcs	.+16     	; 0x269c <__ltsf2+0x56>
    268c:	89 89       	ldd	r24, Y+17	; 0x11
    268e:	82 30       	cpi	r24, 0x02	; 2
    2690:	28 f0       	brcs	.+10     	; 0x269c <__ltsf2+0x56>
    2692:	c7 01       	movw	r24, r14
    2694:	b8 01       	movw	r22, r16
    2696:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <__fpcmp_parts_f>
    269a:	01 c0       	rjmp	.+2      	; 0x269e <__ltsf2+0x58>
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	68 96       	adiw	r28, 0x18	; 24
    26a0:	e6 e0       	ldi	r30, 0x06	; 6
    26a2:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <__epilogue_restores__+0x18>

000026a6 <__fixsfsi>:
    26a6:	ac e0       	ldi	r26, 0x0C	; 12
    26a8:	b0 e0       	ldi	r27, 0x00	; 0
    26aa:	e9 e5       	ldi	r30, 0x59	; 89
    26ac:	f3 e1       	ldi	r31, 0x13	; 19
    26ae:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <__prologue_saves__+0x20>
    26b2:	69 83       	std	Y+1, r22	; 0x01
    26b4:	7a 83       	std	Y+2, r23	; 0x02
    26b6:	8b 83       	std	Y+3, r24	; 0x03
    26b8:	9c 83       	std	Y+4, r25	; 0x04
    26ba:	ce 01       	movw	r24, r28
    26bc:	01 96       	adiw	r24, 0x01	; 1
    26be:	be 01       	movw	r22, r28
    26c0:	6b 5f       	subi	r22, 0xFB	; 251
    26c2:	7f 4f       	sbci	r23, 0xFF	; 255
    26c4:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__unpack_f>
    26c8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ca:	82 30       	cpi	r24, 0x02	; 2
    26cc:	61 f1       	breq	.+88     	; 0x2726 <__fixsfsi+0x80>
    26ce:	82 30       	cpi	r24, 0x02	; 2
    26d0:	50 f1       	brcs	.+84     	; 0x2726 <__fixsfsi+0x80>
    26d2:	84 30       	cpi	r24, 0x04	; 4
    26d4:	21 f4       	brne	.+8      	; 0x26de <__fixsfsi+0x38>
    26d6:	8e 81       	ldd	r24, Y+6	; 0x06
    26d8:	88 23       	and	r24, r24
    26da:	51 f1       	breq	.+84     	; 0x2730 <__fixsfsi+0x8a>
    26dc:	2e c0       	rjmp	.+92     	; 0x273a <__fixsfsi+0x94>
    26de:	2f 81       	ldd	r18, Y+7	; 0x07
    26e0:	38 85       	ldd	r19, Y+8	; 0x08
    26e2:	37 fd       	sbrc	r19, 7
    26e4:	20 c0       	rjmp	.+64     	; 0x2726 <__fixsfsi+0x80>
    26e6:	6e 81       	ldd	r22, Y+6	; 0x06
    26e8:	2f 31       	cpi	r18, 0x1F	; 31
    26ea:	31 05       	cpc	r19, r1
    26ec:	1c f0       	brlt	.+6      	; 0x26f4 <__fixsfsi+0x4e>
    26ee:	66 23       	and	r22, r22
    26f0:	f9 f0       	breq	.+62     	; 0x2730 <__fixsfsi+0x8a>
    26f2:	23 c0       	rjmp	.+70     	; 0x273a <__fixsfsi+0x94>
    26f4:	8e e1       	ldi	r24, 0x1E	; 30
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	82 1b       	sub	r24, r18
    26fa:	93 0b       	sbc	r25, r19
    26fc:	29 85       	ldd	r18, Y+9	; 0x09
    26fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    2700:	4b 85       	ldd	r20, Y+11	; 0x0b
    2702:	5c 85       	ldd	r21, Y+12	; 0x0c
    2704:	04 c0       	rjmp	.+8      	; 0x270e <__fixsfsi+0x68>
    2706:	56 95       	lsr	r21
    2708:	47 95       	ror	r20
    270a:	37 95       	ror	r19
    270c:	27 95       	ror	r18
    270e:	8a 95       	dec	r24
    2710:	d2 f7       	brpl	.-12     	; 0x2706 <__fixsfsi+0x60>
    2712:	66 23       	and	r22, r22
    2714:	b1 f0       	breq	.+44     	; 0x2742 <__fixsfsi+0x9c>
    2716:	50 95       	com	r21
    2718:	40 95       	com	r20
    271a:	30 95       	com	r19
    271c:	21 95       	neg	r18
    271e:	3f 4f       	sbci	r19, 0xFF	; 255
    2720:	4f 4f       	sbci	r20, 0xFF	; 255
    2722:	5f 4f       	sbci	r21, 0xFF	; 255
    2724:	0e c0       	rjmp	.+28     	; 0x2742 <__fixsfsi+0x9c>
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e0       	ldi	r20, 0x00	; 0
    272c:	50 e0       	ldi	r21, 0x00	; 0
    272e:	09 c0       	rjmp	.+18     	; 0x2742 <__fixsfsi+0x9c>
    2730:	2f ef       	ldi	r18, 0xFF	; 255
    2732:	3f ef       	ldi	r19, 0xFF	; 255
    2734:	4f ef       	ldi	r20, 0xFF	; 255
    2736:	5f e7       	ldi	r21, 0x7F	; 127
    2738:	04 c0       	rjmp	.+8      	; 0x2742 <__fixsfsi+0x9c>
    273a:	20 e0       	ldi	r18, 0x00	; 0
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	50 e8       	ldi	r21, 0x80	; 128
    2742:	b9 01       	movw	r22, r18
    2744:	ca 01       	movw	r24, r20
    2746:	2c 96       	adiw	r28, 0x0c	; 12
    2748:	e2 e0       	ldi	r30, 0x02	; 2
    274a:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__epilogue_restores__+0x20>

0000274e <__pack_f>:
    274e:	df 92       	push	r13
    2750:	ef 92       	push	r14
    2752:	ff 92       	push	r15
    2754:	0f 93       	push	r16
    2756:	1f 93       	push	r17
    2758:	fc 01       	movw	r30, r24
    275a:	e4 80       	ldd	r14, Z+4	; 0x04
    275c:	f5 80       	ldd	r15, Z+5	; 0x05
    275e:	06 81       	ldd	r16, Z+6	; 0x06
    2760:	17 81       	ldd	r17, Z+7	; 0x07
    2762:	d1 80       	ldd	r13, Z+1	; 0x01
    2764:	80 81       	ld	r24, Z
    2766:	82 30       	cpi	r24, 0x02	; 2
    2768:	48 f4       	brcc	.+18     	; 0x277c <__pack_f+0x2e>
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	a0 e1       	ldi	r26, 0x10	; 16
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e8 2a       	or	r14, r24
    2774:	f9 2a       	or	r15, r25
    2776:	0a 2b       	or	r16, r26
    2778:	1b 2b       	or	r17, r27
    277a:	a5 c0       	rjmp	.+330    	; 0x28c6 <__pack_f+0x178>
    277c:	84 30       	cpi	r24, 0x04	; 4
    277e:	09 f4       	brne	.+2      	; 0x2782 <__pack_f+0x34>
    2780:	9f c0       	rjmp	.+318    	; 0x28c0 <__pack_f+0x172>
    2782:	82 30       	cpi	r24, 0x02	; 2
    2784:	21 f4       	brne	.+8      	; 0x278e <__pack_f+0x40>
    2786:	ee 24       	eor	r14, r14
    2788:	ff 24       	eor	r15, r15
    278a:	87 01       	movw	r16, r14
    278c:	05 c0       	rjmp	.+10     	; 0x2798 <__pack_f+0x4a>
    278e:	e1 14       	cp	r14, r1
    2790:	f1 04       	cpc	r15, r1
    2792:	01 05       	cpc	r16, r1
    2794:	11 05       	cpc	r17, r1
    2796:	19 f4       	brne	.+6      	; 0x279e <__pack_f+0x50>
    2798:	e0 e0       	ldi	r30, 0x00	; 0
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	96 c0       	rjmp	.+300    	; 0x28ca <__pack_f+0x17c>
    279e:	62 81       	ldd	r22, Z+2	; 0x02
    27a0:	73 81       	ldd	r23, Z+3	; 0x03
    27a2:	9f ef       	ldi	r25, 0xFF	; 255
    27a4:	62 38       	cpi	r22, 0x82	; 130
    27a6:	79 07       	cpc	r23, r25
    27a8:	0c f0       	brlt	.+2      	; 0x27ac <__pack_f+0x5e>
    27aa:	5b c0       	rjmp	.+182    	; 0x2862 <__pack_f+0x114>
    27ac:	22 e8       	ldi	r18, 0x82	; 130
    27ae:	3f ef       	ldi	r19, 0xFF	; 255
    27b0:	26 1b       	sub	r18, r22
    27b2:	37 0b       	sbc	r19, r23
    27b4:	2a 31       	cpi	r18, 0x1A	; 26
    27b6:	31 05       	cpc	r19, r1
    27b8:	2c f0       	brlt	.+10     	; 0x27c4 <__pack_f+0x76>
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	50 e0       	ldi	r21, 0x00	; 0
    27c2:	2a c0       	rjmp	.+84     	; 0x2818 <__pack_f+0xca>
    27c4:	b8 01       	movw	r22, r16
    27c6:	a7 01       	movw	r20, r14
    27c8:	02 2e       	mov	r0, r18
    27ca:	04 c0       	rjmp	.+8      	; 0x27d4 <__pack_f+0x86>
    27cc:	76 95       	lsr	r23
    27ce:	67 95       	ror	r22
    27d0:	57 95       	ror	r21
    27d2:	47 95       	ror	r20
    27d4:	0a 94       	dec	r0
    27d6:	d2 f7       	brpl	.-12     	; 0x27cc <__pack_f+0x7e>
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	a0 e0       	ldi	r26, 0x00	; 0
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	04 c0       	rjmp	.+8      	; 0x27ea <__pack_f+0x9c>
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	aa 1f       	adc	r26, r26
    27e8:	bb 1f       	adc	r27, r27
    27ea:	2a 95       	dec	r18
    27ec:	d2 f7       	brpl	.-12     	; 0x27e2 <__pack_f+0x94>
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	a1 09       	sbc	r26, r1
    27f2:	b1 09       	sbc	r27, r1
    27f4:	8e 21       	and	r24, r14
    27f6:	9f 21       	and	r25, r15
    27f8:	a0 23       	and	r26, r16
    27fa:	b1 23       	and	r27, r17
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	a1 05       	cpc	r26, r1
    2800:	b1 05       	cpc	r27, r1
    2802:	21 f0       	breq	.+8      	; 0x280c <__pack_f+0xbe>
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	a0 e0       	ldi	r26, 0x00	; 0
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	9a 01       	movw	r18, r20
    280e:	ab 01       	movw	r20, r22
    2810:	28 2b       	or	r18, r24
    2812:	39 2b       	or	r19, r25
    2814:	4a 2b       	or	r20, r26
    2816:	5b 2b       	or	r21, r27
    2818:	da 01       	movw	r26, r20
    281a:	c9 01       	movw	r24, r18
    281c:	8f 77       	andi	r24, 0x7F	; 127
    281e:	90 70       	andi	r25, 0x00	; 0
    2820:	a0 70       	andi	r26, 0x00	; 0
    2822:	b0 70       	andi	r27, 0x00	; 0
    2824:	80 34       	cpi	r24, 0x40	; 64
    2826:	91 05       	cpc	r25, r1
    2828:	a1 05       	cpc	r26, r1
    282a:	b1 05       	cpc	r27, r1
    282c:	39 f4       	brne	.+14     	; 0x283c <__pack_f+0xee>
    282e:	27 ff       	sbrs	r18, 7
    2830:	09 c0       	rjmp	.+18     	; 0x2844 <__pack_f+0xf6>
    2832:	20 5c       	subi	r18, 0xC0	; 192
    2834:	3f 4f       	sbci	r19, 0xFF	; 255
    2836:	4f 4f       	sbci	r20, 0xFF	; 255
    2838:	5f 4f       	sbci	r21, 0xFF	; 255
    283a:	04 c0       	rjmp	.+8      	; 0x2844 <__pack_f+0xf6>
    283c:	21 5c       	subi	r18, 0xC1	; 193
    283e:	3f 4f       	sbci	r19, 0xFF	; 255
    2840:	4f 4f       	sbci	r20, 0xFF	; 255
    2842:	5f 4f       	sbci	r21, 0xFF	; 255
    2844:	e0 e0       	ldi	r30, 0x00	; 0
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	20 30       	cpi	r18, 0x00	; 0
    284a:	a0 e0       	ldi	r26, 0x00	; 0
    284c:	3a 07       	cpc	r19, r26
    284e:	a0 e0       	ldi	r26, 0x00	; 0
    2850:	4a 07       	cpc	r20, r26
    2852:	a0 e4       	ldi	r26, 0x40	; 64
    2854:	5a 07       	cpc	r21, r26
    2856:	10 f0       	brcs	.+4      	; 0x285c <__pack_f+0x10e>
    2858:	e1 e0       	ldi	r30, 0x01	; 1
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	79 01       	movw	r14, r18
    285e:	8a 01       	movw	r16, r20
    2860:	27 c0       	rjmp	.+78     	; 0x28b0 <__pack_f+0x162>
    2862:	60 38       	cpi	r22, 0x80	; 128
    2864:	71 05       	cpc	r23, r1
    2866:	64 f5       	brge	.+88     	; 0x28c0 <__pack_f+0x172>
    2868:	fb 01       	movw	r30, r22
    286a:	e1 58       	subi	r30, 0x81	; 129
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	d8 01       	movw	r26, r16
    2870:	c7 01       	movw	r24, r14
    2872:	8f 77       	andi	r24, 0x7F	; 127
    2874:	90 70       	andi	r25, 0x00	; 0
    2876:	a0 70       	andi	r26, 0x00	; 0
    2878:	b0 70       	andi	r27, 0x00	; 0
    287a:	80 34       	cpi	r24, 0x40	; 64
    287c:	91 05       	cpc	r25, r1
    287e:	a1 05       	cpc	r26, r1
    2880:	b1 05       	cpc	r27, r1
    2882:	39 f4       	brne	.+14     	; 0x2892 <__pack_f+0x144>
    2884:	e7 fe       	sbrs	r14, 7
    2886:	0d c0       	rjmp	.+26     	; 0x28a2 <__pack_f+0x154>
    2888:	80 e4       	ldi	r24, 0x40	; 64
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	a0 e0       	ldi	r26, 0x00	; 0
    288e:	b0 e0       	ldi	r27, 0x00	; 0
    2890:	04 c0       	rjmp	.+8      	; 0x289a <__pack_f+0x14c>
    2892:	8f e3       	ldi	r24, 0x3F	; 63
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	a0 e0       	ldi	r26, 0x00	; 0
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	e8 0e       	add	r14, r24
    289c:	f9 1e       	adc	r15, r25
    289e:	0a 1f       	adc	r16, r26
    28a0:	1b 1f       	adc	r17, r27
    28a2:	17 ff       	sbrs	r17, 7
    28a4:	05 c0       	rjmp	.+10     	; 0x28b0 <__pack_f+0x162>
    28a6:	16 95       	lsr	r17
    28a8:	07 95       	ror	r16
    28aa:	f7 94       	ror	r15
    28ac:	e7 94       	ror	r14
    28ae:	31 96       	adiw	r30, 0x01	; 1
    28b0:	87 e0       	ldi	r24, 0x07	; 7
    28b2:	16 95       	lsr	r17
    28b4:	07 95       	ror	r16
    28b6:	f7 94       	ror	r15
    28b8:	e7 94       	ror	r14
    28ba:	8a 95       	dec	r24
    28bc:	d1 f7       	brne	.-12     	; 0x28b2 <__pack_f+0x164>
    28be:	05 c0       	rjmp	.+10     	; 0x28ca <__pack_f+0x17c>
    28c0:	ee 24       	eor	r14, r14
    28c2:	ff 24       	eor	r15, r15
    28c4:	87 01       	movw	r16, r14
    28c6:	ef ef       	ldi	r30, 0xFF	; 255
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	6e 2f       	mov	r22, r30
    28cc:	67 95       	ror	r22
    28ce:	66 27       	eor	r22, r22
    28d0:	67 95       	ror	r22
    28d2:	90 2f       	mov	r25, r16
    28d4:	9f 77       	andi	r25, 0x7F	; 127
    28d6:	d7 94       	ror	r13
    28d8:	dd 24       	eor	r13, r13
    28da:	d7 94       	ror	r13
    28dc:	8e 2f       	mov	r24, r30
    28de:	86 95       	lsr	r24
    28e0:	49 2f       	mov	r20, r25
    28e2:	46 2b       	or	r20, r22
    28e4:	58 2f       	mov	r21, r24
    28e6:	5d 29       	or	r21, r13
    28e8:	b7 01       	movw	r22, r14
    28ea:	ca 01       	movw	r24, r20
    28ec:	1f 91       	pop	r17
    28ee:	0f 91       	pop	r16
    28f0:	ff 90       	pop	r15
    28f2:	ef 90       	pop	r14
    28f4:	df 90       	pop	r13
    28f6:	08 95       	ret

000028f8 <__unpack_f>:
    28f8:	fc 01       	movw	r30, r24
    28fa:	db 01       	movw	r26, r22
    28fc:	40 81       	ld	r20, Z
    28fe:	51 81       	ldd	r21, Z+1	; 0x01
    2900:	22 81       	ldd	r18, Z+2	; 0x02
    2902:	62 2f       	mov	r22, r18
    2904:	6f 77       	andi	r22, 0x7F	; 127
    2906:	70 e0       	ldi	r23, 0x00	; 0
    2908:	22 1f       	adc	r18, r18
    290a:	22 27       	eor	r18, r18
    290c:	22 1f       	adc	r18, r18
    290e:	93 81       	ldd	r25, Z+3	; 0x03
    2910:	89 2f       	mov	r24, r25
    2912:	88 0f       	add	r24, r24
    2914:	82 2b       	or	r24, r18
    2916:	28 2f       	mov	r18, r24
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	99 1f       	adc	r25, r25
    291c:	99 27       	eor	r25, r25
    291e:	99 1f       	adc	r25, r25
    2920:	11 96       	adiw	r26, 0x01	; 1
    2922:	9c 93       	st	X, r25
    2924:	11 97       	sbiw	r26, 0x01	; 1
    2926:	21 15       	cp	r18, r1
    2928:	31 05       	cpc	r19, r1
    292a:	a9 f5       	brne	.+106    	; 0x2996 <__unpack_f+0x9e>
    292c:	41 15       	cp	r20, r1
    292e:	51 05       	cpc	r21, r1
    2930:	61 05       	cpc	r22, r1
    2932:	71 05       	cpc	r23, r1
    2934:	11 f4       	brne	.+4      	; 0x293a <__unpack_f+0x42>
    2936:	82 e0       	ldi	r24, 0x02	; 2
    2938:	37 c0       	rjmp	.+110    	; 0x29a8 <__unpack_f+0xb0>
    293a:	82 e8       	ldi	r24, 0x82	; 130
    293c:	9f ef       	ldi	r25, 0xFF	; 255
    293e:	13 96       	adiw	r26, 0x03	; 3
    2940:	9c 93       	st	X, r25
    2942:	8e 93       	st	-X, r24
    2944:	12 97       	sbiw	r26, 0x02	; 2
    2946:	9a 01       	movw	r18, r20
    2948:	ab 01       	movw	r20, r22
    294a:	67 e0       	ldi	r22, 0x07	; 7
    294c:	22 0f       	add	r18, r18
    294e:	33 1f       	adc	r19, r19
    2950:	44 1f       	adc	r20, r20
    2952:	55 1f       	adc	r21, r21
    2954:	6a 95       	dec	r22
    2956:	d1 f7       	brne	.-12     	; 0x294c <__unpack_f+0x54>
    2958:	83 e0       	ldi	r24, 0x03	; 3
    295a:	8c 93       	st	X, r24
    295c:	0d c0       	rjmp	.+26     	; 0x2978 <__unpack_f+0x80>
    295e:	22 0f       	add	r18, r18
    2960:	33 1f       	adc	r19, r19
    2962:	44 1f       	adc	r20, r20
    2964:	55 1f       	adc	r21, r21
    2966:	12 96       	adiw	r26, 0x02	; 2
    2968:	8d 91       	ld	r24, X+
    296a:	9c 91       	ld	r25, X
    296c:	13 97       	sbiw	r26, 0x03	; 3
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	13 96       	adiw	r26, 0x03	; 3
    2972:	9c 93       	st	X, r25
    2974:	8e 93       	st	-X, r24
    2976:	12 97       	sbiw	r26, 0x02	; 2
    2978:	20 30       	cpi	r18, 0x00	; 0
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	38 07       	cpc	r19, r24
    297e:	80 e0       	ldi	r24, 0x00	; 0
    2980:	48 07       	cpc	r20, r24
    2982:	80 e4       	ldi	r24, 0x40	; 64
    2984:	58 07       	cpc	r21, r24
    2986:	58 f3       	brcs	.-42     	; 0x295e <__unpack_f+0x66>
    2988:	14 96       	adiw	r26, 0x04	; 4
    298a:	2d 93       	st	X+, r18
    298c:	3d 93       	st	X+, r19
    298e:	4d 93       	st	X+, r20
    2990:	5c 93       	st	X, r21
    2992:	17 97       	sbiw	r26, 0x07	; 7
    2994:	08 95       	ret
    2996:	2f 3f       	cpi	r18, 0xFF	; 255
    2998:	31 05       	cpc	r19, r1
    299a:	79 f4       	brne	.+30     	; 0x29ba <__unpack_f+0xc2>
    299c:	41 15       	cp	r20, r1
    299e:	51 05       	cpc	r21, r1
    29a0:	61 05       	cpc	r22, r1
    29a2:	71 05       	cpc	r23, r1
    29a4:	19 f4       	brne	.+6      	; 0x29ac <__unpack_f+0xb4>
    29a6:	84 e0       	ldi	r24, 0x04	; 4
    29a8:	8c 93       	st	X, r24
    29aa:	08 95       	ret
    29ac:	64 ff       	sbrs	r22, 4
    29ae:	03 c0       	rjmp	.+6      	; 0x29b6 <__unpack_f+0xbe>
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	8c 93       	st	X, r24
    29b4:	12 c0       	rjmp	.+36     	; 0x29da <__unpack_f+0xe2>
    29b6:	1c 92       	st	X, r1
    29b8:	10 c0       	rjmp	.+32     	; 0x29da <__unpack_f+0xe2>
    29ba:	2f 57       	subi	r18, 0x7F	; 127
    29bc:	30 40       	sbci	r19, 0x00	; 0
    29be:	13 96       	adiw	r26, 0x03	; 3
    29c0:	3c 93       	st	X, r19
    29c2:	2e 93       	st	-X, r18
    29c4:	12 97       	sbiw	r26, 0x02	; 2
    29c6:	83 e0       	ldi	r24, 0x03	; 3
    29c8:	8c 93       	st	X, r24
    29ca:	87 e0       	ldi	r24, 0x07	; 7
    29cc:	44 0f       	add	r20, r20
    29ce:	55 1f       	adc	r21, r21
    29d0:	66 1f       	adc	r22, r22
    29d2:	77 1f       	adc	r23, r23
    29d4:	8a 95       	dec	r24
    29d6:	d1 f7       	brne	.-12     	; 0x29cc <__unpack_f+0xd4>
    29d8:	70 64       	ori	r23, 0x40	; 64
    29da:	14 96       	adiw	r26, 0x04	; 4
    29dc:	4d 93       	st	X+, r20
    29de:	5d 93       	st	X+, r21
    29e0:	6d 93       	st	X+, r22
    29e2:	7c 93       	st	X, r23
    29e4:	17 97       	sbiw	r26, 0x07	; 7
    29e6:	08 95       	ret

000029e8 <__fpcmp_parts_f>:
    29e8:	1f 93       	push	r17
    29ea:	dc 01       	movw	r26, r24
    29ec:	fb 01       	movw	r30, r22
    29ee:	9c 91       	ld	r25, X
    29f0:	92 30       	cpi	r25, 0x02	; 2
    29f2:	08 f4       	brcc	.+2      	; 0x29f6 <__fpcmp_parts_f+0xe>
    29f4:	47 c0       	rjmp	.+142    	; 0x2a84 <__fpcmp_parts_f+0x9c>
    29f6:	80 81       	ld	r24, Z
    29f8:	82 30       	cpi	r24, 0x02	; 2
    29fa:	08 f4       	brcc	.+2      	; 0x29fe <__fpcmp_parts_f+0x16>
    29fc:	43 c0       	rjmp	.+134    	; 0x2a84 <__fpcmp_parts_f+0x9c>
    29fe:	94 30       	cpi	r25, 0x04	; 4
    2a00:	51 f4       	brne	.+20     	; 0x2a16 <__fpcmp_parts_f+0x2e>
    2a02:	11 96       	adiw	r26, 0x01	; 1
    2a04:	1c 91       	ld	r17, X
    2a06:	84 30       	cpi	r24, 0x04	; 4
    2a08:	99 f5       	brne	.+102    	; 0x2a70 <__fpcmp_parts_f+0x88>
    2a0a:	81 81       	ldd	r24, Z+1	; 0x01
    2a0c:	68 2f       	mov	r22, r24
    2a0e:	70 e0       	ldi	r23, 0x00	; 0
    2a10:	61 1b       	sub	r22, r17
    2a12:	71 09       	sbc	r23, r1
    2a14:	3f c0       	rjmp	.+126    	; 0x2a94 <__fpcmp_parts_f+0xac>
    2a16:	84 30       	cpi	r24, 0x04	; 4
    2a18:	21 f0       	breq	.+8      	; 0x2a22 <__fpcmp_parts_f+0x3a>
    2a1a:	92 30       	cpi	r25, 0x02	; 2
    2a1c:	31 f4       	brne	.+12     	; 0x2a2a <__fpcmp_parts_f+0x42>
    2a1e:	82 30       	cpi	r24, 0x02	; 2
    2a20:	b9 f1       	breq	.+110    	; 0x2a90 <__fpcmp_parts_f+0xa8>
    2a22:	81 81       	ldd	r24, Z+1	; 0x01
    2a24:	88 23       	and	r24, r24
    2a26:	89 f1       	breq	.+98     	; 0x2a8a <__fpcmp_parts_f+0xa2>
    2a28:	2d c0       	rjmp	.+90     	; 0x2a84 <__fpcmp_parts_f+0x9c>
    2a2a:	11 96       	adiw	r26, 0x01	; 1
    2a2c:	1c 91       	ld	r17, X
    2a2e:	11 97       	sbiw	r26, 0x01	; 1
    2a30:	82 30       	cpi	r24, 0x02	; 2
    2a32:	f1 f0       	breq	.+60     	; 0x2a70 <__fpcmp_parts_f+0x88>
    2a34:	81 81       	ldd	r24, Z+1	; 0x01
    2a36:	18 17       	cp	r17, r24
    2a38:	d9 f4       	brne	.+54     	; 0x2a70 <__fpcmp_parts_f+0x88>
    2a3a:	12 96       	adiw	r26, 0x02	; 2
    2a3c:	2d 91       	ld	r18, X+
    2a3e:	3c 91       	ld	r19, X
    2a40:	13 97       	sbiw	r26, 0x03	; 3
    2a42:	82 81       	ldd	r24, Z+2	; 0x02
    2a44:	93 81       	ldd	r25, Z+3	; 0x03
    2a46:	82 17       	cp	r24, r18
    2a48:	93 07       	cpc	r25, r19
    2a4a:	94 f0       	brlt	.+36     	; 0x2a70 <__fpcmp_parts_f+0x88>
    2a4c:	28 17       	cp	r18, r24
    2a4e:	39 07       	cpc	r19, r25
    2a50:	bc f0       	brlt	.+46     	; 0x2a80 <__fpcmp_parts_f+0x98>
    2a52:	14 96       	adiw	r26, 0x04	; 4
    2a54:	8d 91       	ld	r24, X+
    2a56:	9d 91       	ld	r25, X+
    2a58:	0d 90       	ld	r0, X+
    2a5a:	bc 91       	ld	r27, X
    2a5c:	a0 2d       	mov	r26, r0
    2a5e:	24 81       	ldd	r18, Z+4	; 0x04
    2a60:	35 81       	ldd	r19, Z+5	; 0x05
    2a62:	46 81       	ldd	r20, Z+6	; 0x06
    2a64:	57 81       	ldd	r21, Z+7	; 0x07
    2a66:	28 17       	cp	r18, r24
    2a68:	39 07       	cpc	r19, r25
    2a6a:	4a 07       	cpc	r20, r26
    2a6c:	5b 07       	cpc	r21, r27
    2a6e:	18 f4       	brcc	.+6      	; 0x2a76 <__fpcmp_parts_f+0x8e>
    2a70:	11 23       	and	r17, r17
    2a72:	41 f0       	breq	.+16     	; 0x2a84 <__fpcmp_parts_f+0x9c>
    2a74:	0a c0       	rjmp	.+20     	; 0x2a8a <__fpcmp_parts_f+0xa2>
    2a76:	82 17       	cp	r24, r18
    2a78:	93 07       	cpc	r25, r19
    2a7a:	a4 07       	cpc	r26, r20
    2a7c:	b5 07       	cpc	r27, r21
    2a7e:	40 f4       	brcc	.+16     	; 0x2a90 <__fpcmp_parts_f+0xa8>
    2a80:	11 23       	and	r17, r17
    2a82:	19 f0       	breq	.+6      	; 0x2a8a <__fpcmp_parts_f+0xa2>
    2a84:	61 e0       	ldi	r22, 0x01	; 1
    2a86:	70 e0       	ldi	r23, 0x00	; 0
    2a88:	05 c0       	rjmp	.+10     	; 0x2a94 <__fpcmp_parts_f+0xac>
    2a8a:	6f ef       	ldi	r22, 0xFF	; 255
    2a8c:	7f ef       	ldi	r23, 0xFF	; 255
    2a8e:	02 c0       	rjmp	.+4      	; 0x2a94 <__fpcmp_parts_f+0xac>
    2a90:	60 e0       	ldi	r22, 0x00	; 0
    2a92:	70 e0       	ldi	r23, 0x00	; 0
    2a94:	cb 01       	movw	r24, r22
    2a96:	1f 91       	pop	r17
    2a98:	08 95       	ret

00002a9a <__udivmodhi4>:
    2a9a:	aa 1b       	sub	r26, r26
    2a9c:	bb 1b       	sub	r27, r27
    2a9e:	51 e1       	ldi	r21, 0x11	; 17
    2aa0:	07 c0       	rjmp	.+14     	; 0x2ab0 <__udivmodhi4_ep>

00002aa2 <__udivmodhi4_loop>:
    2aa2:	aa 1f       	adc	r26, r26
    2aa4:	bb 1f       	adc	r27, r27
    2aa6:	a6 17       	cp	r26, r22
    2aa8:	b7 07       	cpc	r27, r23
    2aaa:	10 f0       	brcs	.+4      	; 0x2ab0 <__udivmodhi4_ep>
    2aac:	a6 1b       	sub	r26, r22
    2aae:	b7 0b       	sbc	r27, r23

00002ab0 <__udivmodhi4_ep>:
    2ab0:	88 1f       	adc	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	5a 95       	dec	r21
    2ab6:	a9 f7       	brne	.-22     	; 0x2aa2 <__udivmodhi4_loop>
    2ab8:	80 95       	com	r24
    2aba:	90 95       	com	r25
    2abc:	bc 01       	movw	r22, r24
    2abe:	cd 01       	movw	r24, r26
    2ac0:	08 95       	ret

00002ac2 <__prologue_saves__>:
    2ac2:	2f 92       	push	r2
    2ac4:	3f 92       	push	r3
    2ac6:	4f 92       	push	r4
    2ac8:	5f 92       	push	r5
    2aca:	6f 92       	push	r6
    2acc:	7f 92       	push	r7
    2ace:	8f 92       	push	r8
    2ad0:	9f 92       	push	r9
    2ad2:	af 92       	push	r10
    2ad4:	bf 92       	push	r11
    2ad6:	cf 92       	push	r12
    2ad8:	df 92       	push	r13
    2ada:	ef 92       	push	r14
    2adc:	ff 92       	push	r15
    2ade:	0f 93       	push	r16
    2ae0:	1f 93       	push	r17
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	cd b7       	in	r28, 0x3d	; 61
    2ae8:	de b7       	in	r29, 0x3e	; 62
    2aea:	ca 1b       	sub	r28, r26
    2aec:	db 0b       	sbc	r29, r27
    2aee:	0f b6       	in	r0, 0x3f	; 63
    2af0:	f8 94       	cli
    2af2:	de bf       	out	0x3e, r29	; 62
    2af4:	0f be       	out	0x3f, r0	; 63
    2af6:	cd bf       	out	0x3d, r28	; 61
    2af8:	19 94       	eijmp

00002afa <__epilogue_restores__>:
    2afa:	2a 88       	ldd	r2, Y+18	; 0x12
    2afc:	39 88       	ldd	r3, Y+17	; 0x11
    2afe:	48 88       	ldd	r4, Y+16	; 0x10
    2b00:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b02:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b04:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b06:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b08:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b0c:	b9 84       	ldd	r11, Y+9	; 0x09
    2b0e:	c8 84       	ldd	r12, Y+8	; 0x08
    2b10:	df 80       	ldd	r13, Y+7	; 0x07
    2b12:	ee 80       	ldd	r14, Y+6	; 0x06
    2b14:	fd 80       	ldd	r15, Y+5	; 0x05
    2b16:	0c 81       	ldd	r16, Y+4	; 0x04
    2b18:	1b 81       	ldd	r17, Y+3	; 0x03
    2b1a:	aa 81       	ldd	r26, Y+2	; 0x02
    2b1c:	b9 81       	ldd	r27, Y+1	; 0x01
    2b1e:	ce 0f       	add	r28, r30
    2b20:	d1 1d       	adc	r29, r1
    2b22:	0f b6       	in	r0, 0x3f	; 63
    2b24:	f8 94       	cli
    2b26:	de bf       	out	0x3e, r29	; 62
    2b28:	0f be       	out	0x3f, r0	; 63
    2b2a:	cd bf       	out	0x3d, r28	; 61
    2b2c:	ed 01       	movw	r28, r26
    2b2e:	08 95       	ret

00002b30 <_exit>:
    2b30:	f8 94       	cli

00002b32 <__stop_program>:
    2b32:	ff cf       	rjmp	.-2      	; 0x2b32 <__stop_program>
